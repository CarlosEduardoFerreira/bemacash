package com.kaching123.tcr.websvc.api.prepaid;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 3/4/2014 8:12:58 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.util.Hashtable;

public class DocumentPaymentResponse implements KvmSerializable, Serializable {
    
    public VectorDocument paidDocumentList;
    public double updatedBalance;
    public String timestamp;
    public int responseCode;
    public String responseDescription;
    public long referenceNumber;
    
    public DocumentPaymentResponse(){}
    
    public DocumentPaymentResponse(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("PaidDocumentList"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("PaidDocumentList");
            paidDocumentList = new VectorDocument(j);
        }
        if (soapObject.hasProperty("UpdatedBalance"))
        {
            Object obj = soapObject.getProperty("UpdatedBalance");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                updatedBalance = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                updatedBalance = (Double) obj;
            }
        }
        if (soapObject.hasProperty("Timestamp"))
        {
            Object obj = soapObject.getProperty("Timestamp");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                timestamp = j.toString();
            }else if (obj!= null && obj instanceof String){
                timestamp = (String) obj;
            }
        }
        if (soapObject.hasProperty("ResponseCode"))
        {
            Object obj = soapObject.getProperty("ResponseCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                responseCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                responseCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ResponseDescription"))
        {
            Object obj = soapObject.getProperty("ResponseDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                responseDescription = j.toString();
            }else if (obj!= null && obj instanceof String){
                responseDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("ReferenceNumber"))
        {
            Object obj = soapObject.getProperty("ReferenceNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                referenceNumber = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                referenceNumber = (Integer) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return paidDocumentList;
            case 1:
                return updatedBalance;
            case 2:
                return timestamp;
            case 3:
                return responseCode;
            case 4:
                return responseDescription;
            case 5:
                return referenceNumber;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 6;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "PaidDocumentList";
                break;
            case 1:
                info.type = Double.class;
                info.name = "UpdatedBalance";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Timestamp";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ResponseCode";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ResponseDescription";
                break;
            case 5:
                info.type = Long.class;
                info.name = "ReferenceNumber";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
