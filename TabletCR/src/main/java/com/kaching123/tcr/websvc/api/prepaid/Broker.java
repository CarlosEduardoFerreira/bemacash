package com.kaching123.tcr.websvc.api.prepaid;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 3/4/2014 8:12:58 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import android.os.AsyncTask;

import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.MarshalFloat;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import java.util.ArrayList;
import java.util.List;

public class Broker {

    public static final String TRANSACTION_MODE_TEST = "T";
    public static final String TRANSACTION_MODE_LIVE = "L";
    
    public String NAMESPACE = "http://services.bstonecorp.com/TransactionBroker/Broker";
    public String url = "https://services.bstonecorp.com/TransactionBroker/Broker.asmx";
    public int timeOut = 45000;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;

    private static ArrayList headers = new ArrayList<HeaderProperty>();
    static {
        headers.add(new HeaderProperty("Connection", "close"));
    }
    
    public Broker(){}
    
    public Broker(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public Broker(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public Broker(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public Broker setUrl(String url){
        this.url = url + "/TransactionBroker/Broker.asmx";
        return this;
    }

    public void GetMerchantFlagsAsync(String mID,String tID,String password,long transactionId,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetMerchantFlagsAsync(mID, tID, password, transactionId, signatureValue, null);
    }

    public void GetMerchantFlagsAsync(final String mID,final String tID,final String password,final long transactionId,final String signatureValue,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, MerchantFlagsResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected MerchantFlagsResponse doInBackground(Void... params) {
                return GetMerchantFlags(mID, tID, password, transactionId, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(MerchantFlagsResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetMerchantFlags", result);
                }
            }
        }.execute();
    }

    public MerchantFlagsResponse GetMerchantFlags(String mID,String tID,String password,long transactionId,String signatureValue){
        return GetMerchantFlags(mID, tID, password, transactionId, signatureValue, null);
    }

    public MerchantFlagsResponse GetMerchantFlags(String mID,String tID,String password,long transactionId,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","GetMerchantFlags");
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("TransactionId",transactionId);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetMerchantFlags", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetMerchantFlags", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    MerchantFlagsResponse resultVariable =  new MerchantFlagsResponse (j);
                    return resultVariable;

                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    public void GetIVULotoDataAsync(String mID,String tID,String password,long transactionId,String signatureValue,Receipt receipt) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetIVULotoDataAsync(mID, tID, password, transactionId, signatureValue, receipt, null);
    }

    public void GetIVULotoDataAsync(final String mID,final String tID,final String password,final long transactionId,final String signatureValue,final Receipt receipt,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, IVULotoDataResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected IVULotoDataResponse doInBackground(Void... params) {
                return GetIVULotoData(mID, tID, password, transactionId, signatureValue, receipt, headers);
            }
            @Override
            protected void onPostExecute(IVULotoDataResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetIVULotoData", result);
                }
            }
        }.execute();
    }

    public IVULotoDataResponse GetIVULotoData(String mID,String tID,String password,long transactionId,String signatureValue,Receipt receipt){
        return GetIVULotoData(mID, tID, password, transactionId, signatureValue, receipt, null);
    }

    public IVULotoDataResponse GetIVULotoData(String mID,String tID,String password,long transactionId,String signatureValue,Receipt receipt,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","GetIVULotoData");
        soapEnvelope.addMapping("http://services.bstonecorp.com/TransactionBroker/Broker","receipt",new Receipt().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);

        Receipt receiptRequest = new Receipt();

        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("TransactionId",transactionId);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapReq.addProperty("receipt",receipt);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetIVULotoData", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetIVULotoData", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    IVULotoDataResponse resultVariable =  new IVULotoDataResponse (j);
                    return resultVariable;

                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    public void GetSinglePINAsync(String mID,String tID,String password,String cashier,String productMaincode,double productDenomination,long orderID,int profileID,String transactionMode,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetSinglePINAsync(mID, tID, password, cashier, productMaincode, productDenomination, orderID, profileID, transactionMode, signatureValue, headers);
    }
    
    public void GetSinglePINAsync(final String mID,final String tID,final String password,final String cashier,final String productMaincode,final double productDenomination,final long orderID,final int profileID,final String transactionMode,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, PIN>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected PIN doInBackground(Void... params) {
                return GetSinglePIN(mID, tID, password, cashier, productMaincode, productDenomination, orderID, profileID, transactionMode, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(PIN result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetSinglePIN", result);
                }
            }
        }.execute();
    }
    
    public PIN GetSinglePIN(String mID,String tID,String password,String cashier,String productMaincode,
                                  double productDenomination,long orderID,int profileID,String transactionMode,String signatureValue){
        return GetSinglePIN(mID, tID, password, cashier, productMaincode, productDenomination, orderID, profileID, transactionMode, signatureValue, headers);
    }
    
    public PIN GetSinglePIN(String mID,String tID,String password,String cashier,String productMaincode,double productDenomination,long orderID,int profileID,String transactionMode,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","GetSinglePIN");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("Cashier",cashier);
        soapReq.addProperty("ProductMaincode",productMaincode);
        soapReq.addProperty("ProductDenomination",productDenomination);
        soapReq.addProperty("OrderID",orderID);
        soapReq.addProperty("ProfileID",profileID);
        soapReq.addProperty("TransactionMode",transactionMode);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetSinglePIN", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetSinglePIN", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    PIN resultVariable = new PIN(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetMultiplePINAsync(String mID,String tID,String password,String cashier,String productMaincode,double productDenomination,int qtyPINs,long orderID,int profileID,String transactionMode,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetMultiplePINAsync(mID, tID, password, cashier, productMaincode, productDenomination, qtyPINs, orderID, profileID, transactionMode, signatureValue, headers);
    }
    
    public void GetMultiplePINAsync(final String mID,final String tID,final String password,final String cashier,final String productMaincode,final double productDenomination,final int qtyPINs,final long orderID,final int profileID,final String transactionMode,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorPIN>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorPIN doInBackground(Void... params) {
                return GetMultiplePIN(mID, tID, password, cashier, productMaincode, productDenomination, qtyPINs, orderID, profileID, transactionMode, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(VectorPIN result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetMultiplePIN", result);
                }
            }
        }.execute();
    }
    
    public VectorPIN GetMultiplePIN(String mID,String tID,String password,String cashier,String productMaincode,double productDenomination,int qtyPINs,long orderID,int profileID,String transactionMode,String signatureValue){
        return GetMultiplePIN(mID, tID, password, cashier, productMaincode, productDenomination, qtyPINs, orderID, profileID, transactionMode, signatureValue, headers);
    }
    
    public VectorPIN GetMultiplePIN(String mID,String tID,String password,String cashier,String productMaincode,double productDenomination,int qtyPINs,long orderID,int profileID,String transactionMode,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","GetMultiplePIN");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("Cashier",cashier);
        soapReq.addProperty("ProductMaincode",productMaincode);
        soapReq.addProperty("ProductDenomination",productDenomination);
        soapReq.addProperty("QtyPINs",qtyPINs);
        soapReq.addProperty("OrderID",orderID);
        soapReq.addProperty("ProfileID",profileID);
        soapReq.addProperty("TransactionMode",transactionMode);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetMultiplePIN", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetMultiplePIN", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorPIN resultVariable = new VectorPIN(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetMultiplePINLiteAsync(String mID,String tID,String password,String cashier,String productMaincode,double productDenomination,int qtyPINs,long orderID,int profileID,String transactionMode,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetMultiplePINLiteAsync(mID, tID, password, cashier, productMaincode, productDenomination, qtyPINs, orderID, profileID, transactionMode, signatureValue, headers);
    }
    
    public void GetMultiplePINLiteAsync(final String mID,final String tID,final String password,final String cashier,final String productMaincode,final double productDenomination,final int qtyPINs,final long orderID,final int profileID,final String transactionMode,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorPIN>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorPIN doInBackground(Void... params) {
                return GetMultiplePINLite(mID, tID, password, cashier, productMaincode, productDenomination, qtyPINs, orderID, profileID, transactionMode, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(VectorPIN result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetMultiplePINLite", result);
                }
            }
        }.execute();
    }
    
    public VectorPIN GetMultiplePINLite(String mID,String tID,String password,String cashier,String productMaincode,double productDenomination,int qtyPINs,long orderID,int profileID,String transactionMode,String signatureValue){
        return GetMultiplePINLite(mID, tID, password, cashier, productMaincode, productDenomination, qtyPINs, orderID, profileID, transactionMode, signatureValue, headers);
    }
    
    public VectorPIN GetMultiplePINLite(String mID,String tID,String password,String cashier,String productMaincode,double productDenomination,int qtyPINs,long orderID,int profileID,String transactionMode,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","GetMultiplePINLite");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("Cashier",cashier);
        soapReq.addProperty("ProductMaincode",productMaincode);
        soapReq.addProperty("ProductDenomination",productDenomination);
        soapReq.addProperty("QtyPINs",qtyPINs);
        soapReq.addProperty("OrderID",orderID);
        soapReq.addProperty("ProfileID",profileID);
        soapReq.addProperty("TransactionMode",transactionMode);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetMultiplePINLite", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetMultiplePINLite", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorPIN resultVariable = new VectorPIN(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void VoidOrderAsync(String mID,String tID,String password,String cashier,long orderID,String transactionMode,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        VoidOrderAsync(mID, tID, password, cashier, orderID, transactionMode, signatureValue, headers);
    }
    
    public void VoidOrderAsync(final String mID,final String tID,final String password,final String cashier,final long orderID,final String transactionMode,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, PIN>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected PIN doInBackground(Void... params) {
                return VoidOrder(mID, tID, password, cashier, orderID, transactionMode, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(PIN result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("VoidOrder", result);
                }
            }
        }.execute();
    }
    
    public PIN VoidOrder(String mID,String tID,String password,String cashier,long orderID,String transactionMode,String signatureValue){
        return VoidOrder(mID, tID, password, cashier, orderID, transactionMode, signatureValue, headers);
    }
    
    public PIN VoidOrder(String mID,String tID,String password,String cashier,long orderID,String transactionMode,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","VoidOrder");
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("Cashier",cashier);
        soapReq.addProperty("OrderID",orderID);
        soapReq.addProperty("TransactionMode",transactionMode);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/VoidOrder", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/VoidOrder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    PIN resultVariable =  new PIN (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void DoTopUpAsync(String mID,String tID,String password,String cashier,String productMaincode,double topUpAmount,String phoneNumber,String countryCode,long orderID,int profileID,String transactionMode,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DoTopUpAsync(mID, tID, password, cashier, productMaincode, topUpAmount, phoneNumber, countryCode, orderID, profileID, transactionMode, signatureValue, headers);
    }
    
    public void DoTopUpAsync(final String mID,final String tID,final String password,final String cashier,final String productMaincode,final double topUpAmount,final String phoneNumber,final String countryCode,final long orderID,final int profileID,final String transactionMode,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, PIN>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected PIN doInBackground(Void... params) {
                return DoTopUp(mID, tID, password, cashier, productMaincode, topUpAmount, phoneNumber, countryCode, orderID, profileID, transactionMode, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(PIN result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DoTopUp", result);
                }
            }
        }.execute();
    }
    
    public PIN DoTopUp(String mID,String tID,String password,String cashier,String productMaincode,double topUpAmount,String phoneNumber,String countryCode,long orderID,int profileID,String transactionMode,String signatureValue){
        return DoTopUp(mID, tID, password, cashier, productMaincode, topUpAmount, phoneNumber, countryCode, orderID, profileID, transactionMode, signatureValue, headers);
    }
    
    public PIN DoTopUp(String mID,String tID,String password,String cashier,String productMaincode,double topUpAmount,String phoneNumber,String countryCode,long orderID,int profileID,String transactionMode,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","DoTopUp");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("Cashier",cashier);
        soapReq.addProperty("ProductMaincode",productMaincode);
        soapReq.addProperty("TopUpAmount",topUpAmount);
        soapReq.addProperty("PhoneNumber",phoneNumber);
        soapReq.addProperty("CountryCode",countryCode);
        soapReq.addProperty("OrderID",orderID);
        soapReq.addProperty("ProfileID",profileID);
        soapReq.addProperty("TransactionMode",transactionMode);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/DoTopUp", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/DoTopUp", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    PIN resultVariable =  new PIN (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void DoTopUpFeeAsync(String mID,String tID,String password,String cashier,String productMaincode,double topUpAmount,String phoneNumber,String countryCode,long orderID,int profileID,String transactionMode,double transactionFee,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DoTopUpFeeAsync(mID, tID, password, cashier, productMaincode, topUpAmount, phoneNumber, countryCode, orderID, profileID, transactionMode, transactionFee, signatureValue, headers);
    }
    
    public void DoTopUpFeeAsync(final String mID,final String tID,final String password,final String cashier,final String productMaincode,final double topUpAmount,final String phoneNumber,final String countryCode,final long orderID,final int profileID,final String transactionMode,final double transactionFee,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, PIN>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected PIN doInBackground(Void... params) {
                return DoTopUpFee(mID, tID, password, cashier, productMaincode, topUpAmount, phoneNumber, countryCode, orderID, profileID, transactionMode, transactionFee, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(PIN result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DoTopUpFee", result);
                }
            }
        }.execute();
    }
    
    public PIN DoTopUpFee(String mID,String tID,String password,String cashier,String productMaincode,double topUpAmount,String phoneNumber,String countryCode,long orderID,int profileID,String transactionMode,double transactionFee,String signatureValue){
        return DoTopUpFee(mID, tID, password, cashier, productMaincode, topUpAmount, phoneNumber, countryCode, orderID, profileID, transactionMode, transactionFee, signatureValue, headers);
    }
    
    public PIN DoTopUpFee(String mID,String tID,String password,String cashier,String productMaincode,double topUpAmount,String phoneNumber,String countryCode,long orderID,int profileID,String transactionMode,double transactionFee,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","DoTopUpFee");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("Cashier",cashier);
        soapReq.addProperty("ProductMaincode",productMaincode);
        soapReq.addProperty("TopUpAmount",topUpAmount);
        soapReq.addProperty("PhoneNumber",phoneNumber);
        soapReq.addProperty("CountryCode",countryCode);
        soapReq.addProperty("OrderID",orderID);
        soapReq.addProperty("ProfileID",profileID);
        soapReq.addProperty("TransactionMode",transactionMode);
        soapReq.addProperty("TransactionFee",transactionFee);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/DoTopUpFee", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/DoTopUpFee", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    PIN resultVariable =  new PIN (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void DoDailyReconciliationAsync(String mID,String tID,String password,String cashier,String batchDate,boolean detailedResponse,long transactionId,String transactionMode,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DoDailyReconciliationAsync(mID, tID, password, cashier, batchDate, detailedResponse, transactionId, transactionMode, signatureValue, headers);
    }
    
    public void DoDailyReconciliationAsync(final String mID,final String tID,final String password,final String cashier,final String batchDate,final boolean detailedResponse,final long transactionId,final String transactionMode,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, BillPaymentReconciliationResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected BillPaymentReconciliationResponse doInBackground(Void... params) {
                return DoDailyReconciliation(mID, tID, password, cashier, batchDate, detailedResponse, transactionId, transactionMode, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(BillPaymentReconciliationResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DoDailyReconciliation", result);
                }
            }
        }.execute();
    }
    
    public BillPaymentReconciliationResponse DoDailyReconciliation(String mID,String tID,String password,String cashier,String batchDate,boolean detailedResponse,long transactionId,String transactionMode,String signatureValue){
        return DoDailyReconciliation(mID, tID, password, cashier, batchDate, detailedResponse, transactionId, transactionMode, signatureValue, headers);
    }
    
    public BillPaymentReconciliationResponse DoDailyReconciliation(String mID,String tID,String password,String cashier,String batchDate,boolean detailedResponse,long transactionId,String transactionMode,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","DoDailyReconciliation");
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("Cashier",cashier);
        soapReq.addProperty("batchDate",batchDate);
        soapReq.addProperty("detailedResponse",detailedResponse);
        soapReq.addProperty("transactionId",transactionId);
        soapReq.addProperty("TransactionMode",transactionMode);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/DoDailyReconciliation", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/DoDailyReconciliation", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    BillPaymentReconciliationResponse resultVariable =  new BillPaymentReconciliationResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void DoBillPresentmentAsync(String mID,String tID,String password,String cashier,String vendorId,String accountNumber,String altAccountNumber,String additAccountNumber1,String additAccountNumber2,double paymentAmount,double feeAmount,String customerFirstName,String customerLastName,String paymentType,String senderFirstName,String senderLastName,long transactionId,String transactionMode,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DoBillPresentmentAsync(mID, tID, password, cashier, vendorId, accountNumber, altAccountNumber, additAccountNumber1, additAccountNumber2, paymentAmount, feeAmount, customerFirstName, customerLastName, paymentType, senderFirstName, senderLastName, transactionId, transactionMode, signatureValue, headers);
    }
    
    public void DoBillPresentmentAsync(final String mID,final String tID,final String password,final String cashier,final String vendorId,final String accountNumber,final String altAccountNumber,final String additAccountNumber1,final String additAccountNumber2,final double paymentAmount,final double feeAmount,final String customerFirstName,final String customerLastName,final String paymentType,final String senderFirstName,final String senderLastName,final long transactionId,final String transactionMode,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, BillPaymentResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected BillPaymentResponse doInBackground(Void... params) {
                return DoBillPresentment(mID, tID, password, cashier, vendorId, accountNumber, altAccountNumber, additAccountNumber1, additAccountNumber2, paymentAmount, feeAmount, customerFirstName, customerLastName, paymentType, senderFirstName, senderLastName, transactionId, transactionMode, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(BillPaymentResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DoBillPresentment", result);
                }
            }
        }.execute();
    }
    
    public BillPaymentResponse DoBillPresentment(String mID,String tID,String password,String cashier,String vendorId,String accountNumber,String altAccountNumber,String additAccountNumber1,String additAccountNumber2,double paymentAmount,double feeAmount,String customerFirstName,String customerLastName,String paymentType,String senderFirstName,String senderLastName,long transactionId,String transactionMode,String signatureValue){
        return DoBillPresentment(mID, tID, password, cashier, vendorId, accountNumber, altAccountNumber, additAccountNumber1, additAccountNumber2, paymentAmount, feeAmount, customerFirstName, customerLastName, paymentType, senderFirstName, senderLastName, transactionId, transactionMode, signatureValue, headers);
    }
    
    public BillPaymentResponse DoBillPresentment(String mID,String tID,String password,String cashier,String vendorId,String accountNumber,String altAccountNumber,String additAccountNumber1,String additAccountNumber2,double paymentAmount,double feeAmount,String customerFirstName,String customerLastName,String paymentType,String senderFirstName,String senderLastName,long transactionId,String transactionMode,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","DoBillPresentment");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("Cashier",cashier);
        soapReq.addProperty("vendorId",vendorId);
        soapReq.addProperty("accountNumber",accountNumber);
        soapReq.addProperty("altAccountNumber",altAccountNumber);
        soapReq.addProperty("additAccountNumber1",additAccountNumber1);
        soapReq.addProperty("additAccountNumber2",additAccountNumber2);
        soapReq.addProperty("paymentAmount",paymentAmount);
        soapReq.addProperty("feeAmount",feeAmount);
        soapReq.addProperty("customerFirstName",customerFirstName);
        soapReq.addProperty("customerLastName",customerLastName);
        soapReq.addProperty("paymentType",paymentType);
        soapReq.addProperty("senderFirstName",senderFirstName);
        soapReq.addProperty("senderLastName",senderLastName);
        soapReq.addProperty("transactionId",transactionId);
        soapReq.addProperty("TransactionMode",transactionMode);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/DoBillPresentment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/DoBillPresentment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    BillPaymentResponse resultVariable =  new BillPaymentResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void DoBillPaymentAsync(String mID,String tID,String password,String cashier,String vendorId,String accountNumber,String altAccountNumber,String additAccountNumber1,String additAccountNumber2,double paymentAmount,double feeAmount,String customerFirstName,String customerLastName,String paymentType,String senderFirstName,String senderLastName,long transactionId,String transactionMode,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DoBillPaymentAsync(mID, tID, password, cashier, vendorId, accountNumber, altAccountNumber, additAccountNumber1, additAccountNumber2, paymentAmount, feeAmount, customerFirstName, customerLastName, paymentType, senderFirstName, senderLastName, transactionId, transactionMode, signatureValue, headers);
    }
    
    public void DoBillPaymentAsync(final String mID,final String tID,final String password,final String cashier,final String vendorId,final String accountNumber,final String altAccountNumber,final String additAccountNumber1,final String additAccountNumber2,final double paymentAmount,final double feeAmount,final String customerFirstName,final String customerLastName,final String paymentType,final String senderFirstName,final String senderLastName,final long transactionId,final String transactionMode,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, BillPaymentResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected BillPaymentResponse doInBackground(Void... params) {
                return DoBillPayment(mID, tID, password, cashier, vendorId, accountNumber, altAccountNumber, additAccountNumber1, additAccountNumber2, paymentAmount, feeAmount, customerFirstName, customerLastName, paymentType, senderFirstName, senderLastName, transactionId, transactionMode, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(BillPaymentResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DoBillPayment", result);
                }
            }
        }.execute();
    }
    
    public BillPaymentResponse DoBillPayment(String mID,String tID,String password,String cashier,String vendorId,String accountNumber,String altAccountNumber,String additAccountNumber1,String additAccountNumber2,double paymentAmount,double feeAmount,String customerFirstName,String customerLastName,String paymentType,String senderFirstName,String senderLastName,long transactionId,String transactionMode,String signatureValue){
        return DoBillPayment(mID, tID, password, cashier, vendorId, accountNumber, altAccountNumber, additAccountNumber1, additAccountNumber2, paymentAmount, feeAmount, customerFirstName, customerLastName, paymentType, senderFirstName, senderLastName, transactionId, transactionMode, signatureValue, headers);
    }
    
    public BillPaymentResponse DoBillPayment(String mID,String tID,String password,String cashier,String vendorId,String accountNumber,String altAccountNumber,String additAccountNumber1,String additAccountNumber2,double paymentAmount,double feeAmount,String customerFirstName,String customerLastName,String paymentType,String senderFirstName,String senderLastName,long transactionId,String transactionMode,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","DoBillPayment");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("Cashier",cashier);
        soapReq.addProperty("vendorId",vendorId);
        soapReq.addProperty("accountNumber",accountNumber);
        soapReq.addProperty("altAccountNumber",altAccountNumber);
        soapReq.addProperty("additAccountNumber1",additAccountNumber1);
        soapReq.addProperty("additAccountNumber2",additAccountNumber2);
        soapReq.addProperty("paymentAmount",paymentAmount);
        soapReq.addProperty("feeAmount",feeAmount);
        soapReq.addProperty("customerFirstName",customerFirstName);
        soapReq.addProperty("customerLastName",customerLastName);
        soapReq.addProperty("paymentType",paymentType);
        soapReq.addProperty("senderFirstName",senderFirstName);
        soapReq.addProperty("senderLastName",senderLastName);
        soapReq.addProperty("transactionId",transactionId);
        soapReq.addProperty("TransactionMode",transactionMode);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/DoBillPayment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/DoBillPayment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    BillPaymentResponse resultVariable =  new BillPaymentResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetBillerCategoriesAsync(String mID,String tID,String password,String cashier,long transactionId,String transactionMode,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetBillerCategoriesAsync(mID, tID, password, cashier, transactionId, transactionMode, signatureValue, headers);
    }
    
    public void GetBillerCategoriesAsync(final String mID,final String tID,final String password,final String cashier,final long transactionId,final String transactionMode,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, BillerCategoriesResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected BillerCategoriesResponse doInBackground(Void... params) {
                return GetBillerCategories(mID, tID, password, cashier, transactionId, transactionMode, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(BillerCategoriesResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetBillerCategories", result);
                }
            }
        }.execute();
    }
    
    public BillerCategoriesResponse GetBillerCategories(String mID,String tID,String password,String cashier,long transactionId,String transactionMode,String signatureValue){
        return GetBillerCategories(mID, tID, password, cashier, transactionId, transactionMode, signatureValue, headers);
    }
    
    public BillerCategoriesResponse GetBillerCategories(String mID,String tID,String password,String cashier,long transactionId,String transactionMode,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","GetBillerCategories");
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("Cashier",cashier);
        soapReq.addProperty("transactionId",transactionId);
        soapReq.addProperty("TransactionMode",transactionMode);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetBillerCategories", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetBillerCategories", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    BillerCategoriesResponse resultVariable =  new BillerCategoriesResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetMasterBillersByCategoryAsync(String mID,String tID,String password,String cashier,String categoryId,long transactionId,String transactionMode,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetMasterBillersByCategoryAsync(mID, tID, password, cashier, categoryId, transactionId, transactionMode, signatureValue, headers);
    }
    
    public void GetMasterBillersByCategoryAsync(final String mID,final String tID,final String password,final String cashier,final String categoryId,final long transactionId,final String transactionMode,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, MasterBillersByCategoryResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected MasterBillersByCategoryResponse doInBackground(Void... params) {
                return GetMasterBillersByCategory(mID, tID, password, cashier, categoryId, transactionId, transactionMode, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(MasterBillersByCategoryResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetMasterBillersByCategory", result);
                }
            }
        }.execute();
    }
    
    public MasterBillersByCategoryResponse GetMasterBillersByCategory(String mID,String tID,String password,String cashier,String categoryId,long transactionId,String transactionMode,String signatureValue){
        return GetMasterBillersByCategory(mID, tID, password, cashier, categoryId, transactionId, transactionMode, signatureValue, headers);
    }
    
    public MasterBillersByCategoryResponse GetMasterBillersByCategory(String mID,String tID,String password,String cashier,String categoryId,long transactionId,String transactionMode,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","GetMasterBillersByCategory");
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("Cashier",cashier);
        soapReq.addProperty("CategoryId",categoryId);
        soapReq.addProperty("transactionId",transactionId);
        soapReq.addProperty("TransactionMode",transactionMode);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetMasterBillersByCategory", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetMasterBillersByCategory", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    MasterBillersByCategoryResponse resultVariable =  new MasterBillersByCategoryResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetMasterBillerPaymentOptionsAsync(String mID,String tID,String password,String cashier,String masterBillerId,long transactionId,String transactionMode,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetMasterBillerPaymentOptionsAsync(mID, tID, password, cashier, masterBillerId, transactionId, transactionMode, signatureValue, headers);
    }
    
    public void GetMasterBillerPaymentOptionsAsync(final String mID,final String tID,final String password,final String cashier,final String masterBillerId,final long transactionId,final String transactionMode,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, MasterBillerPaymentOptionsResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected MasterBillerPaymentOptionsResponse doInBackground(Void... params) {
                return GetMasterBillerPaymentOptions(mID, tID, password, cashier, masterBillerId, transactionId, transactionMode, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(MasterBillerPaymentOptionsResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetMasterBillerPaymentOptions", result);
                }
            }
        }.execute();
    }
    
    public MasterBillerPaymentOptionsResponse GetMasterBillerPaymentOptions(String mID,String tID,String password,String cashier,String masterBillerId,long transactionId,String transactionMode,String signatureValue){
        return GetMasterBillerPaymentOptions(mID, tID, password, cashier, masterBillerId, transactionId, transactionMode, signatureValue, headers);
    }
    
    public MasterBillerPaymentOptionsResponse GetMasterBillerPaymentOptions(String mID,String tID,String password,String cashier,String masterBillerId,long transactionId,String transactionMode,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","GetMasterBillerPaymentOptions");
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("Cashier",cashier);
        soapReq.addProperty("MasterBillerId",masterBillerId);
        soapReq.addProperty("transactionId",transactionId);
        soapReq.addProperty("TransactionMode",transactionMode);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetMasterBillerPaymentOptions", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetMasterBillerPaymentOptions", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    MasterBillerPaymentOptionsResponse resultVariable =  new MasterBillerPaymentOptionsResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetSunPassBalanceAsync(String mID,String tID,String password,String cashier,String accountNumber,String transactionMode,long transactionId,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetSunPassBalanceAsync(mID, tID, password, cashier, accountNumber, transactionMode, transactionId, signatureValue, headers);
    }
    
    public void GetSunPassBalanceAsync(final String mID,final String tID,final String password,final String cashier,final String accountNumber,final String transactionMode,final long transactionId,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, BalanceResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected BalanceResponse doInBackground(Void... params) {
                return GetSunPassBalance(mID, tID, password, cashier, accountNumber, transactionMode, transactionId, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(BalanceResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetSunPassBalance", result);
                }
            }
        }.execute();
    }
    
    public BalanceResponse GetSunPassBalance(String mID,String tID,String password,String cashier,String accountNumber,String transactionMode,long transactionId,String signatureValue){
        return GetSunPassBalance(mID, tID, password, cashier, accountNumber, transactionMode, transactionId, signatureValue, headers);
    }
    
    public BalanceResponse GetSunPassBalance(String mID,String tID,String password,String cashier,String accountNumber,String transactionMode,long transactionId,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","GetSunPassBalance");
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("password",password);
        soapReq.addProperty("cashier",cashier);
        soapReq.addProperty("accountNumber",accountNumber);
        soapReq.addProperty("transactionMode",transactionMode);
        soapReq.addProperty("transactionId",transactionId);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetSunPassBalance", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetSunPassBalance", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    BalanceResponse resultVariable =  new BalanceResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void DoSunPassReplenishmentAsync(String mID,String tID,String password,String cashier,long transactionId,String accountNumber,double amount,double feeAmount,String purchaseId,String transactionMode,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DoSunPassReplenishmentAsync(mID, tID, password, cashier, transactionId, accountNumber, amount, feeAmount, purchaseId, transactionMode, signatureValue, headers);
    }
    
    public void DoSunPassReplenishmentAsync(final String mID,final String tID,final String password,final String cashier,final long transactionId,final String accountNumber,final double amount,final double feeAmount,final String purchaseId,final String transactionMode,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ReplenishmentResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ReplenishmentResponse doInBackground(Void... params) {
                return DoSunPassReplenishment(mID, tID, password, cashier, transactionId, accountNumber, amount, feeAmount, purchaseId, transactionMode, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(ReplenishmentResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DoSunPassReplenishment", result);
                }
            }
        }.execute();
    }
    
    public ReplenishmentResponse DoSunPassReplenishment(String mID,String tID,String password,String cashier,long transactionId,String accountNumber,double amount,double feeAmount,String purchaseId,String transactionMode,String signatureValue){
        return DoSunPassReplenishment(mID, tID, password, cashier, transactionId, accountNumber, amount, feeAmount, purchaseId, transactionMode, signatureValue, headers);
    }
    
    public ReplenishmentResponse DoSunPassReplenishment(String mID,String tID,String password,String cashier,long transactionId,String accountNumber,double amount,double feeAmount,String purchaseId,String transactionMode,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","DoSunPassReplenishment");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("password",password);
        soapReq.addProperty("cashier",cashier);
        soapReq.addProperty("transactionId",transactionId);
        soapReq.addProperty("accountNumber",accountNumber);
        soapReq.addProperty("amount",amount);
        soapReq.addProperty("feeAmount",feeAmount);
        soapReq.addProperty("purchaseId",purchaseId);
        soapReq.addProperty("transactionMode",transactionMode);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/DoSunPassReplenishment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/DoSunPassReplenishment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ReplenishmentResponse resultVariable =  new ReplenishmentResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void DoSunPassDocumentInquiryAsync(String mID,String tID,String password,String cashier,String accountNumber,String licensePlateNumber,String transactionMode,long transactionId,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DoSunPassDocumentInquiryAsync(mID, tID, password, cashier, accountNumber, licensePlateNumber, transactionMode, transactionId, signatureValue, headers);
    }
    
    public void DoSunPassDocumentInquiryAsync(final String mID,final String tID,final String password,final String cashier,final String accountNumber,final String licensePlateNumber,final String transactionMode,final long transactionId,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, DocumentInquiryResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected DocumentInquiryResponse doInBackground(Void... params) {
                return DoSunPassDocumentInquiry(mID, tID, password, cashier, accountNumber, licensePlateNumber, transactionMode, transactionId, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(DocumentInquiryResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DoSunPassDocumentInquiry", result);
                }
            }
        }.execute();
    }
    
    public DocumentInquiryResponse DoSunPassDocumentInquiry(String mID,String tID,String password,String cashier,String accountNumber,String licensePlateNumber,String transactionMode,long transactionId,String signatureValue){
        return DoSunPassDocumentInquiry(mID, tID, password, cashier, accountNumber, licensePlateNumber, transactionMode, transactionId, signatureValue, headers);
    }
    
    public DocumentInquiryResponse DoSunPassDocumentInquiry(String mID,String tID,String password,String cashier,String accountNumber,String licensePlateNumber,String transactionMode,long transactionId,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","DoSunPassDocumentInquiry");
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("password",password);
        soapReq.addProperty("cashier",cashier);
        soapReq.addProperty("accountNumber",accountNumber);
        soapReq.addProperty("licensePlateNumber",licensePlateNumber);
        soapReq.addProperty("transactionMode",transactionMode);
        soapReq.addProperty("transactionId",transactionId);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/DoSunPassDocumentInquiry", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/DoSunPassDocumentInquiry", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    DocumentInquiryResponse resultVariable =  new DocumentInquiryResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void DoSunPassDocumentPaymentAsync(String mID,String tID,String password,String cashier,long transactionId,String accountNumber,String licensePlateNumber,double amount,double feeAmount,String purchaseId,VectorDocument paidDocuments,String transactionMode,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DoSunPassDocumentPaymentAsync(mID, tID, password, cashier, transactionId, accountNumber, licensePlateNumber, amount, feeAmount, purchaseId, paidDocuments, transactionMode, signatureValue, headers);
    }
    
    public void DoSunPassDocumentPaymentAsync(final String mID,final String tID,final String password,final String cashier,final long transactionId,final String accountNumber,final String licensePlateNumber,final double amount,final double feeAmount,final String purchaseId,final VectorDocument paidDocuments,final String transactionMode,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, DocumentPaymentResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected DocumentPaymentResponse doInBackground(Void... params) {
                return DoSunPassDocumentPayment(mID, tID, password, cashier, transactionId, accountNumber, licensePlateNumber, amount, feeAmount, purchaseId, paidDocuments, transactionMode, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(DocumentPaymentResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DoSunPassDocumentPayment", result);
                }
            }
        }.execute();
    }
    
    public DocumentPaymentResponse DoSunPassDocumentPayment(String mID,String tID,String password,String cashier,long transactionId,String accountNumber,String licensePlateNumber,double amount,double feeAmount,String purchaseId,VectorDocument paidDocuments,String transactionMode,String signatureValue){
        return DoSunPassDocumentPayment(mID, tID, password, cashier, transactionId, accountNumber, licensePlateNumber, amount, feeAmount, purchaseId, paidDocuments, transactionMode, signatureValue, headers);
    }
    
    public DocumentPaymentResponse DoSunPassDocumentPayment(String mID,String tID,String password,String cashier,long transactionId,String accountNumber,String licensePlateNumber,double amount,double feeAmount,String purchaseId,VectorDocument paidDocuments,String transactionMode,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker", "DoSunPassDocumentPayment");
        MarshalFloat marshalFloat = new MarshalFloat();
        SoapObject paidDocumentsSO = new SoapObject("", "paidDocuments");
        for (Document d : paidDocuments) {
            SoapObject documentSO = new SoapObject("", "Document");
            PropertyInfo paidDocumentIdPropertyInfo = new PropertyInfo();
            paidDocumentIdPropertyInfo.setName("DocumentId");
            paidDocumentIdPropertyInfo.setNamespace("http://tempuri.org/");
            paidDocumentIdPropertyInfo.setValue(d.documentId);
            documentSO.addProperty(paidDocumentIdPropertyInfo);

            PropertyInfo paidDocumentPaymentAmountPropertyInfo = new PropertyInfo();
            paidDocumentPaymentAmountPropertyInfo.setName("DocumentPaymentAmount");
            paidDocumentPaymentAmountPropertyInfo.setNamespace("http://tempuri.org/");
            paidDocumentPaymentAmountPropertyInfo.setValue(d.documentPaymentAmount);
            documentSO.addProperty(paidDocumentPaymentAmountPropertyInfo);

            paidDocumentsSO.addSoapObject(documentSO);
        }

        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("MID", mID);
        soapReq.addProperty("TID", tID);
        soapReq.addProperty("password", password);
        soapReq.addProperty("cashier", cashier);
        soapReq.addProperty("transactionId", transactionId);
        soapReq.addProperty("accountNumber", accountNumber);
        soapReq.addProperty("licensePlateNumber", licensePlateNumber);
        soapReq.addProperty("amount", amount);
        soapReq.addProperty("feeAmount", feeAmount);
        soapReq.addProperty("purchaseId", purchaseId);
        soapReq.addSoapObject(paidDocumentsSO);
        soapReq.addProperty("transactionMode", transactionMode);
        soapReq.addProperty("SignatureValue", signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/DoSunPassDocumentPayment", soapEnvelope, headers);
            } else {
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/DoSunPassDocumentPayment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    DocumentPaymentResponse resultVariable = new DocumentPaymentResponse(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetProductListAsync(String mID,String tID,String password,long transactionId,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetProductListAsync(mID, tID, password, transactionId, signatureValue, headers);
    }
    
    public void GetProductListAsync(final String mID,final String tID,final String password,final long transactionId,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ProductListResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ProductListResponse doInBackground(Void... params) {
                return GetProductList(mID, tID, password, transactionId, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(ProductListResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetProductList", result);
                }
            }
        }.execute();
    }
    
    public ProductListResponse
    GetProductList(String mID,String tID,String password,long transactionId,String signatureValue){
        return GetProductList(mID, tID, password, transactionId, signatureValue, headers);
    }
    
    public ProductListResponse GetProductList(String mID,String tID,String password,long transactionId,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","GetProductList");
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("TransactionId",transactionId);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetProductList", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetProductList", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ProductListResponse resultVariable =  new ProductListResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetProductListVersionNumberAsync(String mID,String tID,String password,long transactionId,String signatureValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetProductListVersionNumberAsync(mID, tID, password, transactionId, signatureValue, headers);
    }
    
    public void GetProductListVersionNumberAsync(final String mID,final String tID,final String password,final long transactionId,final String signatureValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ProductListVersionResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ProductListVersionResponse doInBackground(Void... params) {
                return GetProductListVersionNumber(mID, tID, password, transactionId, signatureValue, headers);
            }
            @Override
            protected void onPostExecute(ProductListVersionResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetProductListVersionNumber", result);
                }
            }
        }.execute();
    }
    
    public ProductListVersionResponse GetProductListVersionNumber(String mID,String tID,String password,long transactionId,String signatureValue){
        return GetProductListVersionNumber(mID, tID, password, transactionId, signatureValue, headers);
    }
    
    public ProductListVersionResponse GetProductListVersionNumber(String mID,String tID,String password,long transactionId,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","GetProductListVersionNumber");
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("TransactionId",transactionId);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetProductListVersionNumber", soapEnvelope,headers);
            } else {
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetProductListVersionNumber", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ProductListVersionResponse resultVariable =  new ProductListVersionResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    public ProductRatesResponse GetProductRates(String mID,String tID,String password,String productMainCode,long transactionId,String signatureValue){
        return GetProductRates(mID, tID, password, productMainCode, transactionId, signatureValue, null);
    }

    public ProductRatesResponse GetProductRates(String mID,String tID,String password,String productMainCode,long transactionId,String signatureValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://services.bstonecorp.com/TransactionBroker/Broker","GetProductRates");
        soapReq.addProperty("MID",mID);
        soapReq.addProperty("TID",tID);
        soapReq.addProperty("Password",password);
        soapReq.addProperty("ProductMainCode",productMainCode);
        soapReq.addProperty("TransactionId",transactionId);
        soapReq.addProperty("SignatureValue",signatureValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetProductRates", soapEnvelope,headers);
            }else{
                httpTransport.call("http://services.bstonecorp.com/TransactionBroker/Broker/GetProductRates", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ProductRatesResponse resultVariable =  new ProductRatesResponse (j);
                    return resultVariable;

                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
}
