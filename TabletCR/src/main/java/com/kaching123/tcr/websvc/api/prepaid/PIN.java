package com.kaching123.tcr.websvc.api.prepaid;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 3/4/2014 8:12:58 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.util.Hashtable;

public class PIN implements KvmSerializable, Serializable {
    
    public int errorCode;
    public String errorMessage;
    public String transactionID;
    public String pinID;
    public String productMainCode;
    public String productDenomination;
    public String pinNumber;
    public String controlNumber;
    public String language;
    public String productSBT;
    public String conn800English;
    public String customerServiceEnglish;
    public VectorAccessPhone localAccessPhones;
    public String itemFK;
    public String transactionMode;
    public String productDescription;
    public String batch;
    public String expirationDate;
    public String productType;
    public String barcode;
    public String instructions;
    public String printerDisclaimer;
    public String toppedUpNumber;
    public String accountNumber;
    public Legal legalInfo;
    public double foreignAmount;
    public double foreignMoneyLeft;
    public String referenceNumber;
    public String authorizationCode;
    
    public PIN(){}
    
    public PIN(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("ErrorCode"))
        {
            Object obj = soapObject.getProperty("ErrorCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                errorCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                errorCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ErrorMessage"))
        {
            Object obj = soapObject.getProperty("ErrorMessage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                errorMessage = j.toString();
            }else if (obj!= null && obj instanceof String){
                errorMessage = (String) obj;
            }
        }
        if (soapObject.hasProperty("TransactionID"))
        {
            Object obj = soapObject.getProperty("TransactionID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                transactionID = j.toString();
            }else if (obj!= null && obj instanceof String){
                transactionID = (String) obj;
            }
        }
        if (soapObject.hasProperty("PinID"))
        {
            Object obj = soapObject.getProperty("PinID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                pinID = j.toString();
            }else if (obj!= null && obj instanceof String){
                pinID = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductMainCode"))
        {
            Object obj = soapObject.getProperty("ProductMainCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                productMainCode = j.toString();
            }else if (obj!= null && obj instanceof String){
                productMainCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductDenomination"))
        {
            Object obj = soapObject.getProperty("ProductDenomination");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                productDenomination = j.toString();
            }else if (obj!= null && obj instanceof String){
                productDenomination = (String) obj;
            }
        }
        if (soapObject.hasProperty("PinNumber"))
        {
            Object obj = soapObject.getProperty("PinNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                pinNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                pinNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("ControlNumber"))
        {
            Object obj = soapObject.getProperty("ControlNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                controlNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                controlNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("Language"))
        {
            Object obj = soapObject.getProperty("Language");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                language = j.toString();
            }else if (obj!= null && obj instanceof String){
                language = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductSBT"))
        {
            Object obj = soapObject.getProperty("ProductSBT");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                productSBT = j.toString();
            }else if (obj!= null && obj instanceof String){
                productSBT = (String) obj;
            }
        }
        if (soapObject.hasProperty("Conn800English"))
        {
            Object obj = soapObject.getProperty("Conn800English");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                conn800English = j.toString();
            }else if (obj!= null && obj instanceof String){
                conn800English = (String) obj;
            }
        }
        if (soapObject.hasProperty("CustomerServiceEnglish"))
        {
            Object obj = soapObject.getProperty("CustomerServiceEnglish");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                customerServiceEnglish = j.toString();
            }else if (obj!= null && obj instanceof String){
                customerServiceEnglish = (String) obj;
            }
        }
        if (soapObject.hasProperty("LocalAccessPhones"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("LocalAccessPhones");
            localAccessPhones = new VectorAccessPhone(j);
        }
        if (soapObject.hasProperty("ItemFK"))
        {
            Object obj = soapObject.getProperty("ItemFK");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                itemFK = j.toString();
            }else if (obj!= null && obj instanceof String){
                itemFK = (String) obj;
            }
        }
        if (soapObject.hasProperty("TransactionMode"))
        {
            Object obj = soapObject.getProperty("TransactionMode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                transactionMode = j.toString();
            }else if (obj!= null && obj instanceof String){
                transactionMode = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductDescription"))
        {
            Object obj = soapObject.getProperty("ProductDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                productDescription = j.toString();
            }else if (obj!= null && obj instanceof String){
                productDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("Batch"))
        {
            Object obj = soapObject.getProperty("Batch");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                batch = j.toString();
            }else if (obj!= null && obj instanceof String){
                batch = (String) obj;
            }
        }
        if (soapObject.hasProperty("ExpirationDate"))
        {
            Object obj = soapObject.getProperty("ExpirationDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                expirationDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                expirationDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductType"))
        {
            Object obj = soapObject.getProperty("ProductType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                productType = j.toString();
            }else if (obj!= null && obj instanceof String){
                productType = (String) obj;
            }
        }
        if (soapObject.hasProperty("Barcode"))
        {
            Object obj = soapObject.getProperty("Barcode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                barcode = j.toString();
            }else if (obj!= null && obj instanceof String){
                barcode = (String) obj;
            }
        }
        if (soapObject.hasProperty("Instructions"))
        {
            Object obj = soapObject.getProperty("Instructions");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                instructions = j.toString();
            }else if (obj!= null && obj instanceof String){
                instructions = (String) obj;
            }
        }
        if (soapObject.hasProperty("PrinterDisclaimer"))
        {
            Object obj = soapObject.getProperty("PrinterDisclaimer");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                printerDisclaimer = j.toString();
            }else if (obj!= null && obj instanceof String){
                printerDisclaimer = (String) obj;
            }
        }
        if (soapObject.hasProperty("ToppedUpNumber"))
        {
            Object obj = soapObject.getProperty("ToppedUpNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                toppedUpNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                toppedUpNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("AccountNumber"))
        {
            Object obj = soapObject.getProperty("AccountNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                accountNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                accountNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("LegalInfo"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("LegalInfo");
            legalInfo =  new Legal (j);
            
        }
        if (soapObject.hasProperty("ForeignAmount"))
        {
            Object obj = soapObject.getProperty("ForeignAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                foreignAmount = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                foreignAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("ForeignMoneyLeft"))
        {
            Object obj = soapObject.getProperty("ForeignMoneyLeft");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                foreignMoneyLeft = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                foreignMoneyLeft = (Double) obj;
            }
        }
        if (soapObject.hasProperty("ReferenceNumber"))
        {
            Object obj = soapObject.getProperty("ReferenceNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                referenceNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                referenceNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("AuthorizationCode"))
        {
            Object obj = soapObject.getProperty("AuthorizationCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                authorizationCode = j.toString();
            }else if (obj!= null && obj instanceof String){
                authorizationCode = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return errorCode;
            case 1:
                return errorMessage;
            case 2:
                return transactionID;
            case 3:
                return pinID;
            case 4:
                return productMainCode;
            case 5:
                return productDenomination;
            case 6:
                return pinNumber;
            case 7:
                return controlNumber;
            case 8:
                return language;
            case 9:
                return productSBT;
            case 10:
                return conn800English;
            case 11:
                return customerServiceEnglish;
            case 12:
                return localAccessPhones;
            case 13:
                return itemFK;
            case 14:
                return transactionMode;
            case 15:
                return productDescription;
            case 16:
                return batch;
            case 17:
                return expirationDate;
            case 18:
                return productType;
            case 19:
                return barcode;
            case 20:
                return instructions;
            case 21:
                return printerDisclaimer;
            case 22:
                return toppedUpNumber;
            case 23:
                return accountNumber;
            case 24:
                return legalInfo;
            case 25:
                return foreignAmount;
            case 26:
                return foreignMoneyLeft;
            case 27:
                return referenceNumber;
            case 28:
                return authorizationCode;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 29;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ErrorCode";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ErrorMessage";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "TransactionID";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PinID";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductMainCode";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductDenomination";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PinNumber";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ControlNumber";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Language";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductSBT";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Conn800English";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CustomerServiceEnglish";
                break;
            case 12:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "LocalAccessPhones";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ItemFK";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "TransactionMode";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductDescription";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Batch";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ExpirationDate";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductType";
                break;
            case 19:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Barcode";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Instructions";
                break;
            case 21:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PrinterDisclaimer";
                break;
            case 22:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ToppedUpNumber";
                break;
            case 23:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "AccountNumber";
                break;
            case 24:
                info.type = Legal.class;
                info.name = "LegalInfo";
                break;
            case 25:
                info.type = Double.class;
                info.name = "ForeignAmount";
                break;
            case 26:
                info.type = Double.class;
                info.name = "ForeignMoneyLeft";
                break;
            case 27:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ReferenceNumber";
                break;
            case 28:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "AuthorizationCode";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
