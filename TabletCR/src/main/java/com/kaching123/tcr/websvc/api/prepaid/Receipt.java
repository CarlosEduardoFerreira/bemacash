package com.kaching123.tcr.websvc.api.prepaid;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 6/25/2015 9:58:58 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;

import java.io.Serializable;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import com.kaching123.tcr.websvc.api.prepaid.WS_Enums.SoapProtocolVersion.TypeOfTender;
import com.kaching123.tcr.websvc.api.prepaid.WS_Enums.SoapProtocolVersion.TransactionType;

public class Receipt implements KvmSerializable , Serializable {

    public String merchantId;
    public double municipalTax;
    public double stateTax;
    public double subTotal;
    public TypeOfTender tenderType;
    public String terminalId;
    public String terminalPassword;
    public double total;
    public String txDate;
    public TransactionType txType;

    public Receipt(){}

    public Receipt(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("merchantId"))
        {
            Object obj = soapObject.getProperty("merchantId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                merchantId = j.toString();
            }else if (obj!= null && obj instanceof String){
                merchantId = (String) obj;
            }
        }
        if (soapObject.hasProperty("municipalTax"))
        {
            Object obj = soapObject.getProperty("municipalTax");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                municipalTax = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                municipalTax = (Double) obj;
            }
        }
        if (soapObject.hasProperty("stateTax"))
        {
            Object obj = soapObject.getProperty("stateTax");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stateTax = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                stateTax = (Double) obj;
            }
        }
        if (soapObject.hasProperty("subTotal"))
        {
            Object obj = soapObject.getProperty("subTotal");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                subTotal = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                subTotal = (Double) obj;
            }
        }
        if (soapObject.hasProperty("tenderType"))
        {
            Object obj = soapObject.getProperty("tenderType");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive)obj;
                tenderType = TypeOfTender.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("terminalId"))
        {
            Object obj = soapObject.getProperty("terminalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                terminalId = j.toString();
            }else if (obj!= null && obj instanceof String){
                terminalId = (String) obj;
            }
        }
        if (soapObject.hasProperty("terminalPassword"))
        {
            Object obj = soapObject.getProperty("terminalPassword");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                terminalPassword = j.toString();
            }else if (obj!= null && obj instanceof String){
                terminalPassword = (String) obj;
            }
        }
        if (soapObject.hasProperty("total"))
        {
            Object obj = soapObject.getProperty("total");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                total = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                total = (Double) obj;
            }
        }
        if (soapObject.hasProperty("txDate"))
        {
            Object obj = soapObject.getProperty("txDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                txDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                txDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("txType"))
        {
            Object obj = soapObject.getProperty("txType");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive)obj;
                txType = TransactionType.fromString(j.toString());
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return merchantId;
            case 1:
                return municipalTax;
            case 2:
                return stateTax;
            case 3:
                return subTotal;
            case 4:
                return tenderType.toString();
            case 5:
                return terminalId;
            case 6:
                return terminalPassword;
            case 7:
                return total;
            case 8:
                return txDate;
            case 9:
                return txType.toString();
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 10;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "merchantId";
                break;
            case 1:
                info.type = Double.class;
                info.name = "municipalTax";
                break;
            case 2:
                info.type = Double.class;
                info.name = "stateTax";
                break;
            case 3:
                info.type = Double.class;
                info.name = "subTotal";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "tenderType";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "terminalId";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "terminalPassword";
                break;
            case 7:
                info.type = Double.class;
                info.name = "total";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "txDate";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "txType";
                break;
        }
    }

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
