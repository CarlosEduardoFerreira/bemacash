Index: TabletCR/src/main/java/com/kaching123/tcr/TcrApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/TcrApplication.java	(revision 7a972b2f16e690c26893e6204bfe909a08a48fa2)
+++ TabletCR/src/main/java/com/kaching123/tcr/TcrApplication.java	(revision )
@@ -12,6 +12,7 @@
 import com.google.gson.Gson;
 import org.androidannotations.annotations.Background;
 import org.androidannotations.annotations.EApplication;
+import com.kaching123.display.SerialPortScanner;
 import com.kaching123.tcr.commands.payment.PaymentGateway;
 import com.kaching123.tcr.commands.rest.RestCommand;
 import com.kaching123.tcr.commands.rest.RestCommand.PlainTextResponse;
@@ -43,6 +44,7 @@
 import org.apache.commons.codec.Charsets;
 
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.lang.reflect.Type;
 import java.math.BigDecimal;
@@ -104,6 +106,8 @@
     private RestAdapter restAdapter;
     private RestAdapter restAdapterJsonOrg;
 
+    private SerialPortScanner serialPortScanner;
+
     public String emailApiKey = "EvG5Cb8acZC4Dzm6b4a5GRdDBPk362";
 
     private static final ReentrantLock trainingModeLock = new ReentrantLock();
@@ -132,6 +136,7 @@
 
         lazyInstantiateShopPref();
         initPref();
+
     }
 
     public synchronized SyncOpenHelper getSyncOpenHelper() {
@@ -824,5 +829,25 @@
                 throw new ConversionException("Can't parse response: " + str, e);
             }
         }
+    }
+
+    public InputStream getScannerIS() {
+        serialPortScanner = new SerialPortScanner();
+
+        return serialPortScanner.getInputStreamReader();
+    }
+
+    public void closeSerialScanner() {
+        if (serialPortScanner != null) {
+            try {
+                serialPortScanner.close();
+                serialPortScanner = null;
+            } catch (IOException e) {
+                e.printStackTrace();
+                Logger.d("Tcrapplication closeSerialScanner faile: " + e.toString());
+                serialPortScanner = null;
+            }
+        }
+
     }
 }
Index: BemaDisplay/src/main/java/com/kaching123/display/SerialPortScanner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- BemaDisplay/src/main/java/com/kaching123/display/SerialPortScanner.java	(revision 7a972b2f16e690c26893e6204bfe909a08a48fa2)
+++ BemaDisplay/src/main/java/com/kaching123/display/SerialPortScanner.java	(revision )
@@ -44,7 +44,7 @@
     @Override
     public void close() throws IOException {
         if (mSerialPort != null) {
-            mOutputStream.close();
+            mSerialPort.close();
             mSerialPort = null;
         }
 
Index: TabletCR/src/main/java/com/kaching123/tcr/service/ScannerService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/service/ScannerService.java	(revision 7a972b2f16e690c26893e6204bfe909a08a48fa2)
+++ TabletCR/src/main/java/com/kaching123/tcr/service/ScannerService.java	(revision )
@@ -12,7 +12,6 @@
 import android.os.IBinder;
 import android.os.Message;
 
-import com.kaching123.display.SerialPortScanner;
 import com.kaching123.tcr.BuildConfig;
 import com.kaching123.tcr.Logger;
 import com.kaching123.tcr.TcrApplication;
@@ -37,14 +36,10 @@
 
     private static final int DISCONNECTED_WHAT = 0;
     private static final int BARCODE_RECEIVED_WHAT = 1;
-    private static final int TIME_DELAY = 2;
-    private static final int BARCODE_SENT_FROM_SERIAL = 3;
-
     private static final int RECONNECTIONS_COUNT = 2;
+    private final byte terminator = 0x0d;
+    private final int maxBarCodeSize = 128;
 
-    private int TWENTY_MILLISECONDS = 200;
-
-
     private ScannerBinder binder = new ScannerBinder();
 
     private ExecutorService executor;
@@ -55,14 +50,10 @@
 
     private volatile boolean shouldConnect;
 
-    private SerialPortScanner serialPortScanner;
-
     private AtomicBoolean isConnected = new AtomicBoolean();
 
     private AtomicBoolean sentBarcode = new AtomicBoolean();
 
-    private StringBuilder sbMain;
-
     public static void bind(Context context, ServiceConnection connection) {
         Intent intent = new Intent(context, ScannerService.class);
         context.bindService(intent, connection, Context.BIND_AUTO_CREATE);
@@ -76,7 +67,6 @@
     public void onCreate() {
         Logger.d("ScannerService: onCreate()");
         super.onCreate();
-        sbMain = new StringBuilder();
         if (isEmulate()) {
             Logger.d("ScannerService: onCreate(): emulating");
             return;
@@ -87,6 +77,14 @@
 
     }
 
+    private InputStream getInputStream() {
+        return getApp().getScannerIS();
+    }
+
+    private void closeSerialScanner() {
+        getApp().closeSerialScanner();
+    }
+
     @Override
     public void onDestroy() {
         Logger.d("ScannerService: onDestroy()");
@@ -132,8 +130,8 @@
 
                     Logger.d("ScannerService: OpenConnectionRunnable: trying to open connection: attempt " + (i + 1));
                     if (getApp().getShopPref().scannerName().getOr(null).equalsIgnoreCase(FindDeviceFragment.SEARIL_PORT_SCANNER_NAME)) {
-                        serialPortScanner = new SerialPortScanner();
-                        if (serialPortScanner != null)
+                        Logger.d("ScannerService: serialPortScanner create()" + ",thread: " + Thread.currentThread().getId());
+                        if (getInputStream() != null)
                             connectionOpened = true;
                         break;
                     } else {
@@ -158,7 +156,7 @@
                 boolean beRead;
 
                 if (getApp().getShopPref().scannerName().getOr(null).equalsIgnoreCase(FindDeviceFragment.SEARIL_PORT_SCANNER_NAME))
-                    beRead = read(serialPortScanner);
+                    beRead = readSerialPort();
                 else
                     beRead = read();
                 if (!beRead) {
@@ -205,14 +203,9 @@
                     } catch (IOException ignore) {
                     }
                 scannerSocket = null;
-                if (serialPortScanner != null)
-                    try {
-                        serialPortScanner.close();
-                    } catch (IOException ignore) {
+                if (getInputStream() != null)
+                    closeSerialScanner();
-                    }
+            }
-                serialPortScanner = null;
-                Logger.e("ScannerService: openConnection(): failed to create socket using uuid - fallback to port method", e);
-            }
 
             if (scannerSocket == null) {
                 scannerSocket = createRfcommSocket(scanner);
@@ -227,12 +220,8 @@
                     scannerSocket.close();
                 } catch (IOException ignore) {
                 }
-            if (serialPortScanner != null)
-                try {
-                    serialPortScanner.close();
-                } catch (IOException ignore) {
-                }
-            Logger.e("ScannerService: openConnection(): failed - connection failed!", e);
+            if (getInputStream() != null)
+                closeSerialScanner();
             return false;
         }
 
@@ -256,31 +245,10 @@
         }
     }
 
-    private boolean read(SerialPortScanner serialPortScanner) {
-        final byte terminator = 0x0d;
-        final int maxBarCodeSize = 128;
+    private boolean readSerialPort() {
+
         Logger.d("ScannerService: read()");
-//        try {
-//            BufferedReader reader = null;
-//            while (shouldConnect) {
-//                if (reader == null) {
-//                    if ((reader = getSerialPortScannerReader()) == null) {
-//                        Logger.d("ScannerService: read(): failed - can not get reader!");
-//                        return false;
-//                    }
-//                }
-//                String barcode = reader.readLine();
-//                Logger.d("ScannerService: read(): sending barcode = " + barcode);
-//                if (shouldConnect)
-//                    sendOnBarcodeReceived(barcode);
-//            }
-//            Logger.d("ScannerService: read(): exiting - should connect flag cleared");
-//        } catch (IOException e) {
-//            Logger.e("ScannerService: read(): exiting with exception", e);
-//            return false;
-//        }
-//        return true;
-        InputStream inputStream = serialPortScanner.getInputStreamReader();
+        InputStream inputStream = getInputStream();
         sentBarcode.set(false);
         try {
             int size;
@@ -295,8 +263,9 @@
                 if (size > 0) {
 
                     barcode = barcode + new String(buffer, 0, size);
-                    if ( buffer[size-1] ==  terminator )
-                    {
+                    Logger.e("ScannerService: read() barcode: " +barcode+", thread:"+Thread.currentThread().getId());
+
+                    if (buffer[size - 1] == terminator) {
                         if (shouldConnect)
                             sendOnBarcodeReceived(barcode);
                         barcode = "";
@@ -305,14 +274,6 @@
                 }
                 if (barcode.length() >= maxBarCodeSize)
                     barcode = "";
-
-//                if (barcode != null)
-//                    sendOnSerialPortBarcodeReceived(barcode);
-//
-//                if (!sentBarcode.get()) {
-//                    new Timer().start();
-//                    sentBarcode.set(true);
-//                }
             }
 
         } catch (IOException e) {
@@ -325,19 +286,6 @@
         return true;
     }
 
-    private class Timer extends Thread {
-        public void run() {
-            try {
-                Logger.d(" trace Timer: " + Thread.currentThread().getId());
-
-                Thread.sleep(TWENTY_MILLISECONDS);
-                serviceHandler.sendEmptyMessage(BARCODE_SENT_FROM_SERIAL);
-            } catch (InterruptedException e) {
-                e.printStackTrace();
-            }
-        }
-    }
-
     private boolean read() {
         Logger.d("ScannerService: read()");
         try {
@@ -382,17 +330,10 @@
     }
 
     private void closeConnection() {
-        Logger.d("ScannerService: closeConnection()");
+        Logger.d("ScannerService: closeConnection()" + ",thread: " + Thread.currentThread().getId());
         synchronized (this) {
-            if (serialPortScanner != null) {
-                try {
-                    serialPortScanner.close();
-                } catch (IOException e) {
-                    Logger.e("ScannerService: closeConnection(): exiting with exception", e);
-                    return;
-                }
-            }
-            serialPortScanner = null;
+            if (getInputStream() != null)
+                closeSerialScanner();
             if (scannerSocket == null) {
                 Logger.d("ScannerService: closeConnection(): ignore and exit - no socket to close");
                 return;
@@ -436,6 +377,7 @@
     }
 
     private void sendOnBarcodeReceived(String barcode) {
+        isConnected.set(false);
         Logger.d("ScannerService: sendOnBarcodeReceived(): barcode = " + barcode);
         Message msg = serviceHandler.obtainMessage();
         msg.what = BARCODE_RECEIVED_WHAT;
@@ -499,18 +441,6 @@
                 case BARCODE_RECEIVED_WHAT:
                     String barcode = (String) msg.obj;
                     onBarcodeReceived(barcode);
-                    break;
-                case TIME_DELAY:
-//                    String sb = (String) msg.obj;
-//                    sbMain.append(sb);
-//                    Logger.d(" trace TIME_DELAY: " + sbMain.toString() + +Thread.currentThread().getId());
-                    break;
-                case BARCODE_SENT_FROM_SERIAL:
-//                    isConnected.set(false);
-//                    sentBarcode.set(false);
-//                    onBarcodeReceived(sbMain.toString());
-//                    Logger.d(" trace BARCODE_SENT_FROM_SERIAL: " + sbMain.toString());
-//                    sbMain.delete(0, sbMain.length());
                     break;
             }
         }
Index: TabletCR/src/main/java/com/kaching123/tcr/activity/InventoryActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/activity/InventoryActivity.java	(revision 7a972b2f16e690c26893e6204bfe909a08a48fa2)
+++ TabletCR/src/main/java/com/kaching123/tcr/activity/InventoryActivity.java	(revision )
@@ -6,7 +6,6 @@
 import android.database.Cursor;
 import android.net.Uri;
 import android.os.Bundle;
-import android.os.Handler;
 import android.support.v4.app.LoaderManager.LoaderCallbacks;
 import android.support.v4.content.Loader;
 import android.view.Menu;
@@ -50,11 +49,9 @@
 import com.kaching123.tcr.fragment.inventory.ItemsFragment;
 import com.kaching123.tcr.fragment.itempick.DrawerCategoriesFragment;
 import com.kaching123.tcr.model.ItemExModel;
-import com.kaching123.tcr.model.PaymentTransactionModel.PaymentStatus;
 import com.kaching123.tcr.model.Permission;
 import com.kaching123.tcr.store.ShopProvider;
 import com.kaching123.tcr.store.ShopStore.ItemTable;
-import com.kaching123.tcr.store.ShopStore.PaymentTransactionTable;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -124,7 +121,7 @@
                     itemsFragment.setCategory(ItemsFragment.LOAD_ALL_CATEGORIES);
                     selectedDeartmentGuid = null;
                     selectedCategoryGuid = null;
-                    if (sortItem != null){
+                    if (sortItem != null) {
                         sortItem.setVisible(true);
                     }
                 } else {
@@ -132,7 +129,7 @@
                     itemsFragment.setDepartment(depGuid);
                     selectedCategoryGuid = catGuid;
                     selectedDeartmentGuid = depGuid;
-                    if (sortItem != null){
+                    if (sortItem != null) {
                         sortItem.setVisible(false);
                     }
                 }
@@ -222,9 +219,9 @@
     @OptionsItem
     protected void actionSortSelected() {
         int level = sortItem.getIcon().getLevel();
-        if (level == 0){
+        if (level == 0) {
             level = 1;
-        }else {
+        } else {
             level = 0;
         }
         sortByName = level == 1;
@@ -267,7 +264,7 @@
     }
 
     @OptionsItem
-    protected void actionManagePrinterAliasSelected(){
+    protected void actionManagePrinterAliasSelected() {
         PrinterAliasActivity.start(this);
     }
 
@@ -308,9 +305,11 @@
 
     @Override
     protected void onBarcodeReceived(String barcode) {
+        if (searchItem != null) {
-        searchItem.expandActionView();
-        SearchView searchView = (SearchView) searchItem.getActionView();
-        searchView.setQuery(barcode, true);
+            searchItem.expandActionView();
+            SearchView searchView = (SearchView) searchItem.getActionView();
+            searchView.setQuery(barcode, true);
+        }
     }
 
 
