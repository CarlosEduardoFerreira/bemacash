Index: TabletCR/src/main/java/com/kaching123/tcr/commands/payment/blackstone/prepaid/sunpass/GetSunPassDocumentInquiryCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/commands/payment/blackstone/prepaid/sunpass/GetSunPassDocumentInquiryCommand.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/commands/payment/blackstone/prepaid/sunpass/GetSunPassDocumentInquiryCommand.java	(revision )
@@ -0,0 +1,63 @@
+package com.kaching123.tcr.commands.payment.blackstone.prepaid.sunpass;
+
+import android.content.Context;
+
+import com.kaching123.tcr.commands.payment.SOAPWebCommand;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request.SunEntryRequest;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request.SunPassDocumentInquiryRequest;
+import com.kaching123.tcr.websvc.api.prepaid.BalanceResponse;
+import com.kaching123.tcr.websvc.api.prepaid.Broker;
+import com.kaching123.tcr.websvc.api.prepaid.DocumentInquiryResponse;
+import com.telly.groundy.Groundy;
+import com.telly.groundy.TaskHandler;
+import com.telly.groundy.TaskResult;
+
+/**
+ * @author Ivan v. Rikhmayer
+ *         This class is intended to
+ */
+public class GetSunPassDocumentInquiryCommand extends SOAPWebCommand<SunPassDocumentInquiryRequest> {
+
+    protected final static String ARG_USER = "user";
+    protected final static String ARG_REQUEST = "request";
+    public final static String ARG_RESULT = "ARG_RESULT";
+
+    protected DocumentInquiryResponse response;
+
+    public  final static TaskHandler start(Context context, Object callback, SunPassDocumentInquiryRequest request) {
+        return Groundy.create(GetSunPassDocumentInquiryCommand.class)
+                      .arg(ARG_REQUEST, request)
+                      .callback(callback)
+                      .queueUsing(context);
+    }
+
+    @Override
+    protected TaskResult doInBackground() {
+        return super.doInBackground().add(ARG_RESULT, response);
+    }
+
+    @Override
+    protected Long doCommand(Broker brokerApi, SunPassDocumentInquiryRequest request) {
+        response = brokerApi.DoSunPassDocumentInquiry(
+                request.mID,
+                request.tID,
+                request.password,
+                request.cashier,
+                request.accountNumber,
+                request.licensePlateNumber,
+                request.transactionMode,
+                request.transactionId,
+                getSign(request.mID,
+                        request.tID,
+                        request.password,
+                        null,
+                        request.transactionId)
+        );
+        return response != null ? (long)response.responseCode : null;
+    }
+
+    @Override
+    protected SunPassDocumentInquiryRequest getRequest() {
+        return (SunPassDocumentInquiryRequest) getArgs().getSerializable(ARG_REQUEST);
+    }
+}
\ No newline at end of file
Index: TabletCR/src/main/res/layout/prepaid_receipt_listview_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/prepaid_receipt_listview_item.xml	(revision )
+++ TabletCR/src/main/res/layout/prepaid_receipt_listview_item.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    style="@style/Receipt.Layout"
+    android:orientation="horizontal"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    >
+
+    <TextView
+        android:layout_marginLeft="40dp"
+        android:id="@+id/tv_name"
+        android:layout_width="400dp"
+        style="@style/Receipt.BodyContent"
+        android:layout_height="wrap_content" />
+
+    <TextView
+        android:id="@+id/tv_content"
+        android:layout_width="400dp"
+        style="@style/Receipt.BodyContent"
+        android:layout_height="wrap_content" />
+
+</LinearLayout>
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/model/payment/blackstone/prepaid/wireless/WirelessType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/model/payment/blackstone/prepaid/wireless/WirelessType.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/model/payment/blackstone/prepaid/wireless/WirelessType.java	(revision )
@@ -12,7 +12,6 @@
     INTERNATIONAL_TOP_UP("INTERNATIONAL TOP UP"),
     LONG_DISTANCE_PIN("LONG DISTANCE PIN"),
     NATIONAL_WIRELESS_PIN("NATIONAL WIRELESS PIN");
-
     private String name;
 
     WirelessType(String name) {
Index: TabletCR/src/main/res/layout/sunpass_amount_fragment.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/sunpass_amount_fragment.xml	(revision 2972)
+++ TabletCR/src/main/res/layout/sunpass_amount_fragment.xml	(revision )
@@ -1,38 +1,248 @@
 <?xml version="1.0" encoding="utf-8"?>
+
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-                android:id="@+id/holder"
-                android:layout_height="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="@color/prepaid_dialog_buttons_background_color"
+
+    android:layout_width="fill_parent">
+
+    <TableLayout
+        android:id="@+id/tableview"
+        android:layout_height="wrap_content"
+        android:padding="20dp"
+        android:layout_width="500dp">
+
+
+        <TableRow
-                android:layout_width="fill_parent"
+            android:layout_width="fill_parent"
-                android:layout_weight="18">
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
 
+            <com.kaching123.tcr.component.CustomEditBox
+                style="@style/CustomEditBox.PaymentInputField"
+                android:textColorHint="@color/prepaid_dialog_white"
+                android:hint="@string/prepaid_sunpass_credencial_account_hint"
+                android:id="@+id/account_number_editview"
+                android:textColor="@color/prepaid_dialog_white"
+                android:layout_width="0dp"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:gravity="left"
+                android:textSize="@dimen/prepaid_label_text_size"
+                android:inputType="number" />
 
-    <com.kaching123.tcr.component.KeyboardView_
-        android:layout_alignParentBottom="true"
+        </TableRow>
+
+
+        <TableRow
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:layout_marginTop="20dp"
+            android:gravity="center_vertical">
+
+            <com.kaching123.tcr.component.CustomEditBox
+                style="@style/CustomEditBox.PaymentInputField"
+                android:hint="@string/prepaid_sunpass_credencial_account_validate_hint"
+                android:textColorHint="@color/prepaid_dialog_white"
+                android:id="@+id/account_number_validate_editview"
+                android:layout_width="0dp"
+                android:singleLine="true"
-        android:layout_height="wrap_content"
+                android:layout_height="wrap_content"
-        android:layout_centerHorizontal="true"
+                android:textColor="@color/prepaid_dialog_white"
+                android:layout_weight="1"
+                android:gravity="left"
+                android:textSize="@dimen/prepaid_label_text_size"
+                android:inputType="number" />
+
+        </TableRow>
+
+
+    </TableLayout>
+
+    <com.kaching123.tcr.component.CustomEditBox
+        style="@style/CustomEditBox.PaymentInputField"
+        android:id="@+id/charge"
+        android:layout_below="@id/tableview"
+        android:layout_marginLeft="25dp"
+        android:gravity="left"
+        android:textColor="@color/prepaid_dialog_white"
+        android:layout_height="wrap_content"
+        android:textColorHint="@color/prepaid_dialog_white"
+        android:layout_width="460dp" />
+    <TextView
+        android:id="@+id/review_order_detail"
+        android:layout_below="@id/charge"
+        android:layout_marginLeft="35dp"
         android:layout_width="wrap_content"
-        android:layout_marginBottom="10dp"
-        android:id="@+id/keyboard"/>
+        android:layout_height="wrap_content"
+        android:textStyle="bold"
+        android:textSize="@dimen/prepaid_label_text_size"
+        android:text="@string/sunpass_credential_review_order_detail"
+        android:textColor="@color/prepaid_dialog_white" />
 
+    <LinearLayout
+        android:id="@+id/linearlayout1"
+        android:layout_marginTop="20dp"
+        android:layout_below="@+id/review_order_detail"
+        android:layout_width="500dp"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
-    <TextView
+        <TextView
-        style="@style/PaymentItem.Grayed"
-        android:id="@+id/limitation"
-        android:layout_below="@id/biller"
+
+            android:layout_width="300dp"
+            android:layout_marginLeft="35dp"
+            android:textSize="20sp"
-        android:layout_height="wrap_content"
+            android:layout_height="wrap_content"
-        android:layout_alignLeft="@id/keyboard"
-        android:layout_alignRight="@id/keyboard"
-        android:paddingBottom="10dp"
-        android:layout_width="fill_parent"/>
+            android:text="@string/sunpass_credential_transponder_numer"
+            android:textColor="@color/prepaid_dialog_white" />
 
-    <com.kaching123.tcr.component.CustomEditBox
-        android:id="@+id/charge"
+        <TextView
+            android:id="@+id/transponder_number"
+            android:textSize="20sp"
+            android:layout_width="200dp"
+            android:layout_height="wrap_content"
+            android:textColor="@color/prepaid_dialog_white" />
 
-        android:layout_below="@id/limitation"
-        android:layout_alignLeft="@id/keyboard"
-        android:layout_alignRight="@id/keyboard"
-        android:gravity="left"
-        android:hint="@string/sunpass_prepaid_dialog_custom_amount_hint"
-        style="@style/CustomEditBox.PaymentInputField"
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/linearlayout2"
+        android:layout_marginTop="20dp"
+        android:layout_below="@+id/linearlayout1"
+        android:layout_width="500dp"
         android:layout_height="wrap_content"
-        android:layout_width="fill_parent"/>
+        android:orientation="horizontal">
+
+        <TextView
+            android:layout_width="300dp"
+            android:textSize="20sp"
+            android:layout_marginLeft="35dp"
+            android:layout_height="wrap_content"
+            android:text="@string/sunpass_credential_last_known_balance"
+            android:textColor="@color/prepaid_dialog_white" />
+
+        <TextView
+            android:id="@+id/last_known_balance"
+            android:textSize="20sp"
+            android:layout_width="200dp"
+            android:layout_height="wrap_content"
+            android:textColor="@color/prepaid_dialog_white" />
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/linearlayout3"
+        android:layout_marginTop="20dp"
+        android:layout_below="@+id/linearlayout2"
+        android:layout_width="500dp"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+
+            android:layout_width="300dp"
+            android:textSize="20sp"
+            android:layout_marginLeft="35dp"
+            android:layout_height="wrap_content"
+            android:text="@string/sunpass_credential_minimum_recharge_amount"
+            android:textColor="@color/prepaid_dialog_white" />
+
+        <TextView
+            android:id="@+id/minimum_recharge_amount"
+            android:textSize="20sp"
+            android:layout_width="200dp"
+            android:layout_height="wrap_content"
+            android:textColor="@color/prepaid_dialog_white" />
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/linearlayout4"
+        android:layout_marginTop="20dp"
+        android:layout_below="@+id/linearlayout3"
+        android:layout_width="500dp"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:textSize="20sp"
+            android:layout_width="300dp"
+            android:layout_marginLeft="35dp"
+            android:layout_height="wrap_content"
+            android:text="@string/sunpass_credential_amount"
+            android:textColor="@color/prepaid_dialog_white" />
+
+        <TextView
+            android:textSize="20sp"
+            android:id="@+id/amount"
+            android:layout_width="200dp"
+            android:layout_height="wrap_content"
+            android:textColor="@color/prepaid_dialog_white" />
+
+    </LinearLayout>
+
+
+    <LinearLayout
+        android:id="@+id/linearlayout5"
+        android:layout_marginTop="20dp"
+        android:layout_below="@+id/linearlayout4"
+        android:layout_width="500dp"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:textSize="20sp"
+            android:layout_width="300dp"
+            android:layout_marginLeft="35dp"
+            android:layout_height="wrap_content"
+            android:text="@string/sunpass_credential_fees"
+            android:textColor="@color/prepaid_dialog_white" />
+
+        <TextView
+            android:textSize="20sp"
+            android:id="@+id/fee"
+            android:layout_width="200dp"
+            android:layout_height="wrap_content"
+            android:textColor="@color/prepaid_dialog_white" />
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/linearlayout6"
+        android:layout_marginTop="50dp"
+        android:layout_below="@+id/linearlayout5"
+        android:layout_width="500dp"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:textSize="20sp"
+            android:layout_width="300dp"
+            android:layout_marginLeft="35dp"
+            android:layout_height="wrap_content"
+            android:text="@string/sunpass_credential_tatal"
+            android:textColor="@color/prepaid_dialog_white" />
+
+        <TextView
+            android:textSize="20sp"
+            android:id="@+id/total"
+            android:layout_width="200dp"
+            android:layout_height="wrap_content"
+            android:textColor="@color/prepaid_dialog_white" />
+
+    </LinearLayout>
+
+    <com.kaching123.tcr.component.KeyboardView_
+        android:id="@+id/keyboard"
+        android:layout_alignRight="@+id/tableview"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentRight="true"
+        android:layout_toLeftOf="@id/charge"
+        android:layout_marginLeft="16dp"
+        android:layout_marginTop="20dp"
+        android:layout_marginRight="20dp" />
+
 </RelativeLayout>
\ No newline at end of file
Index: TabletCR/src/main/res/layout/prepaid_credentials_eamilid_fragment.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/prepaid_credentials_eamilid_fragment.xml	(revision )
+++ TabletCR/src/main/res/layout/prepaid_credentials_eamilid_fragment.xml	(revision )
@@ -0,0 +1,136 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_height="fill_parent"
+    android:padding="20dp"
+    android:layout_width="fill_parent"
+    android:background="@color/prepaid_dialog_buttons_background_color">
+
+
+    <TableLayout
+        android:layout_height="fill_parent"
+        android:padding="20dp"
+        android:layout_width="fill_parent"
+        android:background="@color/prepaid_dialog_buttons_background_color"
+        android:layout_toLeftOf="@+id/keyboard">
+
+
+        <TableRow
+            android:id="@+id/account_number_alternative_container"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
+
+
+                <EditText
+                    style="@style/StyledDialog.Content.EditText"
+                    android:id="@+id/account_number_alternative"
+                    android:layout_width="fill_parent"
+                    android:singleLine="true"
+                    android:layout_height="wrap_content"
+                    android:hint="@string/prepaid_dialog_credentials_2"/>
+
+
+        </TableRow>
+
+        <TableRow
+            android:id="@+id/account_add_first_container"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
+
+
+            <EditText
+                style="@style/StyledDialog.Content.EditText"
+                android:id="@+id/account_add_first"
+                android:layout_width="0dp"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:hint="@string/prepaid_dialog_credentials_3"/>
+
+        </TableRow>
+
+        <TableRow
+            android:id="@+id/account_add_second_container"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
+
+            <EditText
+                style="@style/StyledDialog.Content.EditText"
+                android:id="@+id/account_add_second"
+                android:layout_width="0dp"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:hint="@string/prepaid_dialog_credentials_4"/>
+
+        </TableRow>
+
+        <TableRow
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
+
+            <EditText
+                style="@style/StyledDialog.Content.EditText"
+                android:id="@+id/account_customer_first_name"
+                android:layout_width="0dp"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:hint="@string/prepaid_dialog_credentials_5"/>
+
+        </TableRow>
+
+        <TableRow
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
+
+            <EditText
+                style="@style/StyledDialog.Content.EditText"
+                android:id="@+id/account_customer_last_name"
+                android:layout_width="0dp"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:hint="@string/prepaid_dialog_credentials_6"/>
+
+        </TableRow>
+
+        <TableRow
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
+
+            <EditText
+                style="@style/StyledDialog.Content.EditText"
+                android:id="@+id/account_sender_first_name"
+                android:layout_width="0dp"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:hint="@string/prepaid_dialog_credentials_7"/>
+
+        </TableRow>
+
+        <TableRow
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
+
+            <EditText
+                style="@style/StyledDialog.Content.EditText"
+                android:id="@+id/account_sender_last_name"
+                android:layout_width="0dp"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:hint="@string/prepaid_dialog_credentials_8"/>
+
+        </TableRow>
+    </TableLayout>
+
+</RelativeLayout>
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/WirelessCategoryFragmentDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/WirelessCategoryFragmentDialog.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/WirelessCategoryFragmentDialog.java	(revision )
@@ -2,6 +2,8 @@
 
 import android.content.Context;
 import android.database.Cursor;
+import android.graphics.Color;
+import android.graphics.Typeface;
 import android.net.Uri;
 import android.os.Bundle;
 import android.os.Handler;
@@ -10,24 +12,34 @@
 import android.support.v4.content.Loader;
 import android.text.Editable;
 import android.text.InputFilter;
+import android.view.Gravity;
 import android.view.LayoutInflater;
+import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
 import android.widget.AdapterView.OnItemSelectedListener;
 import android.widget.ArrayAdapter;
+import android.widget.EditText;
 import android.widget.Spinner;
 import android.widget.TextView;
 
+import com.googlecode.androidannotations.annotations.Click;
 import com.kaching123.tcr.Logger;
 import com.kaching123.tcr.R;
+import com.kaching123.tcr.activity.CashierActivity;
+import com.kaching123.tcr.activity.QuickServiceActivity;
 import com.kaching123.tcr.adapter.ObjectsCursorAdapter;
 import com.kaching123.tcr.component.CurrencyFormatInputFilter;
 import com.kaching123.tcr.component.CustomEditBox;
 import com.kaching123.tcr.component.KeyboardView;
+import com.kaching123.tcr.component.TelephoneEditNumberCurrencyFormatInputFilter;
 import com.kaching123.tcr.fragment.UiHelper;
 import com.kaching123.tcr.fragment.dialog.DialogUtil;
 import com.kaching123.tcr.fragment.dialog.StyledDialogFragment;
+import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.CredentialsDialogBase;
+import com.kaching123.tcr.jdbc.converters.ShopInfoViewJdbcConverter;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.Broker;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.PrepaidUser;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.WirelessItem;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.WirelessItemDenomination;
@@ -55,7 +67,7 @@
  *         This class is intended to
  */
 @EFragment
-public class WirelessCategoryFragmentDialog extends StyledDialogFragment  implements CustomEditBox.IKeyboardSupport, LoaderCallbacks<List<WirelessItem>> {
+public class WirelessCategoryFragmentDialog extends StyledDialogFragment implements CustomEditBox.IKeyboardSupport, LoaderCallbacks<List<WirelessItem>> {
 
     private static final String DIALOG_NAME = "WirelessCategoryFragmentDialog";
 
@@ -66,15 +78,9 @@
 
     private static final int DEFAULT_LOADER = 0;
     private static final int SUPER_LOADER = 1;
-
-    //private static final String SUPER_KEY = "super key";
-
-    //private WirelessItemAdapter categoryArrayAdapter;
     private ArrayAdapter<WirelessItemDenomination> billerAdapter;
 
-    private ArrayAdapter<SuperCategory> superCategoryAdapter;
-
-    private List<SuperCategory> superCategories = new ArrayList<SuperCategory>();
+    private List<WirelessItem> superCategories = new ArrayList<WirelessItem>();
     private List<WirelessItem> valuesCategory = new ArrayList<WirelessItem>();
 
     private List<Country> countries = new ArrayList<Country>();
@@ -82,9 +88,11 @@
     @Bean
     protected WirelessItemCursorAdapter categoryAdapter;
 
+    @Bean
+    protected WirelessItemCursorAdapter superCategoryAdapter;
+
     private WirelessItem chosenCategory;
 
-    //    private SuperCategory chosenSuperCategory;
     private WirelessItemDenomination chosenBiller;
     private BigDecimal chosenAmount;
     private SuperCategory chosenSuperCategory;
@@ -94,42 +102,131 @@
     private BigDecimal maxAmount = BigDecimal.ZERO;
 
     protected WirelessCategoryFragmentDialogCallback callback;
-    @FragmentArg protected String transactionMode;
-    @FragmentArg protected String cashierId;
-    @FragmentArg protected PrepaidUser user;
-    @FragmentArg protected Boolean longDistance;
-    @FragmentArg protected Boolean international;
-    @FragmentArg protected Boolean pinless;
 
-    @ViewById protected KeyboardView keyboard;
-    @ViewById protected Spinner country;
-    @ViewById protected Spinner category;
-    @ViewById protected Spinner supercategory;
-    @ViewById protected Spinner biller;
-    @ViewById protected CustomEditBox charge;
-    @ViewById protected TextView limitation;
 
-    @ColorRes(R.color.dlg_text_green) protected int colorOk;
-    @ColorRes(R.color.gray_dark) protected int colorDisabled;
+    @FragmentArg
+    protected String transactionMode;
+    @FragmentArg
+    protected String cashierId;
+    @FragmentArg
+    protected PrepaidUser user;
+    @FragmentArg
+    protected Boolean longDistance;
+    @FragmentArg
+    protected Boolean international;
+    @FragmentArg
+    protected Boolean pinless;
 
+    @ViewById
+    protected KeyboardView keyboard;
+    @ViewById
+    protected Spinner country;
+    @ViewById
+    protected Spinner category;
+    @ViewById
+    protected Spinner supercategory;
+    @ViewById
+    protected Spinner biller;
+    @ViewById
+    protected CustomEditBox charge;
+    @ViewById
+    protected TextView limitation;
 
+    @ViewById
+    protected TextView dialCountryCodeTextview;
+    @ViewById
+    protected CustomEditBox telephoneInput;
+    private String numText;
+    private static final int WIRELESS_PROFILE_ID = 15;
+    private static int dialogTitle;
+    @FragmentArg
+    protected Broker broker;
+
+    @ColorRes(R.color.prepaid_dialog_white)
+    protected int colorOk;
+    @ColorRes(R.color.gray_dark)
+    protected int colorDisabled;
+
+
+    @AfterTextChange
+    protected void telephoneInputAfterTextChanged(Editable s) {
+
+
+        numText = dialCountryCodeTextview.getText().toString() + s.toString();
+        if (s == null) {
+            enableFinish(false);
+            return;
+        }
+        if (!getTelephoneValidate()) {
+            enableFinish(false);
+        }
+        try {
+            if (chosenAmount != null && minAmount != null)
+                if (chosenAmount.compareTo(minAmount) >= 0) {
+
+                    if (maxAmount.compareTo(BigDecimal.ZERO) > 0 && chosenAmount.compareTo(maxAmount) > 0) {
+                        charge.setText(UiHelper.valueOf(maxAmount));
+                        return;
+                    }
+                    if (getTelephoneValidate()) {
+                        enableFinish(true);
+                    }
+                } else {
+                    enableFinish(false);
+                }
+
+
+        } catch (NumberFormatException e) {
+            enableFinish(false);
+        }
+    }
+
     public void setCallback(WirelessCategoryFragmentDialogCallback callback) {
         this.callback = callback;
     }
 
-    @AfterViews  protected void init() {
+    @AfterViews
+    protected void init() {
         keyboard.attachEditView(charge);
         setChargeView();
+        setTelephoneView();
         enableFinish(false);
         setSpinners();
+
 //        WaitDialogFragment.show(getActivity(), "Loading...");
 //        getBillerCategories(getActivity());
 
 
-
         getLoaderManager().restartLoader(DEFAULT_LOADER, null, this);
     }
 
+    private boolean getTelephoneValidate() {
+        if (chosenCategory == null)
+            return false;
+        return ((!(chosenCategory.isPinBased()) && (numText != null && numText.length() > dialCountryCodeTextview.length() && numText.length() < 22)) ||
+                (chosenCategory.isPinBased()));
+    }
+
+    protected static int getDialogTitle(Broker broker) {
+        switch (broker) {
+            case LONG_DISTANCE:
+                dialogTitle = R.string.prepaid_dialog_long_distance_title;
+                break;
+            case PINLESS:
+                dialogTitle = R.string.prepaid_dialog_pinless_recharge_title;
+                break;
+            case WIRELESS_RECHARGE:
+                dialogTitle = R.string.prepaid_dialog_wireless_recharge_title;
+                break;
+            case INTERNATIONAL_TOPUP:
+                dialogTitle = R.string.prepaid_dialog_wireless_recharge_international_title;
+                break;
+            default:
+                dialogTitle = 0;
+        }
+        return dialogTitle;
+    }
+
     protected void setSpinners() {
         biller.setEnabled(false);
         category.setEnabled(false);
@@ -156,7 +253,7 @@
                 chosenBiller = (WirelessItemDenomination) parent.getAdapter().getItem(position);
                 if (chosenBiller.denomination != null && chosenBiller.denomination.compareTo(BigDecimal.ZERO) > 0) {
                     chosenAmount = chosenBiller.denomination;
-                    resetInput(false);
+//                    resetInput(false);
                     charge.setText(UiHelper.valueOf(chosenAmount));
                     return;
                 }
@@ -164,15 +261,17 @@
                     minAmount = chosenBiller.min;
                     maxAmount = chosenBiller.max;
                     limitation.setText(getString(R.string.prepaid_dialog_amount_limitations, UiHelper.valueOf(minAmount), UiHelper.valueOf(maxAmount)));
-                    resetInput(true);
+//                    resetInput(true);
                 } else {
                     limitation.setText(R.string.prepaid_dialog_amount_no_limitation);
-                    resetInput(false);
+//                    resetInput(false);
                 }
 
             }
 
-            @Override public void onNothingSelected(AdapterView<?> ignore) { }
+            @Override
+            public void onNothingSelected(AdapterView<?> ignore) {
+            }
         });
 
         //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@@ -184,33 +283,40 @@
                 if (position == 0) {
                     chosenCategory = null;
                     clearBills();
+                    enableEditViews(chosenCategory, false);
+                    resetInput(false);
                 } else {
                     selectCategory(position);
+                    chosenCategory = categoryAdapter.getItem(position);
+                    enableEditViews(chosenCategory, true);
                 }
+
             }
 
-            @Override public void onNothingSelected(AdapterView<?> ignore) { }
+            @Override
+            public void onNothingSelected(AdapterView<?> ignore) {
+            }
         });
 
         //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
-        superCategories.add(DefaultSuperCategory.DEFAULT);
-        superCategoryAdapter = new ArrayAdapter<SuperCategory>(getActivity(), R.layout.prepaid_spinner_item, superCategories);
-        superCategoryAdapter.setDropDownViewResource(R.layout.prepaid_spinner_dropdown_item);
+//        superCategories.add(DefaultSuperCategory.DEFAULT);
+//        superCategoryAdapter = new ArrayAdapter<SuperCategory>(getActivity(), R.layout.prepaid_spinner_item, superCategories);
+//        superCategoryAdapter.setDropDownViewResource(R.layout.prepaid_spinner_dropdown_item);
         supercategory.setAdapter(superCategoryAdapter);
         supercategory.setOnItemSelectedListener(new OnItemSelectedListener() {
             @Override
             public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
 
                 chosenSuperCategory = (SuperCategory) parent.getAdapter().getItem(position);
-
                 clearCategories();
                 clearBills();
-
                 WirelessCategoryFragmentDialog.this.getLoaderManager().restartLoader(DEFAULT_LOADER, null, WirelessCategoryFragmentDialog.this);
             }
 
-            @Override public void onNothingSelected(AdapterView<?> ignore) { }
+            @Override
+            public void onNothingSelected(AdapterView<?> ignore) {
+            }
         });
 
         //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@@ -223,12 +329,47 @@
                 selectCountry(position);
             }
 
-            @Override public void onNothingSelected(AdapterView<?> ignore) { }
+            @Override
+            public void onNothingSelected(AdapterView<?> ignore) {
+            }
         });
 
         //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     }
 
+    private void enableEditViews(WirelessItem chosenCategory, boolean isSuperOpen) {
+        if (isSuperOpen) {
+            if (chosenCategory.denominations().get(0).toString().contains("-")) {
+                billerAdapter.clear();
+                billerAdapter.addAll(chosenCategory.denominations());
+                minAmount = chosenCategory.minDenomination;
+                maxAmount = chosenCategory.maxDenomination;
+                charge.setVisibility(View.VISIBLE);
+                charge.setHint(getString(R.string.prepaid_dialog_amount_limitations, UiHelper.valueOf(minAmount), UiHelper.valueOf(maxAmount)));
+                resetInput(true);
+            } else {
+                charge.setVisibility(View.INVISIBLE);
+                resetInput(false);
+            }
+            if (!chosenCategory.isPinBased()) {
+                telephoneInput.setVisibility(View.VISIBLE);
+                dialCountryCodeTextview.setVisibility(View.VISIBLE);
+                dialCountryCodeTextview.setText(chosenCategory.dialCountryCode);
+                resetInput(true);
+            } else {
+                telephoneInput.setVisibility(View.INVISIBLE);
+                dialCountryCodeTextview.setVisibility(View.INVISIBLE);
+                resetInput(false);
+            }
+        } else {
+            charge.setVisibility(View.GONE);
+            telephoneInput.setVisibility(View.GONE);
+            dialCountryCodeTextview.setVisibility(View.GONE);
+            resetInput(false);
+        }
+        enableFinish(false);
+    }
+
     private void selectCategory(int position) {
         chosenCategory = categoryAdapter.getItem(position);
 
@@ -258,9 +399,10 @@
     }
 
     private void clearBills() {
+        keyboard.setEnabled(false);
         billerAdapter.clear();
         billerAdapter.add(DefaultAmount.DEFAULT);
-        if(chosenCategory != null){
+        if (chosenCategory != null) {
             billerAdapter.addAll(chosenCategory.denominations());
         }
         biller.setSelection(0);
@@ -274,41 +416,62 @@
 
             @Override
             public boolean onChanged(String text) {
-                callback.onConditionSelected(chosenCategory, chosenAmount);
+                callback.onConditionSelected(chosenCategory, chosenAmount, numText, WIRELESS_PROFILE_ID);
                 return true;
             }
         });
     }
 
+    private void setTelephoneView() {
+        telephoneInput.setKeyboardSupportConteiner(this);
+        telephoneInput.setFilters(new InputFilter[]{new TelephoneEditNumberCurrencyFormatInputFilter()});
+        telephoneInput.setEditListener(new CustomEditBox.IEditListener() {
+
+            @Override
+            public boolean onChanged(String text) {
+                callback.onConditionSelected(chosenCategory, chosenAmount, numText, WIRELESS_PROFILE_ID);
+                return true;
+            }
+        });
+    }
+
     private void resetInput(boolean enabled) {
         keyboard.setEnabled(enabled);
         charge.setText("");
+        if (telephoneInput != null)
+            telephoneInput.setText("");
+        if (dialCountryCodeTextview != null && chosenCategory != null)
+            dialCountryCodeTextview.setText(chosenCategory.dialCountryCode);
     }
 
-    @AfterTextChange protected void chargeAfterTextChanged(Editable s) {
+    @AfterTextChange
+    protected void chargeAfterTextChanged(Editable s) {
         if (s == null) {
             enableFinish(false);
             return;
         }
+        if (!getTelephoneValidate()) {
+            enableFinish(false);
+        }
         try {
             BigDecimal amount = new BigDecimal(s.toString());
             if (BigDecimal.ZERO.compareTo(amount) >= 0) {
                 enableFinish(false);
                 return;
             }
-            if (chosenBiller.denomination != null && chosenBiller.denomination.compareTo(amount) == 0) {
-                enableFinish(true);
-                return;
-            }
+
             assert minAmount != null;
             assert maxAmount != null;
             chosenAmount = amount;
             if (chosenAmount.compareTo(minAmount) >= 0) {
+
                 if (maxAmount.compareTo(BigDecimal.ZERO) > 0 && chosenAmount.compareTo(maxAmount) > 0) {
                     charge.setText(UiHelper.valueOf(maxAmount));
                     return;
                 }
+                if (getTelephoneValidate()) {
-                enableFinish(true);
+                    enableFinish(true);
+                }
             } else {
                 enableFinish(false);
             }
@@ -317,56 +480,131 @@
         }
     }
 
-    @Override public void attachMe2Keyboard(CustomEditBox v) {
+    @Override
+    public void attachMe2Keyboard(CustomEditBox v) {
+        if (v == telephoneInput) {
+            keyboard.setDotEnabled(false);
+        } else {
+            keyboard.setDotEnabled(true);
+        }
         keyboard.attachEditView(v);
     }
 
-    @Override public void detachMe4Keyboard(CustomEditBox v) {
+    @Override
+    public void detachMe4Keyboard(CustomEditBox v) {
         keyboard.detachEditView();
     }
 
-    @Override public void onActivityCreated(Bundle savedInstanceState) {
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
+        getNegativeButton().setTextColor(Color.WHITE);
+        getNegativeButton().setTextSize(25);
+        getNegativeButton().setTypeface(Typeface.DEFAULT_BOLD);
+        getPositiveButton().setTypeface(Typeface.DEFAULT_BOLD);
+        getPositiveButton().setTextSize(25);
         getDialog().getWindow().setLayout(
                 getResources().getDimensionPixelOffset(R.dimen.prepaid_category_dlg_width),
                 getDialog().getWindow().getAttributes().height);
     }
 
-    @Override protected int getNegativeButtonTitle() {
+    @Override
+    protected int getSeparatorColor() {
+        return Color.WHITE;
+    }
+
+    @Override
+    protected int getNegativeButtonTitle() {
         return R.string.btn_back;
     }
 
-    @Override protected int getPositiveButtonTitle() {
+    @Override
+    protected int getTitleIcon() {
+        switch (dialogTitle) {
+            case R.string.prepaid_dialog_long_distance_title:
+                return R.drawable.icon_long_distance;
+            case R.string.prepaid_dialog_pinless_recharge_title:
+                return R.drawable.icon_pinless;
+            case R.string.prepaid_dialog_wireless_recharge_title:
+                return R.drawable.icon_wireless_recharge;
+            case R.string.prepaid_dialog_wireless_recharge_international_title:
+                return R.drawable.icon_international_topup;
+        }
+        return 0;
+    }
+
+    @Override
+    protected int getTitleGravity() {
+        return Gravity.LEFT;
+    }
+
+    @Override
+    protected boolean hasTitleTextTypeface() {
+        return true;
+    }
+
+    @Override
+    protected boolean hasNegativeButtonTextTypeface() {
+        return true;
+    }
+
+    @Override
+    protected int getTitleViewBackgroundColor() {
+        return getResources().getColor(R.color.prepaid_dialog_title_background_color);
+    }
+
+    @Override
+    protected int getTitleTextColor() {
+        return Color.WHITE;
+    }
+
+    @Override
+    protected int getButtonsBackgroundColor() {
+        return getResources().getColor(R.color.prepaid_dialog_buttons_background_color);
+    }
+
+//    @Override protected  int getTitleTextTypeface(){ return Typeface.BOLD; }
+
+//    @Override protected  int getNegativeButtonTextTypeface(){ return Typeface.BOLD; }
+
+    @Override
+    protected int getPositiveButtonTitle() {
         return R.string.btn_next;
     }
 
-    @Override protected boolean hasNegativeButton() {
+    @Override
+    protected boolean hasNegativeButton() {
         return true;
     }
 
-    @Override protected boolean hasPositiveButton() {
+    @Override
+    protected boolean hasPositiveButton() {
         return true;
     }
 
-    @Override protected int getDialogContentLayout() {
+    @Override
+    protected int getDialogContentLayout() {
         return R.layout.wireless_category_fragment;
     }
 
-    @Override protected int getDialogTitle() {
-        return R.string.prepaid_dialog_category_title;
+    @Override
+    protected int getDialogTitle() {
+        return dialogTitle;
     }
 
-    @Override protected OnDialogClickListener getPositiveButtonListener() {
+    @Override
+    protected OnDialogClickListener getPositiveButtonListener() {
         return new OnDialogClickListener() {
             @Override
             public boolean onClick() {
-                callback.onConditionSelected(chosenCategory, chosenAmount);
+                callback.onConditionSelected(chosenCategory, chosenAmount, numText, WIRELESS_PROFILE_ID);
                 return false;
             }
         };
     }
 
-    @Override protected OnDialogClickListener getNegativeButtonListener() {
+    @Override
+    protected OnDialogClickListener getNegativeButtonListener() {
         return new OnDialogClickListener() {
             @Override
             public boolean onClick() {
@@ -383,7 +621,9 @@
                             Boolean international,
                             Boolean longDistance,
                             Boolean pinless,
+                            Broker broker,
                             WirelessCategoryFragmentDialogCallback listener) {
+        getDialogTitle(broker);
         WirelessCategoryFragmentDialog dialog = WirelessCategoryFragmentDialog_.builder()
                 .transactionMode(transactionMode)
                 .longDistance(longDistance)
@@ -391,6 +631,7 @@
                 .cashierId(cashierId)
                 .user(user)
                 .international(international)
+                .broker(broker)
                 .build();
         dialog.setCallback(listener);
         DialogUtil.show(context,
@@ -416,10 +657,10 @@
             loader.where(WirelessTable.COUNTRYCODE + " = ?", chosenLocale);
         }
 
-        if (chosenSuperCategory != null && !chosenSuperCategory.carrierName.equals(DefaultSuperCategory.DEFAULT.carrierName)) {
+        if (chosenSuperCategory != null && !chosenSuperCategory.carrierName.equals(DefaultSuperCategory.DEFAULT.carrierName))
             loader.where(WirelessTable.CARRIERNAME + " = ?", chosenSuperCategory.carrierName);
-        }
 
+
         return loader.orderBy(WirelessTable.NAME)
                 .wrap(new Function<Cursor, List<WirelessItem>>() {
                     @Override
@@ -430,7 +671,7 @@
                         List<SuperCategory> superItemsTmp = new ArrayList<SuperCategory>();
                         if (i == SUPER_LOADER) {
                             superCategories.clear();
-                            superCategories.add(DefaultSuperCategory.DEFAULT);
+//                            superCategories.add(DefaultSuperCategory.DEFAULT);
                         }
                         boolean shouldUpdate = countries.size() == 0;
                         while (c.moveToNext()) {
@@ -462,21 +703,27 @@
                         }
                         if (i == SUPER_LOADER) {
                             Collections.sort(superItemsTmp);
+                            superCategories.add(DefaultSuperCategory.DEFAULT);
                             superCategories.addAll(superItemsTmp);
+//                            superCategories.add(DefaultSuperCategory.DEFAULT);
                         }
                         return items;
                     }
                 }).build(getActivity());
 
     }
+
     @Override
     public void onLoadFinished(Loader<List<WirelessItem>> listLoader, List<WirelessItem> wirelessItems) {
         boolean sameCategorySelection = category.getSelectedItemPosition() == 0;
         wirelessItems.add(0, DefaultCategory.DEFAULT);
         categoryAdapter.changeCursor(wirelessItems);
         category.setEnabled(true);
+//        category.setSelection(wirelessItems.size() - 1);
+        superCategoryAdapter.changeCursor(superCategories);
+        supercategory.setEnabled(true);
+//        supercategory.setSelection(superCategories.size() - 1);
 
-
         if (sameCategorySelection && !categoryAdapter.isEmpty()) {
             selectCategory(category.getSelectedItemPosition());
         }
@@ -512,7 +759,7 @@
         public abstract void onError(String message);
 
         public abstract void onConditionSelected(WirelessItem chosenCategory,
-                                                 BigDecimal amount );
+                                                 BigDecimal amount, String phoneNumber, int profileId);
     }
 
     private class CountryAdapter extends ObjectsCursorAdapter<Country> {
@@ -562,7 +809,7 @@
         protected static final DefaultCategory DEFAULT = new DefaultCategory();
 
         public DefaultCategory() {
-            name = "View All Products";
+            name = "Select Plan";
         }
     }
 
@@ -571,7 +818,7 @@
         protected static final DefaultSuperCategory DEFAULT = new DefaultSuperCategory();
 
         public DefaultSuperCategory() {
-            carrierName = "All items";
+            carrierName = "Select Carrier ";
         }
     }
 
@@ -602,7 +849,7 @@
 
         @Override
         public String toString() {
-            return "Choose Amount";
+            return "Select Amount";
         }
     }
 }
Index: TabletCR/src/main/res/menu/cashier_activity.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/menu/cashier_activity.xml	(revision 2972)
+++ TabletCR/src/main/res/menu/cashier_activity.xml	(revision )
@@ -37,10 +37,4 @@
         android:title="@string/cashier_action_prapaid"
         android:orderInCategory="@integer/menu_order_default"/>
 
-    <item
-        android:icon="@drawable/btn_balance"
-        android:id="@+id/action_balance"
-        android:showAsAction="always"
-        android:title="@string/cashier_action_balance"
-        android:orderInCategory="@integer/menu_order_default"/>
 </menu>
\ No newline at end of file
Index: TabletCR/src/main/res/layout/sunpass_choices.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/sunpass_choices.xml	(revision )
+++ TabletCR/src/main/res/layout/sunpass_choices.xml	(revision )
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="@color/prepaid_dialog_buttons_background_color">
+
+    <ImageView
+        android:id="@+id/iv_transponder"
+        android:layout_width="500dp"
+        android:layout_height="146dp"
+        android:src="@drawable/imageview_sunpass_transponder"
+        android:layout_alignParentTop="true"
+        android:layout_centerHorizontal="true"
+        android:layout_marginTop="108dp" />
+
+     <ImageView
+         android:layout_marginTop="30dp"
+         android:id="@+id/iv_pay_your_document"
+         android:layout_width="500dp"
+         android:layout_height="146dp"
+         android:src="@drawable/imageview_sunpass_pay_your_document"
+         android:layout_alignLeft="@+id/iv_transponder"
+         android:layout_alignStart="@+id/iv_transponder"
+         android:layout_below="@+id/iv_transponder"
+         android:layout_alignRight="@+id/iv_transponder"
+         android:layout_alignEnd="@+id/iv_transponder" />
+
+</RelativeLayout>
\ No newline at end of file
Index: TabletCR/src/main/res/layout/sunpass_pay_your_document_amount_fragment.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/sunpass_pay_your_document_amount_fragment.xml	(revision )
+++ TabletCR/src/main/res/layout/sunpass_pay_your_document_amount_fragment.xml	(revision )
@@ -0,0 +1,257 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_height="fill_parent"
+    android:background="@color/prepaid_dialog_buttons_background_color"
+
+    android:layout_width="fill_parent">
+
+    <TableLayout
+        android:id="@+id/tableview"
+        android:layout_height="wrap_content"
+        android:padding="20dp"
+        android:layout_width="500dp">
+
+
+        <TableRow
+            android:id="@+id/tablerow1"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
+
+            <EditText
+                style="@style/StyledDialog.Content.EditText"
+                android:textColorHint="@color/prepaid_dialog_white"
+                android:hint="@string/sunpass_pyd_credential_document_num_hint"
+                android:id="@+id/document_number"
+                android:textColor="@color/prepaid_dialog_white"
+                android:layout_width="0dp"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:gravity="left"
+                android:textSize="@dimen/prepaid_label_text_size"
+                android:enabled="false"
+                android:inputType="number" />
+
+        </TableRow>
+
+        <TableRow
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
+
+            <TextView
+                android:id="@+id/review_order_detail"
+                android:layout_below="@id/tablerow1"
+                android:layout_marginLeft="11dp"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textSize="20sp"
+                android:text="@string/sunpass_pyd_credential_document_num_note"
+                android:textColor="@color/prepaid_dialog_white" />
+        </TableRow>
+
+        <TableRow
+            android:id="@+id/tablerow2"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:layout_marginTop="20dp"
+            android:gravity="center_vertical">
+
+            <EditText
+                style="@style/StyledDialog.Content.EditText"
+                android:hint="@string/sunpass_pyd_credential_plate_num_hint"
+                android:textColorHint="@color/prepaid_dialog_white"
+                android:id="@+id/plate_number"
+                android:layout_width="0dp"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
+                android:textColor="@color/prepaid_dialog_white"
+                android:layout_weight="1"
+                android:gravity="left"
+                android:textSize="@dimen/prepaid_label_text_size"
+                android:enabled="false"
+                />
+
+        </TableRow>
+        <TableRow
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
+
+            <TextView
+                android:id="@+id/review_order_detail"
+                android:layout_below="@id/tablerow2"
+                android:layout_marginLeft="11dp"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textSize="20sp"
+                android:text="@string/sunpass_pyd_credential_plate_num_note"
+                android:textColor="@color/prepaid_dialog_white" />
+        </TableRow>
+
+    </TableLayout>
+    <Spinner
+        android:id="@+id/biller"
+        android:paddingLeft="15dp"
+        style="@style/StyledDialog.Content.Spinner"
+        android:layout_width="500dp"
+        android:layout_height="wrap_content"
+        android:layout_below="@id/tableview"
+        android:layout_toLeftOf="@id/keyboard"
+        android:paddingBottom="10dp"></Spinner>
+
+    <LinearLayout
+        android:id="@+id/linearlayout"
+        android:layout_marginTop="25dp"
+        android:layout_marginLeft="20dp"
+        android:layout_toRightOf="@+id/tableview"
+        android:layout_width="400dp"
+        android:layout_height="wrap_content"
+        android:visibility="gone"
+        android:orientation="vertical">
+        <TextView
+            android:id="@+id/review_order_detail"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textStyle="bold"
+            android:textSize="@dimen/prepaid_label_text_size"
+            android:text="@string/sunpass_credential_review_order_detail"
+            android:textColor="@color/prepaid_dialog_white" />
+
+    <LinearLayout
+        android:layout_width="400dp"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:id="@+id/listview_item_name"
+            android:layout_below="@id/review_order_detail"
+            android:layout_alignLeft="@+id/review_order_detail"
+            android:layout_marginTop="25dp"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textSize="@dimen/prepaid_label_text_size"
+            android:text="@string/sunpass_pyd_order_view_item_name"
+            android:textColor="@color/prepaid_dialog_white" />
+        <TextView
+            android:id="@+id/listview_item_content"
+            android:layout_below="@id/review_order_detail"
+            android:layout_marginLeft="30dp"
+            android:layout_toRightOf="@+id/listview_item_name"
+            android:layout_marginTop="25dp"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textSize="@dimen/prepaid_label_text_size"
+            android:text="@string/sunpass_pyd_order_view_item_content"
+            android:textColor="@color/prepaid_dialog_white" />
+        </LinearLayout>
+
+        <View
+            android:layout_marginTop="10dp"
+            android:layout_width="350dp"
+            android:layout_height="1dip"
+            android:background="@color/prepaid_dialog_white"
+            />
+
+        <ListView
+            android:id="@+id/listview"
+            android:layout_marginTop="10dp"
+            android:layout_width="300dp"
+            android:layout_height="120dp"></ListView>
+
+        <View
+            android:layout_marginTop="10dp"
+            android:layout_width="350dp"
+            android:layout_height="1dip"
+            android:background="@color/prepaid_dialog_white"
+            />
+
+        <LinearLayout
+            android:id="@+id/linearlayout4"
+            android:layout_marginTop="20dp"
+            android:layout_width="500dp"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+            <TextView
+                android:textSize="20sp"
+                android:layout_width="200dp"
+                android:layout_height="wrap_content"
+                android:text="@string/sunpass_credential_amount"
+                android:textColor="@color/prepaid_dialog_white" />
+
+            <TextView
+                android:textSize="20sp"
+                android:id="@+id/amount_textview"
+                android:layout_width="100dp"
+                android:layout_height="wrap_content"
+                android:textColor="@color/prepaid_dialog_white" />
+
+        </LinearLayout>
+
+
+        <LinearLayout
+            android:id="@+id/linearlayout5"
+            android:layout_marginTop="20dp"
+            android:layout_width="500dp"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+            <TextView
+                android:textSize="20sp"
+                android:layout_width="200dp"
+                android:layout_height="wrap_content"
+                android:text="@string/sunpass_credential_fees"
+                android:textColor="@color/prepaid_dialog_white" />
+
+            <TextView
+                android:textSize="20sp"
+                android:id="@+id/fee_textview"
+                android:layout_width="100dp"
+                android:layout_height="wrap_content"
+                android:textColor="@color/prepaid_dialog_white" />
+
+        </LinearLayout>
+
+        <View
+            android:layout_marginTop="10dp"
+            android:layout_below="@id/linearlayout5"
+            android:layout_alignLeft="@+id/linearlayout5"
+            android:layout_width="350dp"
+            android:layout_height="1dip"
+            android:background="@color/prepaid_dialog_white"
+            />
+
+        <LinearLayout
+            android:id="@+id/linearlayout6"
+            android:layout_marginTop="50dp"
+            android:layout_width="300dp"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+            <TextView
+                android:textSize="20sp"
+                android:layout_width="200dp"
+                android:layout_height="wrap_content"
+                android:text="@string/sunpass_credential_tatal"
+                android:textColor="@color/prepaid_dialog_white" />
+
+            <TextView
+                android:textSize="20sp"
+                android:id="@+id/total_textview"
+                android:layout_width="100dp"
+                android:layout_height="wrap_content"
+                android:textColor="@color/prepaid_dialog_white" />
+
+        </LinearLayout>
+    </LinearLayout>
+
+
+
+
+
+
+
+</RelativeLayout>
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/CredentialsDialogWithCustomEditViewBase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/CredentialsDialogWithCustomEditViewBase.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/CredentialsDialogWithCustomEditViewBase.java	(revision )
@@ -0,0 +1,128 @@
+package com.kaching123.tcr.fragment.tendering.pinserve.prepaid;
+
+import android.graphics.Color;
+import android.graphics.drawable.Drawable;
+import android.os.Bundle;
+import android.text.InputFilter;
+import android.text.InputType;
+import android.text.SpannableString;
+import android.text.style.ForegroundColorSpan;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import com.googlecode.androidannotations.annotations.EFragment;
+import com.googlecode.androidannotations.annotations.res.ColorRes;
+import com.googlecode.androidannotations.annotations.res.DrawableRes;
+import com.kaching123.tcr.R;
+import com.kaching123.tcr.component.CustomEditBox;
+import com.kaching123.tcr.fragment.dialog.StyledDialogFragment;
+
+/**
+ * @author Ivan v. Rikhmayer
+ */
+@EFragment
+public abstract class CredentialsDialogWithCustomEditViewBase extends StyledDialogFragment {
+
+    @ColorRes(R.color.prepaid_dialog_white)
+    protected int colorOk;
+    @ColorRes(R.color.gray_dark)
+    protected int colorDisabled;
+
+    @DrawableRes(R.drawable.star_for_required_field)
+    protected Drawable star;
+
+    @Override
+    protected int getNegativeButtonTitle() {
+        return R.string.btn_back;
+    }
+
+    @Override
+    protected int getPositiveButtonTitle() {
+        return R.string.btn_check;
+    }
+
+    @Override
+    protected boolean hasNegativeButton() {
+        return true;
+    }
+
+    @Override
+    protected boolean hasPositiveButton() {
+        return true;
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        setCancelable(false);
+    }
+
+    protected void enableFinish(Boolean enabled) {
+        getPositiveButton().setEnabled(enabled);
+        getPositiveButton().setTextColor(enabled ? colorOk : colorDisabled);
+    }
+
+    public class MetaInfo2 {
+
+        public int max;
+        public int min;
+        public TextView editable;
+        public boolean wanted;
+        public boolean validated;
+
+        public MetaInfo2(TextView editable, boolean wanted, boolean validated) {
+            this(editable, wanted, validated, 0, 0);
+        }
+
+        public MetaInfo2(TextView editable, boolean wanted, boolean validated, int max, int min) {
+            this.editable = editable;
+            this.wanted = wanted;
+            this.validated = validated;
+            if (max >= min && max > 0) {
+                setMax(max);
+            }
+        }
+
+        public void setHint(String hint) {
+            String mHint = hint;
+            if (mHint != null) {
+                if (wanted) {
+                    SpannableString sshint = new SpannableString(hint + "*");
+                    sshint.setSpan(new ForegroundColorSpan(Color.RED), hint.length(), hint.length() + 1, 0);
+                    this.editable.setHint(sshint);
+                } else
+                    this.editable.setHint(hint);
+            }
+
+        }
+
+        public void setInputType(int inputType) {
+            this.editable.setInputType(inputType);
+        }
+
+        public void revalidate() {
+            String text = this.editable.getText().toString();
+            int length = text != null ? text.length() : 0;
+            this.validated = !this.wanted || (length >= this.min && (this.max <= this.min || length <= this.max));
+        }
+
+        public void setMax(int max) {
+            this.max = max;
+            applyValidation();
+        }
+
+
+        public void applyValidation() {
+            InputFilter[] filterArray = new InputFilter[1];
+            filterArray[0] = new InputFilter.LengthFilter(this.max);
+            this.editable.setFilters(filterArray);
+        }
+
+        @Override
+        public String toString() {
+            String text = this.editable.getText().toString();
+            return text != null && text.length() > 0 ? text : null;
+        }
+    }
+
+}
Index: TabletCR/src/main/java/com/kaching123/tcr/websvc/api/prepaid/Product.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/websvc/api/prepaid/Product.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/websvc/api/prepaid/Product.java	(revision )
@@ -13,6 +13,8 @@
 //This source code was auto-generated by Wsdl2Code  Version
 //
 
+import com.kaching123.tcr.Logger;
+
 import org.ksoap2.serialization.KvmSerializable;
 import org.ksoap2.serialization.PropertyInfo;
 import org.ksoap2.serialization.SoapObject;
@@ -34,7 +36,7 @@
     public String type;
     public String imageUrl;
     public VectorDouble denominations;
-    
+    public String DialCountryCode;
     public Product(){}
     
     public Product(SoapObject soapObject)
@@ -146,7 +148,18 @@
             SoapObject j = (SoapObject)soapObject.getProperty("Denominations");
             denominations = new VectorDouble(j);
         }
+
+        if  (soapObject.hasProperty("DialCountryCode"))
+        {
+            Object obj = soapObject.getProperty("DialCountryCode");
+            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
+                SoapPrimitive j =(SoapPrimitive) obj;
+                DialCountryCode = j.toString();
+            }else if (obj!= null && obj instanceof String){
+                DialCountryCode =(String) obj;
-    }
+            }
+        }
+    }
     @Override
     public Object getProperty(int arg0) {
         switch(arg0){
@@ -172,13 +185,16 @@
                 return imageUrl;
             case 10:
                 return denominations;
+            case 11:
+                return DialCountryCode;
+
         }
         return null;
     }
     
     @Override
     public int getPropertyCount() {
-        return 11;
+        return 12;
     }
     
     @Override
@@ -227,6 +243,10 @@
             case 10:
                 info.type = PropertyInfo.VECTOR_CLASS;
                 info.name = "Denominations";
+                break;
+            case 11:
+                info.type = PropertyInfo.STRING_CLASS;
+                info.name = "DialCountryCode";
                 break;
         }
     }
Index: TabletCR/src/main/java/com/kaching123/tcr/commands/payment/blackstone/prepaid/sunpass/DoSunPassDocumentPaymentCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/commands/payment/blackstone/prepaid/sunpass/DoSunPassDocumentPaymentCommand.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/commands/payment/blackstone/prepaid/sunpass/DoSunPassDocumentPaymentCommand.java	(revision )
@@ -0,0 +1,59 @@
+package com.kaching123.tcr.commands.payment.blackstone.prepaid.sunpass;
+
+import android.content.Context;
+
+import com.kaching123.tcr.commands.payment.blackstone.prepaid.BasePrepaidPaymentCommand;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request.SunPassDocumentPaymentRequest;
+import com.kaching123.tcr.websvc.api.prepaid.Broker;
+import com.kaching123.tcr.websvc.api.prepaid.DocumentPaymentResponse;
+import com.telly.groundy.Groundy;
+import com.telly.groundy.TaskHandler;
+import com.telly.groundy.TaskResult;
+
+/**
+ * @author Ivan v. Rikhmayer
+ *         This class is intended to
+ */
+public class DoSunPassDocumentPaymentCommand extends BasePrepaidPaymentCommand<SunPassDocumentPaymentRequest> {
+
+    public final static String ARG_RESULT = "ARG_RESULT";
+
+    protected DocumentPaymentResponse response;
+
+    public  final static TaskHandler start(Context context, Object callback, SunPassDocumentPaymentRequest request) {
+        return Groundy.create(DoSunPassDocumentPaymentCommand.class)
+                    .arg(ARG_REQUEST, request)
+                    .callback(callback)
+                    .queueUsing(context);
+    }
+
+    @Override
+    protected TaskResult doInBackground() {
+        return super.doInBackground().add(ARG_RESULT, response);
+    }
+
+    @Override
+    protected Long doCommand(Broker brokerApi, SunPassDocumentPaymentRequest request) {
+        response = brokerApi.DoSunPassDocumentPayment(
+                request.mID,
+                request.tID,
+                request.password,
+                request.cashier,
+                request.transactionId,
+                request.accountNumber,
+                request.licensePateleNumber,
+                request.amount.doubleValue(),
+                request.feeAmount,
+                request.purchaseId,
+                request.paidDocuments,
+                request.transactionMode,
+                getSign(request.mID,
+                        request.tID,
+                        request.password,
+                        request.amount,
+                        request.transactionId)
+        );
+        return response != null ? (long) response.responseCode : null;
+    }
+
+}
\ No newline at end of file
Index: TabletCR/src/main/res/layout/wireless_payment_complete.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/wireless_payment_complete.xml	(revision )
+++ TabletCR/src/main/res/layout/wireless_payment_complete.xml	(revision )
@@ -0,0 +1,137 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:orientation="vertical"
+    android:gravity="center"
+    android:layout_height="match_parent">
+
+
+    <TextView
+        android:layout_marginLeft="40dp"
+        android:layout_marginTop="10dp"
+        android:layout_gravity="left"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/prepaid_payment_complete_body_title"
+        style="@style/Receipt.BodyHeader" />
+
+
+    <LinearLayout
+        android:layout_marginTop="10dp"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <ImageView
+            android:id="@+id/product_imageview"
+            android:layout_width="190dp"
+            android:layout_marginLeft="40dp"
+            android:layout_height="wrap_content" />
+        <TextView
+            android:id="@+id/product_name"
+            android:layout_marginLeft="200dp"
+            android:layout_width="400dp"
+            android:layout_marginTop="45dp"
+            android:layout_height="wrap_content"
+            style="@style/Receipt.BodyContent"/>
+    </LinearLayout>
+    <TextView
+        android:layout_width="400dp"
+        android:layout_gravity="left"
+        android:layout_marginLeft="40dp"
+        android:layout_height="wrap_content"
+        android:text="@string/prepaid_wireless_payment_complete_order_data"
+        style="@style/Receipt.BodyContent"/>
+    <LinearLayout
+        android:layout_marginTop="10dp"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:layout_marginLeft="40dp"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            android:text="@string/prepaid_wireless_payment_complete_order_num"
+            style="@style/Receipt.BodyContent"/>
+        <TextView
+            android:id="@+id/product_ordernum"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            style="@style/Receipt.BodyContent"/>
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_marginTop="10dp"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:layout_marginLeft="40dp"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            android:text="@string/prepaid_wireless_payment_complete_product"
+            style="@style/Receipt.BodyContent"/>
+        <TextView
+            android:id="@+id/product_name_display"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            style="@style/Receipt.BodyContent"/>
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_marginTop="10dp"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:layout_marginLeft="40dp"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            android:text="@string/prepaid_wireless_payment_complete_order_total_price"
+            style="@style/Receipt.BodyContent"/>
+        <TextView
+            android:id="@+id/total"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            style="@style/Receipt.BodyContent"/>
+    </LinearLayout>
+
+    <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:paddingLeft="20dp"
+        android:paddingRight="20dp">
+
+        <CheckBox
+            android:id="@+id/print_box"
+            android:text="@string/chkbx_print"
+            style="@style/CheckBox.Dark"
+            android:layout_height="wrap_content"
+            android:layout_alignParentLeft="true"
+            android:layout_width="wrap_content" />
+
+        <CheckBox
+            android:layout_below="@id/print_box"
+            style="@style/CheckBox.Dark"
+            android:layout_alignParentLeft="true"
+            android:id="@+id/email_box"
+            android:layout_height="wrap_content"
+            android:text="@string/chkbx_email"
+            android:layout_width="wrap_content" />
+
+        <CheckBox
+            android:layout_below="@id/email_box"
+            style="@style/CheckBox.Dark"
+            android:layout_alignParentLeft="true"
+            android:id="@+id/signature_box"
+            android:visibility="visible"
+            android:layout_height="wrap_content"
+            android:text="@string/chkbx_sign_print"
+            android:layout_width="wrap_content" />
+
+    </RelativeLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunpassAmountFragmentDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunpassAmountFragmentDialog.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunpassAmountFragmentDialog.java	(revision )
@@ -1,15 +1,21 @@
 package com.kaching123.tcr.fragment.tendering.pinserve.prepaid.sunpass;
 
+import android.graphics.Color;
 import android.os.Bundle;
 import android.support.v4.app.FragmentActivity;
 import android.text.Editable;
 import android.text.InputFilter;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
 import android.widget.TextView;
 
 import com.kaching123.tcr.R;
 import com.kaching123.tcr.component.CurrencyFormatInputFilter;
 import com.kaching123.tcr.component.CustomEditBox;
 import com.kaching123.tcr.component.KeyboardView;
+import com.kaching123.tcr.component.TelephoneEditNumberCurrencyFormatInputFilter;
 import com.kaching123.tcr.fragment.UiHelper;
 import com.kaching123.tcr.fragment.dialog.DialogUtil;
 import com.kaching123.tcr.fragment.dialog.StyledDialogFragment;
@@ -30,120 +36,181 @@
  *         This class is intended to
  */
 @EFragment
-public class SunpassAmountFragmentDialog extends StyledDialogFragment implements CustomEditBox.IKeyboardSupport {
+public class SunpassAmountFragmentDialog extends StyledDialogFragment implements CustomEditBox.IKeyboardSupport{
 
     private static final String DIALOG_NAME = "SunpassAmountFragmentDialog";
 
     private BigDecimal minAmount = BigDecimal.TEN;
     private BigDecimal maxAmount = new BigDecimal(500);
     private final static BigDecimal FEE_AMOUNT = new BigDecimal(1.5);
+    private final String DollarAmpsand = "$";
 
     protected SunpassAmountFragmentDialogCallback callback;
-    @FragmentArg protected String transactionMode;
-    @FragmentArg protected String cashierId;
-    @FragmentArg protected PrepaidUser user;
-    @FragmentArg protected BalanceResponse response;
-    @FragmentArg protected String accountNumber;
+    @FragmentArg
+    protected String transactionMode;
+    @FragmentArg
+    protected String cashierId;
+    @FragmentArg
+    protected PrepaidUser user;
+    @FragmentArg
+    protected BalanceResponse response;
+    @FragmentArg
+    protected String accountNumber;
+    @FragmentArg
+    protected String mAmount;
 
-    @ViewById protected KeyboardView keyboard;
-    @ViewById protected CustomEditBox charge;
-    @ViewById protected TextView limitation;
+    @ViewById
+    protected KeyboardView keyboard;
+    @ViewById
+    protected CustomEditBox charge;
 
-    @ColorRes(R.color.dlg_text_green) protected int colorOk;
-    @ColorRes(R.color.gray_dark) protected int colorDisabled;
+    @ViewById
+    protected TextView transponderNumber;
+    @ViewById
+    protected TextView lastKnownBalance;
+    @ViewById
+    protected TextView minimumRechargeAmount;
+    @ViewById
+    protected TextView fee;
+    @ViewById
+    protected TextView total;
+    @ViewById
+    protected TextView amount;
+    @ViewById
+    protected CustomEditBox accountNumberEditview;
+    @ViewById
+    protected CustomEditBox accountNumberValidateEditview;
+    @ColorRes(R.color.prepaid_dialog_white)
+    protected int colorOk;
+    @ColorRes(R.color.gray_dark)
+    protected int colorDisabled;
 
     public void setCallback(SunpassAmountFragmentDialogCallback callback) {
         this.callback = callback;
     }
 
-    @AfterViews  protected void init() {
+    @AfterViews
+    protected void init() {
         keyboard.attachEditView(charge);
         setChargeView();
-        enableFinish(false);
+        setAccountNumberEditviewView();
+        setAccountNumberValidateEditviewView();
+        setReviewOrderDetailView();
+        enableFinish(true);
         if (response != null) {
             BigDecimal min = new BigDecimal(response.minimumReplenishmentAmount);
             if (min != null && BigDecimal.ZERO.compareTo(min) < 0) {
                 minAmount = min;
             }
         }
-        limitation.setText(getString(R.string.sunpass_amount_limitation, UiHelper.valueOf(minAmount), UiHelper.valueOf(maxAmount)));
     }
-
     private void setChargeView() {
         charge.setKeyboardSupportConteiner(this);
-        charge.setFilters(new InputFilter[]{new CurrencyFormatInputFilter()});
+        charge.setFilters(new InputFilter[]{new TelephoneEditNumberCurrencyFormatInputFilter()});
         charge.setEditListener(new CustomEditBox.IEditListener() {
 
             @Override
             public boolean onChanged(String text) {
-                return complete();
+                return true;
             }
         });
     }
+    private void setAccountNumberEditviewView() {
+        accountNumberEditview.setKeyboardSupportConteiner(this);
+        accountNumberEditview.setFilters(new InputFilter[]{new TelephoneEditNumberCurrencyFormatInputFilter()});
+        accountNumberEditview.setEditListener(new CustomEditBox.IEditListener() {
 
-    @AfterTextChange protected void chargeAfterTextChanged(Editable s) {
-        if (s == null) {
-            enableFinish(false);
-            return;
+            @Override
+            public boolean onChanged(String text) {
+                return true;
-        }
+            }
-        try {
-            BigDecimal amount = new BigDecimal(s.toString());
-            assert minAmount != null;
-            assert maxAmount != null;
-            if (amount.compareTo(minAmount) >= 0) {
-                if (maxAmount.compareTo(BigDecimal.ZERO) > 0 && amount.compareTo(maxAmount) > 0) {
-                    charge.setText(UiHelper.valueOf(maxAmount));
-                    return;
+        });
-                }
+    }
-                enableFinish(true);
-            } else {
-                enableFinish(false);
+    private void setAccountNumberValidateEditviewView() {
+        accountNumberValidateEditview.setKeyboardSupportConteiner(this);
+        accountNumberValidateEditview.setFilters(new InputFilter[]{new TelephoneEditNumberCurrencyFormatInputFilter()});
+        accountNumberValidateEditview.setEditListener(new CustomEditBox.IEditListener() {
+
+            @Override
+            public boolean onChanged(String text) {
+                return true;
             }
-        } catch (NumberFormatException e) {
-            enableFinish(false);
+        });
-        }
+    }
+    private void setReviewOrderDetailView()
+    {
+        charge.setText(mAmount);
+        transponderNumber.setText(accountNumber);
+        lastKnownBalance.setText(DollarAmpsand + String.valueOf(response.currentBalance));
+        minimumRechargeAmount.setText(DollarAmpsand + String.valueOf(response.minimumReplenishmentAmount));
+        amount.setText(DollarAmpsand + mAmount);
+        fee.setText(DollarAmpsand + FEE_AMOUNT.toString());
+        total.setText(DollarAmpsand + (Double.parseDouble(mAmount) + FEE_AMOUNT.doubleValue()));
+        accountNumberEditview.setEnabled(false);
+        accountNumberEditview.setText(accountNumber);
+        accountNumberValidateEditview.setText(accountNumber);
     }
 
-    @Override public void attachMe2Keyboard(CustomEditBox v) {
-        keyboard.attachEditView(v);
-    }
 
-    @Override public void detachMe4Keyboard(CustomEditBox v) {
-        keyboard.detachEditView();
-    }
 
-    @Override public void onActivityCreated(Bundle savedInstanceState) {
+
+
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
+        getNegativeButton().setTextColor(Color.WHITE);
         getDialog().getWindow().setLayout(
-                getResources().getDimensionPixelOffset(R.dimen.holdon_dlg_width),
+                getResources().getDimensionPixelOffset(R.dimen.prepaid_sunpass_credencial_width),
                 getResources().getDimensionPixelOffset(R.dimen.prepaid_dlg_heigth));
     }
+    @Override protected  int getTitleGravity(){return Gravity.LEFT;};
 
-    @Override protected int getNegativeButtonTitle() {
+    @Override protected  int getSeparatorColor(){return Color.WHITE;}
+
+    @Override protected  int getTitleTextColor(){return Color.WHITE;}
+
+    @Override protected  int getTitleViewBackgroundColor(){return getResources().getColor(R.color.prepaid_dialog_title_background_color); }
+
+    @Override protected  int getButtonsBackgroundColor(){return getResources().getColor(R.color.prepaid_dialog_buttons_background_color); }
+
+    @Override
+    protected int getTitleIcon() {
+        return R.drawable.icon_sun_pass;
+    }
+
+    @Override
+    protected int getNegativeButtonTitle() {
         return R.string.btn_back;
     }
 
-    @Override protected int getPositiveButtonTitle() {
-        return R.string.btn_next;
+    @Override
+    protected int getPositiveButtonTitle() {
+        return R.string.btn_check;
     }
 
-    @Override protected boolean hasNegativeButton() {
+    @Override
+    protected boolean hasNegativeButton() {
         return true;
     }
 
-    @Override protected boolean hasPositiveButton() {
+    @Override
+    protected boolean hasPositiveButton() {
         return true;
     }
 
-    @Override protected int getDialogContentLayout() {
+    @Override
+    protected int getDialogContentLayout() {
         return R.layout.sunpass_amount_fragment;
     }
 
-    @Override protected int getDialogTitle() {
-        return R.string.sunpass_prepaid_dialog_amount_title;
+    @Override
+    protected int getDialogTitle() {
+        return R.string.prepaid_dialog_sunpass_transponder_title;
     }
 
-    @Override protected OnDialogClickListener getPositiveButtonListener() {
+    @Override
+    protected OnDialogClickListener getPositiveButtonListener() {
         return new OnDialogClickListener() {
             @Override
             public boolean onClick() {
@@ -153,7 +220,8 @@
         };
     }
 
-    @Override protected OnDialogClickListener getNegativeButtonListener() {
+    @Override
+    protected OnDialogClickListener getNegativeButtonListener() {
         return new OnDialogClickListener() {
             @Override
             public boolean onClick() {
@@ -165,28 +233,31 @@
 
     protected boolean complete() {
         SunReplenishmentRequest request = new SunReplenishmentRequest();
-        request.mID             = String.valueOf(this.user.getMid());
+        request.mID = String.valueOf(this.user.getMid());
-        request.tID             = String.valueOf(this.user.getTid());
+        request.tID = String.valueOf(this.user.getTid());
-        request.password        = this.user.getPassword();
+        request.password = this.user.getPassword();
-        request.cashier         = this.cashierId;
+        request.cashier = this.cashierId;
-        request.accountNumber   = this.accountNumber;
+        request.accountNumber = this.accountNumber;
+        request.purchaseId = request.accountNumber;
-        request.amount          = new BigDecimal(charge.getText().toString());
+        request.amount = new BigDecimal(charge.getText().toString());
-        request.feeAmount       = FEE_AMOUNT.doubleValue();
+        request.feeAmount = FEE_AMOUNT.doubleValue();
-        request.purchaseId      = response == null ? "0" : this.response.purchaseId;
+        request.purchaseId = response == null ? "0" : this.response.purchaseId;
+//        request.purchaseId = this.accountNumber;
         request.transactionMode = this.transactionMode;
         callback.onComplete(request);
         return true;
     }
 
 
-    public static void show(FragmentActivity context, String accountNumber , String transactionMode,
+    public static void show(FragmentActivity context, String accountNumber, String transactionMode,
-                            String cashierId, PrepaidUser user, BalanceResponse response, SunpassAmountFragmentDialogCallback listener) {
+                            String cashierId, PrepaidUser user, BalanceResponse response, String mAmount, SunpassAmountFragmentDialogCallback listener) {
         SunpassAmountFragmentDialog dialog = SunpassAmountFragmentDialog_.builder()
                 .transactionMode(transactionMode)
                 .cashierId(cashierId)
                 .user(user)
                 .response(response)
                 .accountNumber(accountNumber)
+                .mAmount(mAmount)
                 .build();
         dialog.setCallback(listener);
         DialogUtil.show(context,
@@ -201,7 +272,7 @@
     protected void enableFinish(Boolean enabled) {
         getPositiveButton().setEnabled(enabled);
         getPositiveButton().setTextColor(enabled ? colorOk : colorDisabled);
-        keyboard.setEnterEnabled(enabled);
+        keyboard.setEnabled(false);
     }
 
     public interface SunpassAmountFragmentDialogCallback {
@@ -211,5 +282,15 @@
         public abstract void onError(String message);
 
         public abstract void onComplete(SunReplenishmentRequest response);
+    }
+    @Override
+    public void attachMe2Keyboard(CustomEditBox v) {
+
+        keyboard.attachEditView(v);
+    }
+
+    @Override
+    public void detachMe4Keyboard(CustomEditBox v) {
+        keyboard.detachEditView();
     }
 }
Index: TabletCR/src/main/java/com/kaching123/tcr/component/SunpassCredencialEditNumberCurrencyFormatInputFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/component/SunpassCredencialEditNumberCurrencyFormatInputFilter.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/component/SunpassCredencialEditNumberCurrencyFormatInputFilter.java	(revision )
@@ -0,0 +1,13 @@
+package com.kaching123.tcr.component;
+
+/**
+ * Created by gdubina on 29.11.13.
+ */
+public class SunpassCredencialEditNumberCurrencyFormatInputFilter extends RegexpFormatInputFilter {
+
+    private static final String REGEXP = "^(\\d{0,13})?(\\.[0-9]{0,2})?$";
+
+    public SunpassCredencialEditNumberCurrencyFormatInputFilter() {
+        super(REGEXP);
+    }
+}
Index: TabletCR/src/main/java/com/kaching123/tcr/store/ShopStore.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/store/ShopStore.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/store/ShopStore.java	(revision )
@@ -94,6 +94,9 @@
 
         @Column(type = Column.Type.TEXT)
         String MAXDENOMINATION = "maxDenomination";
+
+        @Column(type = Type.TEXT)
+        String DIALCOUNTRYCODE = "dialCountryCode";
     }
 
     @Table(TopUpTable.TABLE_NAME)
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/component/AccountNumberCurrencyFormatInputFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/component/AccountNumberCurrencyFormatInputFilter.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/component/AccountNumberCurrencyFormatInputFilter.java	(revision )
@@ -0,0 +1,18 @@
+package com.kaching123.tcr.component;
+
+/**
+ * Created by gdubina on 29.11.13.
+ */
+public class AccountNumberCurrencyFormatInputFilter extends RegexpFormatInputFilter {
+
+    private static final String REGEXP = "^(\\d{0,11})?(\\.[0-9]{0,2})?$";
+    private static final String REGAEXP_BEFORE = "^(\\d{";
+    private static final String REGAEXP_MIDDLE = ",";
+    private static final String REGAEXP_AFTER = ")?$";
+
+    public AccountNumberCurrencyFormatInputFilter(String min, String max) {
+        super(REGAEXP_BEFORE + min + REGAEXP_MIDDLE + max + REGAEXP_AFTER);
+    }
+
+
+}
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pax/PayPAXPendingFragmentDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pax/PayPAXPendingFragmentDialog.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pax/PayPAXPendingFragmentDialog.java	(revision 2972)
@@ -1,95 +0,0 @@
-package com.kaching123.tcr.fragment.tendering.pax;
-
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-import android.widget.TextView;
-
-import com.googlecode.androidannotations.annotations.EFragment;
-import com.googlecode.androidannotations.annotations.ViewById;
-import com.kaching123.tcr.Logger;
-import com.kaching123.tcr.R;
-import com.kaching123.tcr.commands.payment.PaymentGateway;
-import com.kaching123.tcr.commands.payment.RESTWebCommand;
-import com.kaching123.tcr.commands.payment.WebCommand;
-import com.kaching123.tcr.commands.payment.WebCommand.ErrorReason;
-import com.kaching123.tcr.commands.payment.blackstone.payment.BlackSaleCommand;
-import com.kaching123.tcr.commands.payment.pax.PaxSaleCommand;
-import com.kaching123.tcr.commands.payment.pax.PaxSaleCommand.PaxSaleCommandBaseCallback;
-import com.kaching123.tcr.fragment.dialog.DialogUtil;
-import com.kaching123.tcr.fragment.tendering.TransactionPendingFragmentDialogBase;
-import com.kaching123.tcr.fragment.tendering.payment.PayTransPendingFragmentDialog_;
-import com.kaching123.tcr.model.payment.blackstone.payment.ResponseBase;
-import com.kaching123.tcr.model.payment.blackstone.payment.User;
-import com.kaching123.tcr.model.payment.blackstone.payment.response.SaleResponse;
-import com.kaching123.tcr.model.payment.general.card.CreditCard;
-import com.kaching123.tcr.model.payment.general.transaction.Transaction;
-import com.telly.groundy.annotations.OnCancel;
-import com.telly.groundy.annotations.OnFailure;
-import com.telly.groundy.annotations.OnSuccess;
-import com.telly.groundy.annotations.Param;
-
-/**
- * @author Ivan v. Rikhmayer
- */
-@EFragment
-public class PayPAXPendingFragmentDialog extends TransactionPendingFragmentDialogBase<PayPAXPendingFragmentDialog, SaleResponse> {
-
-    @ViewById
-    protected TextView message;
-
-    protected IPaxSaleProgressListener listener;
-
-    public PayPAXPendingFragmentDialog setListener(IPaxSaleProgressListener listener) {
-        this.listener = listener;
-        return this;
-    }
-
-    private static final String DIALOG_NAME = "PayPAXPendingFragmentDialog";
-
-    @Override
-    public void onActivityCreated(Bundle savedInstanceState) {
-        super.onActivityCreated(savedInstanceState);
-        setCancelable(false);
-        message.setSingleLine(false);
-        message.setText(R.string.pax_instructions);
-    }
-
-    @Override
-    protected void doCommand() {
-        transaction.getGateway().gateway().sale(getActivity(), new PaxSaleCommandBaseCallback() {
-
-            @Override
-            protected void handleSuccess(Transaction result, String errorReason) {
-                listener.onComplete(result, errorReason);
-            }
-
-            @Override
-            protected void handleError() {
-                tryComplete(transaction, null, WebCommand.ErrorReason.UNKNOWN);
-            }
-        }, null, null, transaction);
-    }
-
-    public interface IPaxSaleProgressListener {
-
-        void onComplete(Transaction transaction, String errorReason);
-
-        void onCancel();
-    }
-
-    @Override
-    protected int getDialogTitle() {
-        return R.string.blackstone_pay_wait_title;
-    }
-
-    public static void show(FragmentActivity context,
-                            final Transaction transaction,
-                            IPaxSaleProgressListener listener) {
-        DialogUtil.show(context, DIALOG_NAME, PayPAXPendingFragmentDialog_.builder().build())
-                .setListener(listener).setTransaction(transaction);
-    }
-
-    public static void hide(FragmentActivity activity) {
-        DialogUtil.hide(activity, DIALOG_NAME);
-    }
-}
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pax/BalancePAXPendingFragmentDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pax/BalancePAXPendingFragmentDialog.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pax/BalancePAXPendingFragmentDialog.java	(revision 2972)
@@ -1,85 +0,0 @@
-package com.kaching123.tcr.fragment.tendering.pax;
-
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-import android.widget.TextView;
-
-import com.googlecode.androidannotations.annotations.EFragment;
-import com.googlecode.androidannotations.annotations.ViewById;
-import com.kaching123.tcr.R;
-import com.kaching123.tcr.commands.payment.WebCommand.ErrorReason;
-import com.kaching123.tcr.commands.payment.pax.PaxBalanceCommand;
-import com.kaching123.tcr.commands.payment.pax.PaxBalanceCommand.PaxBalanceCommandBaseCallback;
-import com.kaching123.tcr.commands.payment.pax.PaxSaleCommand.PaxSaleCommandBaseCallback;
-import com.kaching123.tcr.fragment.dialog.DialogUtil;
-import com.kaching123.tcr.fragment.tendering.TransactionPendingFragmentDialogBase;
-import com.kaching123.tcr.model.PaxModel;
-import com.kaching123.tcr.model.payment.blackstone.payment.response.SaleResponse;
-import com.kaching123.tcr.model.payment.general.transaction.Transaction;
-
-import java.math.BigDecimal;
-
-/**
- * @author Ivan v. Rikhmayer
- */
-@EFragment
-public class BalancePAXPendingFragmentDialog extends TransactionPendingFragmentDialogBase<BalancePAXPendingFragmentDialog, SaleResponse> {
-
-    private static final String DIALOG_NAME = "IBalanceSaleProgressListener";
-
-    @ViewById
-    protected TextView message;
-
-    protected IBalanceSaleProgressListener listener;
-
-    public BalancePAXPendingFragmentDialog setListener(IBalanceSaleProgressListener listener) {
-        this.listener = listener;
-        return this;
-    }
-
-    @Override
-    public void onActivityCreated(Bundle savedInstanceState) {
-        super.onActivityCreated(savedInstanceState);
-        setCancelable(false);
-        message.setSingleLine(false);
-        message.setText(R.string.pax_balance_instructions);
-    }
-
-    @Override
-    protected void doCommand() {
-        PaxBalanceCommand.startBalanceRequest(getActivity(), PaxModel.get(), new PaxBalanceCommandBaseCallback() {
-
-            @Override
-            protected void handleSuccess(BigDecimal result, String last4, String errorReason) {
-                listener.onComplete(result, last4, errorReason);
-
-            }
-
-            @Override
-            protected void handleError() {
-                listener.onCancel();
-            }
-        });
-    }
-
-    public interface IBalanceSaleProgressListener {
-
-        void onComplete(BigDecimal balance, String last4, String errorReason);
-
-        void onCancel();
-    }
-
-    @Override
-    protected int getDialogTitle() {
-        return R.string.blackstone_pay_wait_title;
-    }
-
-    public static void show(FragmentActivity context,
-                            IBalanceSaleProgressListener listener) {
-        DialogUtil.show(context, DIALOG_NAME, BalancePAXPendingFragmentDialog_.builder().build()).setListener(listener);
-    }
-
-    public static void hide(FragmentActivity activity) {
-        DialogUtil.hide(activity, DIALOG_NAME);
-    }
-}
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/model/payment/blackstone/prepaid/wireless/SunpassType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/model/payment/blackstone/prepaid/wireless/SunpassType.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/model/payment/blackstone/prepaid/wireless/SunpassType.java	(revision )
@@ -0,0 +1,25 @@
+package com.kaching123.tcr.model.payment.blackstone.prepaid.wireless;
+
+
+public enum SunpassType {
+    SUNPASS_PAY_YOUR_DOCUMENT("SUNPASS PAY_YOUR_DOCUMENT"),
+    SUNPASS_TRANSPONDER("SUNPASS TRANSPONDER");
+    private String name;
+
+    SunpassType(String name) {
+        this.name = name;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public static SunpassType fromString(String name) {
+        if (SUNPASS_PAY_YOUR_DOCUMENT.name.equals(name)) {
+            return SUNPASS_PAY_YOUR_DOCUMENT;
+        } else if (SUNPASS_TRANSPONDER.name.equals(name)) {
+            return SUNPASS_TRANSPONDER;
+        } else return null;
+    }
+
+}
Index: TabletCR/src/main/res/layout/sunpass_pay_your_document_credentials_fragment.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/sunpass_pay_your_document_credentials_fragment.xml	(revision )
+++ TabletCR/src/main/res/layout/sunpass_pay_your_document_credentials_fragment.xml	(revision )
@@ -0,0 +1,116 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_height="fill_parent"
+    android:background="@color/prepaid_dialog_buttons_background_color"
+
+    android:layout_width="fill_parent">
+
+    <TableLayout
+        android:id="@+id/tableview"
+        android:layout_height="wrap_content"
+        android:padding="20dp"
+        android:layout_width="500dp">
+
+
+        <TableRow
+            android:id="@+id/tablerow1"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
+
+            <EditText
+                style="@style/StyledDialog.Content.EditText"
+                android:textColorHint="@color/prepaid_dialog_white"
+                android:hint="@string/sunpass_pyd_credential_document_num_hint"
+                android:id="@+id/document_number"
+                android:textColor="@color/prepaid_dialog_white"
+                android:layout_width="0dp"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:gravity="left"
+                android:textSize="@dimen/prepaid_label_text_size"
+                android:inputType="number" />
+
+        </TableRow>
+
+        <TableRow
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
+
+            <TextView
+                android:id="@+id/review_order_detail"
+                android:layout_below="@id/tablerow1"
+                android:layout_marginLeft="11dp"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textSize="20sp"
+                android:text="@string/sunpass_pyd_credential_document_num_note"
+                android:textColor="@color/prepaid_dialog_white" />
+        </TableRow>
+
+        <TableRow
+            android:id="@+id/tablerow2"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:layout_marginTop="20dp"
+            android:gravity="center_vertical">
+
+            <EditText
+                style="@style/StyledDialog.Content.EditText"
+                android:hint="@string/sunpass_pyd_credential_plate_num_hint"
+                android:textColorHint="@color/prepaid_dialog_white"
+                android:id="@+id/plate_number"
+                android:layout_width="0dp"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
+                android:textColor="@color/prepaid_dialog_white"
+                android:layout_weight="1"
+                android:gravity="left"
+                android:textSize="@dimen/prepaid_label_text_size"
+                />
+
+        </TableRow>
+        <TableRow
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
+
+            <TextView
+                android:id="@+id/review_order_detail"
+                android:layout_below="@id/tablerow2"
+                android:layout_marginLeft="11dp"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textSize="20sp"
+                android:text="@string/sunpass_pyd_credential_plate_num_note"
+                android:textColor="@color/prepaid_dialog_white" />
+        </TableRow>
+
+    </TableLayout>
+
+    <TextView
+        android:visibility="gone"
+        android:id="@+id/error"
+        android:layout_marginLeft="35dp"
+        android:layout_marginTop="20dp"
+        style="@style/Sunpass.CredentialErrorText"
+        android:layout_below="@+id/tableview"
+        android:layout_alignLeft="@+id/keyboard"
+        android:textColor="@android:color/black"
+        android:textSize="@dimen/prepaid_label_text_size"
+        android:text="@string/sunpass_credential_error" />
+
+    <TextView
+        android:visibility="gone"
+        android:layout_marginLeft="35dp"
+        android:id="@+id/error_content"
+        style="@style/Sunpass.CredentialErrorText"
+        android:layout_below="@+id/error"
+        android:layout_alignLeft="@+id/keyboard"
+        android:textColor="@color/prepaid_dialog_buttons_background_color"
+        android:text="@string/sunpass_credential_error_content" />
+
+</RelativeLayout>
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/processor/SunpassProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/processor/SunpassProcessor.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/processor/SunpassProcessor.java	(revision )
@@ -12,17 +12,26 @@
 import com.kaching123.tcr.fragment.tendering.payment.INotificationConfirmListener;
 import com.kaching123.tcr.fragment.tendering.payment.PayNotificationFragmentDialog;
 import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.sunpass.SunCredentialsFragmentDialog;
+import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.sunpass.SunPassChoiceDialog;
+import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.sunpass.SunPayYourDocumentCredentialsFragmentDialog;
 import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.sunpass.SunpassAmountFragmentDialog;
 import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.sunpass.SunpassAmountFragmentDialog.SunpassAmountFragmentDialogCallback;
 import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.sunpass.SunpassBillingFragmentDialog;
 import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.sunpass.SunpassBillingFragmentDialog.SunpassBillingFragmentDialogCallback;
+import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.sunpass.SunpassPayYourDocumentAmountFragmentDialog;
+import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless.PrepaidPrintTypeModel;
 import com.kaching123.tcr.model.BillPaymentDescriptionModel.PrepaidType;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.IPrePaidInfo;
 import com.kaching123.tcr.model.PaymentTransactionModel;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.PrepaidUser;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.SunpassInfo;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request.SunPassDocumentPaymentRequest;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request.SunReplenishmentRequest;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.SunpassType;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.WirelessType;
 import com.kaching123.tcr.websvc.api.prepaid.BalanceResponse;
+import com.kaching123.tcr.websvc.api.prepaid.DocumentInquiryResponse;
+import com.kaching123.tcr.websvc.api.prepaid.DocumentPaymentResponse;
 import com.kaching123.tcr.websvc.api.prepaid.ReplenishmentResponse;
 
 import java.util.ArrayList;
@@ -32,18 +41,19 @@
  */
 public class SunpassProcessor {
 
-    private SubProcessorCallback callback;
+    private PrepaidProcessorCallback callback;
     private String transactionMode;
     private String cashierId;
     private PrepaidUser user;
     private String orderGuid;
     private ArrayList<PaymentTransactionModel> transactions;
 
+    private SunpassType type;
     public static SunpassProcessor create(PrepaidUser user, String transactionMode, String cashierId) {
         return new SunpassProcessor(user, transactionMode, cashierId);
     }
 
-    public SunpassProcessor callback(SubProcessorCallback callback) {
+    public SunpassProcessor callback(PrepaidProcessorCallback callback) {
         this.callback = callback;
         return this;
     }
@@ -59,36 +69,131 @@
     }
 
     protected void proceedToSunpass(final FragmentActivity context) {
+        SunPassChoiceDialog.show(context, new SunPassChoiceDialog.SunPassChoiceCallback() {
+            @Override
+            public void onTrensponder(FragmentActivity context) {
+                hide();
+                type = SunpassType.SUNPASS_TRANSPONDER;
+                SunPass_setOnTransponder(context);
+
+            }
+
+            @Override
+            public void onPayYourDocument(FragmentActivity context) {
+                hide();
+                type = SunpassType.SUNPASS_PAY_YOUR_DOCUMENT;
+                SunPass_setOnPayYourDocument(context);
+            }
+
+            @Override
+            public void cancel() {
+                hide();
+                callback.onCancel(context);
+            }
+
+            private void hide() {
+                SunPassChoiceDialog.hide(context);
+            }
+        });
+    }
+
+    private void SunPass_setOnPayYourDocument(final FragmentActivity context) {
+        SunPayYourDocumentCredentialsFragmentDialog.show(context, cashierId, user, transactionMode,
+                new SunPayYourDocumentCredentialsFragmentDialog.SunDocumentCredentialsFragmentDialogCallback() {
+                    @Override
+                    public void onCancel() {
+                        hide();
+                        callback.onCancel(context);
+                    }
+
+                    @Override
+                    public void onError(String message) {
+                        hide();
+                        Toast.makeText(context, message, Toast.LENGTH_LONG).show();
+                        callback.onCancel(context);
+                    }
+
+                    @Override
+                    public void onComplete(String accountNumber, DocumentInquiryResponse response, String licensePlateNumber) {
+                        hide();
+                      proceedToPayYourDocumentAmountInput(context, response, accountNumber, licensePlateNumber);
+                    }
+
+                    private void hide() {
+                        SunCredentialsFragmentDialog.hide(context);
+                    }
+                }
+        );
+    }
+    private void SunPass_setOnTransponder(final FragmentActivity context) {
         SunCredentialsFragmentDialog.show(context, cashierId, user, transactionMode,
                 new SunCredentialsFragmentDialog.SunCredentialsFragmentDialogCallback() {
-            @Override
-            public void onCancel() {
-                hide();
-                callback.onCancel(context);
-            }
+                    @Override
+                    public void onCancel() {
+                        hide();
+                        callback.onCancel(context);
+                    }
 
-            @Override
-            public void onError(String message) {
-                hide();
-                Toast.makeText(context, message, Toast.LENGTH_LONG).show();
-                callback.onCancel(context);
-            }
+                    @Override
+                    public void onError(String message) {
+                        hide();
+                        Toast.makeText(context, message, Toast.LENGTH_LONG).show();
+                        callback.onCancel(context);
+                    }
 
-            @Override
+                    @Override
-            public void onComplete(String accountNumber, BalanceResponse response) {
+                    public void onComplete(String accountNumber, BalanceResponse response, String amount) {
-                hide();
+                        hide();
-                proceedToAmountInput(context, response, accountNumber);
+                        proceedToAmountInput(context, response, accountNumber, amount);
-            }
+                    }
 
-            private void hide() {
-                SunCredentialsFragmentDialog.hide(context);
-            }
+                    private void hide() {
+                        SunCredentialsFragmentDialog.hide(context);
+                    }
+                }
+        );
+    }
+    private void proceedToPayYourDocumentAmountInput(final FragmentActivity context, final DocumentInquiryResponse response, String accountNumber, String licensePlateNumber) {
+        SunpassPayYourDocumentAmountFragmentDialog.show(context, accountNumber, transactionMode,
+                cashierId, user, response,licensePlateNumber, new SunpassPayYourDocumentAmountFragmentDialog.SunpassPayYourDocumentAmountFragmentDialogCallback() {
+                    @Override
+                    public void onCancel() {
+                        hide();
+                        callback.onCancel(context);
+                    }
+
+                    @Override
+                    public void onError(String message) {
+                        hide();
+                        Toast.makeText(context, message, Toast.LENGTH_LONG).show();
+                        callback.onCancel(context);
+                    }
+
+                    @Override
+                    public void onComplete(final SunPassDocumentPaymentRequest request) {
+                        hide();
+                        callback.onPaymentRequested(context, request.amount, context.getString(R.string.sunpass_prepaid_item_description), PrepaidType.SUNPASS, new SubProcessorDelegate() {
+
+                            @Override
+                            public void onComplete(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions, long prepaidOrderId) {
+                                SunpassProcessor.this.orderGuid = orderGuid;
+                                SunpassProcessor.this.transactions = transactions;
+                                request.setOrderId(prepaidOrderId);
+                                proceedToBilling(context, request, response, prepaidOrderId);
+                            }
-        });
-    }
+                        });
+                    }
 
-    private void proceedToAmountInput(final FragmentActivity context, final BalanceResponse response, String accountNumber) {
+
+                    private void hide() {
+                        SunpassAmountFragmentDialog.hide(context);
+                    }
+                }
+        );
+    }
+    private void proceedToAmountInput(final FragmentActivity context, final BalanceResponse response, String accountNumber, String amount) {
         SunpassAmountFragmentDialog.show(context, accountNumber, transactionMode,
-                cashierId, user, response, new SunpassAmountFragmentDialogCallback() {
+                cashierId, user, response, amount, new SunpassAmountFragmentDialogCallback() {
             @Override
             public void onCancel() {
                 hide();
@@ -124,7 +229,7 @@
     }
 
     protected void proceedToBilling(final FragmentActivity context, final SunReplenishmentRequest request, final BalanceResponse response, final long prepaidOrderId) {
-        SunpassBillingFragmentDialog.show(context, request, new SunpassBillingFragmentDialogCallback() {
+        SunpassBillingFragmentDialog.show(context, request, type, new SunpassBillingFragmentDialogCallback() {
 
             @Override
             public void onError(String message) {
@@ -146,18 +251,29 @@
             }
 
             @Override
-            public void onComplete(ReplenishmentResponse response) {
+            public void onComplete(ReplenishmentResponse response, BalanceResponse balanceResponse) {
                 hide();
 
                 IPrePaidInfo info = new SunpassInfo(request.accountNumber, request.purchaseId, response.referenceNumber);
                 IPrePaidInfo info2 = new SunpassInfo();
-                callback.onPrintRequested(context, orderGuid, transactions, info);
+
+//                callback.onPrintRequested(context, orderGuid, transactions, info);
+                callback.onSunPassPrintRequested(context, orderGuid, transactions, info, request, type,balanceResponse);
             }
 
+            @Override
+            public void onComplete(DocumentPaymentResponse result, BalanceResponse balanceResponse) {
+                IPrePaidInfo info = new SunpassInfo(request.accountNumber, request.purchaseId, response.referenceNumber);
+                IPrePaidInfo info2 = new SunpassInfo();
+
+//                callback.onPrintRequested(context, orderGuid, transactions, info);
+                callback.onSunPassPrintRequested(context, orderGuid, transactions, info, request, type,balanceResponse);
+            }
+
             private void hide() {
                 SunpassBillingFragmentDialog.hide(context);
             }
-        });
+        },response);
     }
 
     private void proceedToNotification(final FragmentActivity context,
Index: TabletCR/src/main/res/layout/prepaid_category_fragment.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/prepaid_category_fragment.xml	(revision 2972)
+++ TabletCR/src/main/res/layout/prepaid_category_fragment.xml	(revision )
@@ -1,16 +1,19 @@
 <?xml version="1.0" encoding="utf-8"?>
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-                android:layout_height="fill_parent"
-                android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:layout_width="fill_parent"
+    android:background="@color/prepaid_dialog_buttons_background_color"
-                android:padding="16dp">
+    android:padding="16dp">
 
     <Spinner
         style="@style/StyledDialog.Content.Spinner"
         android:id="@+id/category"
         android:layout_height="wrap_content"
         android:layout_width="fill_parent"
-        android:layout_marginTop="10dp"
+        android:layout_marginTop="13dp"
         android:paddingBottom="10dp"
+        android:scrollbarSize="5dp"
+        android:scrollbarAlwaysDrawVerticalTrack="true"
         android:layout_toLeftOf="@id/keyboard"/>
 
     <Spinner
@@ -19,42 +22,174 @@
         android:layout_below="@id/category"
         android:layout_height="wrap_content"
         android:layout_width="fill_parent"
+        android:layout_marginTop="5dp"
         android:paddingBottom="10dp"
         android:layout_toLeftOf="@id/keyboard"/>
-
-    <Spinner
-        style="@style/StyledDialog.Content.Spinner"
-        android:id="@+id/options"
-        android:layout_below="@id/biller"
+    <LinearLayout
+        android:visibility="gone"
+        android:id="@+id/linearlayout1"
+        android:layout_width="fill_parent"
         android:layout_height="wrap_content"
+        android:layout_below="@+id/biller"
+        android:layout_alignLeft="@+id/biller"
+        android:orientation="vertical"
+        android:layout_toLeftOf="@id/keyboard">
+
+        <LinearLayout
+            android:layout_marginLeft="5dp"
-        android:layout_width="fill_parent"
+            android:layout_width="fill_parent"
-        android:layout_marginTop="5dp"
-        android:paddingBottom="10dp"
-        android:layout_toLeftOf="@id/keyboard"/>
+            android:layout_height="wrap_content">
 
-    <TextView
+            <TextView
-        style="@style/PaymentItem.Grayed"
-        android:id="@+id/limitation"
-        android:gravity="left"
+                android:layout_weight="1"
+                android:layout_width="1dp"
+                android:textSize="@dimen/prepaid_label_text_size"
-        android:layout_height="wrap_content"
+                android:layout_height="wrap_content"
-        android:layout_width="wrap_content"
-        android:layout_alignLeft="@id/keyboard"
-        android:layout_alignRight="@id/keyboard"
-        android:paddingLeft="12dp"/>
+                android:textColor="@color/prepaid_dialog_white"
+                android:text="@string/bill_pauments_fee"/>
 
+            <TextView
+                android:layout_weight="2"
+                android:layout_width="1dp"
+                android:textColor="@color/prepaid_dialog_white"
+                android:textSize="@dimen/prepaid_label_text_size"
+                android:layout_height="wrap_content"
+                android:text="@string/bill_pauments_type"/>
+
+            <TextView
+                android:layout_weight="3"
+                android:layout_width="1dp"
+                android:textColor="@color/prepaid_dialog_white"
+                android:textSize="@dimen/prepaid_label_text_size"
+                android:layout_height="wrap_content"
+                android:text="@string/bill_pauments_description"/>
+            </LinearLayout>
+    <LinearLayout
+        android:padding="4dp"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:background="@color/prepaid_dialog_white">
+        <ListView
+            android:id="@+id/listview"
+            android:dividerHeight="1dp"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:divider="@color/prepaid_dialog_buttons_background_color">
+            </ListView>
+        </LinearLayout>
+
+        <TableLayout
+            android:id="@+id/tableview"
+            android:layout_height="wrap_content"
+            android:layout_width="fill_parent">
+
+
+            <TableRow
+                android:layout_marginTop="10dp"
+                android:layout_width="fill_parent"
+                android:layout_height="fill_parent"
+                android:gravity="center_vertical">
+
-    <com.kaching123.tcr.component.CustomEditBox
+                <com.kaching123.tcr.component.CustomEditBox
-        android:id="@+id/charge"
-        style="@style/CustomEditBox.PaymentInputField"
+                    style="@style/CustomEditBox.PaymentInputField"
-        android:layout_alignLeft="@id/keyboard"
-        android:layout_alignRight="@id/keyboard"
-        android:layout_marginTop="-8dp"
-        android:layout_below="@id/limitation"
+                    android:textColorHint="@color/prepaid_dialog_white"
+                    android:hint="@string/prepaid_dialog_credentials_1"
+                    android:id="@+id/account_number"
+                    android:textColor="@color/prepaid_dialog_white"
+                    android:layout_width="0dp"
+                    android:singleLine="true"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
-        android:gravity="left"
+                    android:gravity="left"
-        android:hint="@string/prepaid_dialog_custom_amount_hint"
-        android:textSize="@dimen/prepaid_label_text_size"
+                    android:textSize="@dimen/prepaid_label_text_size"
+                    />
+
+            </TableRow>
+
+
+            <TableRow
+                android:layout_width="fill_parent"
+                android:layout_height="fill_parent"
+                android:layout_marginTop="10dp"
+                android:gravity="center_vertical">
+
+                <com.kaching123.tcr.component.CustomEditBox
+                    style="@style/CustomEditBox.PaymentInputField"
+                    android:hint="@string/prepaid_dialog_credentials_1_valiadte"
+                    android:textColorHint="@color/prepaid_dialog_white"
+                    android:id="@+id/account_number_validate"
+                    android:layout_width="0dp"
+                    android:singleLine="true"
-        android:layout_height="wrap_content"
+                    android:layout_height="wrap_content"
-        android:layout_width="fill_parent"/>
+                    android:textColor="@color/prepaid_dialog_white"
+                    android:layout_weight="1"
+                    android:gravity="left"
+                    android:textSize="@dimen/prepaid_label_text_size"
+                     />
 
+            </TableRow>
+
+            <TableRow
+                android:layout_width="fill_parent"
+                android:layout_height="fill_parent"
+                android:layout_marginTop="10dp"
+                android:gravity="center_vertical">
+
+                <com.kaching123.tcr.component.CustomEditBox
+                    style="@style/CustomEditBox.PaymentInputField"
+                    android:textColorHint="@color/prepaid_dialog_white"
+                    android:id="@+id/charge"
+                    android:layout_width="0dp"
+                    android:singleLine="true"
+                    android:layout_height="wrap_content"
+                    android:textColor="@color/prepaid_dialog_white"
+                    android:layout_weight="1"
+                    android:gravity="left"
+                    android:textSize="@dimen/prepaid_label_text_size"
+                    />
+
+            </TableRow>
+
+        </TableLayout>
+
+        </LinearLayout>
+
+
+    <!--<Spinner-->
+        <!--style="@style/StyledDialog.Content.Spinner"-->
+        <!--android:id="@+id/options"-->
+        <!--android:layout_below="@id/biller"-->
+        <!--android:layout_height="wrap_content"-->
+        <!--android:layout_width="fill_parent"-->
+        <!--android:layout_marginTop="5dp"-->
+        <!--android:paddingBottom="10dp"-->
+        <!--android:layout_toLeftOf="@id/keyboard"/>-->
+
+
+
+    <!--<TextView-->
+        <!--style="@style/PaymentItem.Grayed"-->
+        <!--android:id="@+id/limitation"-->
+        <!--android:gravity="left"-->
+        <!--android:layout_height="wrap_content"-->
+        <!--android:layout_width="wrap_content"-->
+        <!--android:layout_alignLeft="@id/keyboard"-->
+        <!--android:layout_alignRight="@id/keyboard"-->
+        <!--android:paddingLeft="12dp"/>-->
+
+    <!--<com.kaching123.tcr.component.CustomEditBox-->
+        <!--android:id="@+id/charge"-->
+        <!--style="@style/CustomEditBox.PaymentInputField"-->
+        <!--android:layout_alignLeft="@id/keyboard"-->
+        <!--android:layout_alignRight="@id/keyboard"-->
+        <!--android:layout_marginTop="-8dp"-->
+        <!--android:layout_below="@id/limitation"-->
+        <!--android:gravity="left"-->
+        <!--android:hint="@string/prepaid_dialog_custom_amount_hint"-->s
+        <!--android:textSize="@dimen/prepaid_label_text_size"-->
+        <!--android:layout_height="wrap_content"-->
+        <!--android:layout_width="fill_parent"/>-->
+
     <com.kaching123.tcr.component.KeyboardView_
         android:layout_height="wrap_content"
         android:layout_width="wrap_content"
@@ -63,5 +198,87 @@
         android:id="@+id/keyboard"
         android:layout_marginLeft="16dp"
         android:layout_marginTop="8dp"/>
+    <LinearLayout
+        android:visibility="gone"
+        android:id="@+id/linearlayout2"
+        android:layout_below="@+id/keyboard"
+        android:layout_alignLeft="@+id/keyboard"
+        android:layout_width="500dp"
+        android:layout_height="wrap_content"
+        android:orientation="vertical">
+
+        <LinearLayout
+            android:id="@+id/linearlayout4"
+            android:layout_marginTop="20dp"
+            android:layout_width="300dp"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+            <TextView
+                android:textSize="20sp"
+                android:layout_width="200dp"
+                android:layout_height="wrap_content"
+                android:text="@string/sunpass_credential_amount"
+                android:textColor="@color/prepaid_dialog_white" />
+
+            <TextView
+                android:textSize="20sp"
+                android:id="@+id/amount_textview"
+                android:layout_width="100dp"
+                android:layout_height="wrap_content"
+                android:textColor="@color/prepaid_dialog_white" />
+
+        </LinearLayout>
+
+
+        <LinearLayout
+            android:id="@+id/linearlayout5"
+            android:layout_marginTop="5dp"
+            android:layout_width="300dp"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+            <TextView
+                android:textSize="20sp"
+                android:layout_width="200dp"
+                android:layout_height="wrap_content"
+                android:text="@string/sunpass_credential_fees"
+                android:textColor="@color/prepaid_dialog_white" />
+
+            <TextView
+                android:textSize="20sp"
+                android:id="@+id/fee_textview"
+                android:layout_width="100dp"
+                android:layout_height="wrap_content"
+                android:textColor="@color/prepaid_dialog_white" />
+
+        </LinearLayout>
+
+        <LinearLayout
+            android:id="@+id/linearlayout6"
+            android:layout_marginTop="5dp"
+            android:layout_width="300dp"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+            <TextView
+                android:textSize="20sp"
+                android:layout_width="200dp"
+                android:layout_height="wrap_content"
+                android:text="@string/sunpass_credential_tatal"
+                android:textColor="@color/prepaid_dialog_white" />
+
+            <TextView
+                android:textSize="20sp"
+                android:id="@+id/total_textview"
+                android:layout_width="100dp"
+                android:layout_height="wrap_content"
+                android:textColor="@color/prepaid_dialog_white" />
+
+        </LinearLayout>
+
+
+        </LinearLayout>
+
 
 </RelativeLayout>
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/model/payment/blackstone/prepaid/sunpass/request/SunPassDocumentInquiryRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/model/payment/blackstone/prepaid/sunpass/request/SunPassDocumentInquiryRequest.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/model/payment/blackstone/prepaid/sunpass/request/SunPassDocumentInquiryRequest.java	(revision )
@@ -0,0 +1,34 @@
+package com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request;
+
+import com.kaching123.tcr.model.payment.blackstone.prepaid.RequestBase;
+
+import java.io.Serializable;
+
+/**
+ * @author Ivan v. Rikhmayer
+ *         This class is intended to
+ */
+public class SunPassDocumentInquiryRequest extends RequestBase implements Serializable {
+    public String mID;
+    public String tID;
+    public String password;
+    public String cashier;
+    public String accountNumber;
+    public String licensePlateNumber;
+    public long transactionId;
+    public String transactionMode;
+
+    @Override
+    public String toString() {
+        return "SunPassDocumentInquiryRequest{" +
+                "mID='" + mID + '\'' +
+                ", tID='" + tID + '\'' +
+                ", password='" + password + '\'' +
+                ", cashier='" + cashier + '\'' +
+                ", accountNumber='" + accountNumber + '\'' +
+                ", licensePlateNumber ='"+licensePlateNumber + '\'' +
+                ", transactionId=" + transactionId +
+                ", transactionMode='" + transactionMode + '\'' +
+                '}';
+    }
+}
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunPayYourDocumentCredentialsFragmentDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunPayYourDocumentCredentialsFragmentDialog.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunPayYourDocumentCredentialsFragmentDialog.java	(revision )
@@ -0,0 +1,297 @@
+package com.kaching123.tcr.fragment.tendering.pinserve.prepaid.sunpass;
+
+import android.graphics.Color;
+import android.graphics.Typeface;
+import android.os.Bundle;
+import android.support.v4.app.FragmentActivity;
+import android.text.Editable;
+import android.text.InputFilter;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.ArrayAdapter;
+import android.widget.EditText;
+import android.widget.TextView;
+
+
+import com.googlecode.androidannotations.annotations.AfterTextChange;
+import com.googlecode.androidannotations.annotations.AfterViews;
+import com.googlecode.androidannotations.annotations.EFragment;
+import com.googlecode.androidannotations.annotations.FragmentArg;
+import com.googlecode.androidannotations.annotations.ViewById;
+import com.googlecode.androidannotations.annotations.res.ColorRes;
+import com.kaching123.tcr.R;
+import com.kaching123.tcr.commands.payment.blackstone.prepaid.sunpass.GetSunPassDocumentInquiryCommand;
+import com.kaching123.tcr.component.DocumentNumberCurrencyFormatInputFilter;
+import com.kaching123.tcr.component.LicensePlateNumberCurrencyFormatInputFilter;
+import com.kaching123.tcr.fragment.dialog.DialogUtil;
+import com.kaching123.tcr.fragment.dialog.StyledDialogFragment;
+import com.kaching123.tcr.fragment.dialog.WaitDialogFragment;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.PrepaidUser;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request.SunPassDocumentInquiryRequest;
+import com.kaching123.tcr.processor.PrepaidProcessor;
+import com.kaching123.tcr.websvc.api.prepaid.BalanceResponse;
+import com.kaching123.tcr.websvc.api.prepaid.DocumentInquiryResponse;
+import com.telly.groundy.annotations.OnFailure;
+import com.telly.groundy.annotations.OnSuccess;
+import com.telly.groundy.annotations.Param;
+
+import java.math.BigDecimal;
+
+/**
+ * @author Ivan v. Rikhmayer
+ *         This class is intended to
+ */
+@EFragment
+public class SunPayYourDocumentCredentialsFragmentDialog extends StyledDialogFragment {
+
+    private static final String DIALOG_NAME = "SunCredentialsFragmentDialog";
+    private static final String Y = "Y";
+    private BigDecimal minAmount = BigDecimal.TEN;
+    private BigDecimal maxAmount = new BigDecimal(500);
+    private final static BigDecimal FEE_AMOUNT = new BigDecimal(1.5);
+    private BalanceResponse response;
+    @FragmentArg
+    protected String cashierId;
+    @FragmentArg
+    protected PrepaidUser user;
+    @FragmentArg
+    protected String transactionMode;
+
+    protected SunDocumentCredentialsFragmentDialogCallback callback;
+    private ArrayAdapter<String> billerAdapter;
+    private String chosenBiller;
+    private final String BILLER_DEFAULT = "Select Amount";
+    final int DEFAULT_ITEM_POSITION = 0;
+    private final String DollarAmpsand = "$";
+    private boolean isError;
+    private String responseDescription;
+    private String dNumber;
+    private String lpNumber;
+    @ViewById
+    protected EditText documentNumber;
+    @ViewById
+    protected EditText plateNumber;
+    @ViewById
+    protected TextView error;
+    @ViewById
+    protected TextView errorContent;
+    @ColorRes(R.color.prepaid_dialog_white)
+    protected int colorOk;
+    @ColorRes(R.color.gray_dark)
+    protected int colorDisabled;
+    public void setCallback(SunDocumentCredentialsFragmentDialogCallback callback) {
+        this.callback = callback;
+    }
+
+    @AfterViews
+    protected void init() {
+        enableFinish(false);
+        documentNumber.setFilters(new InputFilter[]{new DocumentNumberCurrencyFormatInputFilter()});
+        plateNumber.setFilters(new InputFilter[]{new LicensePlateNumberCurrencyFormatInputFilter()});
+    }
+
+    @AfterTextChange
+    protected void documentNumberAfterTextChanged(Editable s) {
+        dNumber = s.toString();
+        InvisibleErrorView();
+        refresh();
+    }
+
+    @AfterTextChange
+    protected void plateNumberAfterTextChanged(Editable s) {
+        lpNumber = s.toString();
+        InvisibleErrorView();
+        refresh();
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        getNegativeButton().setTextColor(Color.WHITE);
+        getNegativeButton().setTextSize(25);
+        getNegativeButton().setTypeface(Typeface.DEFAULT_BOLD);
+        getPositiveButton().setTypeface(Typeface.DEFAULT_BOLD);
+        getPositiveButton().setTextSize(25);
+        getDialog().getWindow().setLayout(
+                getResources().getDimensionPixelOffset(R.dimen.prepaid_sunpass_credencial_width),
+                getResources().getDimensionPixelOffset(R.dimen.prepaid_dlg_heigth));
+    }
+    @Override
+    protected int getNegativeButtonTitle() {
+        return R.string.btn_back;
+    }
+
+    @Override
+    protected int getPositiveButtonTitle() {
+        return R.string.btn_check;
+    }
+
+    @Override
+    protected boolean hasNegativeButton() {
+        return true;
+    }
+
+    @Override
+    protected boolean hasPositiveButton() {
+        return true;
+    }
+    @Override
+    protected int getTitleIcon() {
+        return R.drawable.icon_sun_pass;
+    }
+
+    @Override
+    protected int getTitleTextColor() {
+        return Color.WHITE;
+    }
+
+    @Override
+    protected int getSeparatorColor() {
+        return Color.WHITE;
+    }
+
+    @Override
+    protected int getTitleViewBackgroundColor() {
+        return getResources().getColor(R.color.prepaid_dialog_title_background_color);
+    }
+
+    @Override
+    protected int getButtonsBackgroundColor() {
+        return getResources().getColor(R.color.prepaid_dialog_buttons_background_color);
+    }
+
+    @Override
+    protected int getTitleGravity() {
+        return Gravity.LEFT;
+    }
+
+    ;
+
+    @Override
+    protected int getDialogContentLayout() {
+        return R.layout.sunpass_pay_your_document_credentials_fragment;
+    }
+
+    @Override
+    protected int getDialogTitle() {
+        return R.string.prepaid_dialog_sunpass_pay_your_document_title;
+    }
+
+    @Override
+    protected OnDialogClickListener getPositiveButtonListener() {
+        return new OnDialogClickListener() {
+            @Override
+            public boolean onClick() {
+                complete();
+                return false;
+            }
+        };
+    }
+
+    @Override
+    protected OnDialogClickListener getNegativeButtonListener() {
+        return new OnDialogClickListener() {
+            @Override
+            public boolean onClick() {
+                callback.onCancel();
+                return false;
+            }
+        };
+    }
+
+    private void refresh() {
+        boolean isValid = isValid();
+        getPositiveButton().setEnabled(isValid);
+        getPositiveButton().setTextColor(isValid ? colorOk : colorDisabled);
+        if(isError)
+            setErrorView();
+    }
+
+    private void setErrorView()
+    {
+        error.setVisibility(View.VISIBLE);
+        errorContent.setText(responseDescription);
+        errorContent.setVisibility(View.VISIBLE);
+        isError = false;
+    }
+
+    private void InvisibleErrorView()
+    {
+        error.setVisibility(View.INVISIBLE);
+        errorContent.setVisibility(View.INVISIBLE);
+    }
+
+    private boolean isValid()
+    {
+        return (!isError&&(dNumber.length() > 0 && plateNumber.length() > 0));
+    }
+
+    protected boolean complete() {
+        WaitDialogFragment.show(getActivity(), "Loading..");
+        getBill();
+        return true;
+    }
+
+    @OnSuccess(GetSunPassDocumentInquiryCommand.class)
+    public void onGetSunPassDocumentInquiryCommandSuccess(@Param(GetSunPassDocumentInquiryCommand.ARG_RESULT) DocumentInquiryResponse result) {
+        WaitDialogFragment.hide(getActivity());
+        callback.onComplete(dNumber, result, lpNumber);
+        isError = false;
+    }
+
+    @OnFailure(GetSunPassDocumentInquiryCommand.class)
+    public void onGetSunPassDocumentInquiryCommandFail(@Param(GetSunPassDocumentInquiryCommand.ARG_RESULT) DocumentInquiryResponse result) {
+        WaitDialogFragment.hide(getActivity());
+        isError = true;
+        responseDescription = result.responseDescription;
+        //shold remove later
+        callback.onComplete(dNumber, result, lpNumber);
+        refresh();
+    }
+
+    public void getBill() {
+        SunPassDocumentInquiryRequest request = new SunPassDocumentInquiryRequest();
+        request.mID = String.valueOf(user.getMid());
+        request.tID = String.valueOf(user.getTid());
+        request.password = user.getPassword();
+        request.cashier = cashierId;
+        request.accountNumber = dNumber;
+        request.transactionId = PrepaidProcessor.generateId();
+        request.transactionMode = transactionMode;
+        request.licensePlateNumber = lpNumber;
+        GetSunPassDocumentInquiryCommand.start(getActivity(), this, request);
+    }
+
+    public static void show(FragmentActivity context,
+                            String cashierId,
+                            PrepaidUser user,
+                            String transactionMode,
+                            SunDocumentCredentialsFragmentDialogCallback callback) {
+        SunPayYourDocumentCredentialsFragmentDialog dialog = SunPayYourDocumentCredentialsFragmentDialog_.builder()
+                .cashierId(cashierId)
+                .user(user)
+                .transactionMode(transactionMode)
+                .build();
+        dialog.setCallback(callback);
+        DialogUtil.show(context,
+                DIALOG_NAME,
+                dialog);
+    }
+
+    public static void hide(FragmentActivity activity) {
+        DialogUtil.hide(activity, DIALOG_NAME);
+    }
+
+    public interface SunDocumentCredentialsFragmentDialogCallback {
+
+        public abstract void onCancel();
+
+        public abstract void onError(String message);
+
+        public abstract void onComplete(String accountNumber, DocumentInquiryResponse formedRequest, String licensePlateNumber);
+    }
+    protected void enableFinish(Boolean enabled) {
+        getPositiveButton().setEnabled(enabled);
+        getPositiveButton().setTextColor(enabled ? colorOk : colorDisabled);
+    }
+}
Index: TabletCR/src/main/res/layout/bill_payment_complete.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/bill_payment_complete.xml	(revision )
+++ TabletCR/src/main/res/layout/bill_payment_complete.xml	(revision )
@@ -0,0 +1,180 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:orientation="vertical"
+    android:gravity="center"
+    android:layout_height="match_parent">
+
+
+    <TextView
+        android:layout_marginLeft="40dp"
+        android:layout_marginTop="10dp"
+        android:layout_gravity="left"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/prepaid_payment_complete_body_title"
+        style="@style/Receipt.BodyHeader" />
+
+
+    <TextView
+        android:layout_width="400dp"
+        android:layout_gravity="left"
+        android:layout_marginLeft="40dp"
+        android:layout_height="wrap_content"
+        android:text="@string/prepaid_wireless_payment_complete_order_data"
+        style="@style/Receipt.BodyContent"
+        android:layout_marginTop="20dp"/>
+
+
+    <LinearLayout
+        android:layout_marginTop="10dp"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:layout_marginLeft="40dp"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            android:text="@string/prepaid_wireless_payment_complete_order_num"
+            style="@style/Receipt.BodyContent"/>
+        <TextView
+            android:id="@+id/product_ordernum"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            style="@style/Receipt.BodyContent"/>
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_marginTop="10dp"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:layout_marginLeft="40dp"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            android:text="@string/prepaid_wireless_payment_complete_product"
+            style="@style/Receipt.BodyContent"/>
+        <TextView
+            android:id="@+id/product_name_display"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            style="@style/Receipt.BodyContent"/>
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_marginTop="10dp"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:layout_marginLeft="40dp"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            android:text="@string/prepaid_bill_pauments_receipt_account_number"
+            style="@style/Receipt.BodyContent"/>
+        <TextView
+            android:id="@+id/account_number_display"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            style="@style/Receipt.BodyContent"/>
+    </LinearLayout>
+
+
+    <LinearLayout
+        android:paddingTop="20dp"
+        android:layout_marginTop="10dp"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:layout_marginLeft="40dp"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            android:text="@string/bill_pauments_amount"
+            style="@style/Receipt.BodyContent"/>
+        <TextView
+            android:id="@+id/amount"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            style="@style/Receipt.BodyContent"/>
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_marginTop="10dp"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:layout_marginLeft="40dp"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            android:text="@string/bill_pauments_fee"
+            style="@style/Receipt.BodyContent"/>
+        <TextView
+            android:id="@+id/fee"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            style="@style/Receipt.BodyContent"/>
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_marginTop="10dp"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:layout_marginLeft="40dp"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            android:text="@string/prepaid_wireless_payment_complete_order_total_price"
+            style="@style/Receipt.BodyContent"/>
+        <TextView
+            android:id="@+id/total"
+            android:layout_width="400dp"
+            android:layout_height="wrap_content"
+            style="@style/Receipt.BodyContent"/>
+    </LinearLayout>
+
+    <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:paddingLeft="20dp"
+        android:paddingRight="20dp">
+
+        <CheckBox
+            android:id="@+id/print_box"
+            android:text="@string/chkbx_print"
+            style="@style/CheckBox.Dark"
+            android:layout_height="wrap_content"
+            android:layout_alignParentLeft="true"
+            android:layout_width="wrap_content" />
+
+        <CheckBox
+            android:layout_below="@id/print_box"
+            style="@style/CheckBox.Dark"
+            android:layout_alignParentLeft="true"
+            android:id="@+id/email_box"
+            android:layout_height="wrap_content"
+            android:text="@string/chkbx_email"
+            android:layout_width="wrap_content" />
+
+        <CheckBox
+            android:layout_below="@id/email_box"
+            style="@style/CheckBox.Dark"
+            android:layout_alignParentLeft="true"
+            android:id="@+id/signature_box"
+            android:visibility="visible"
+            android:layout_height="wrap_content"
+            android:text="@string/chkbx_sign_print"
+            android:layout_width="wrap_content" />
+
+    </RelativeLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/adapter/PrepaidReceiptAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/adapter/PrepaidReceiptAdapter.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/adapter/PrepaidReceiptAdapter.java	(revision )
@@ -0,0 +1,55 @@
+package com.kaching123.tcr.adapter;
+
+import android.app.Activity;
+import android.app.Fragment;
+import android.content.Context;
+import android.support.v4.app.FragmentActivity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.TextView;
+
+import com.kaching123.tcr.R;
+
+import org.w3c.dom.Text;
+
+/**
+ * Created by teli.yin on 6/6/2014.
+ */
+public class PrepaidReceiptAdapter extends BaseAdapter{
+    private FragmentActivity mContext;
+    private String[] mNames;
+    private String[] mContents;
+
+    public PrepaidReceiptAdapter(FragmentActivity context, String[] names, String[] contents)
+    {
+        this.mContext = context;
+        this.mNames = names;
+        this.mContents = contents;
+    }
+    @Override
+    public int getCount() {
+        return mNames.length;
+    }
+
+    @Override
+    public Object getItem(int i) {
+        return mNames[i];
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @Override
+    public View getView(int i, View view, ViewGroup viewGroup) {
+        view = LayoutInflater.from(mContext).inflate(R.layout.prepaid_receipt_listview_item, null);
+        TextView name = (TextView) view.findViewById(R.id.tv_name);
+        TextView content = (TextView) view.findViewById(R.id.tv_content);
+        name.setText(mNames[i]);
+        content.setText(mContents[i]);
+        return view;
+    }
+}
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/dialog/StyledDialogFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/dialog/StyledDialogFragment.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/dialog/StyledDialogFragment.java	(revision )
@@ -1,5 +1,9 @@
 package com.kaching123.tcr.fragment.dialog;
 
+import android.content.res.TypedArray;
+import android.graphics.Color;
+import android.graphics.Typeface;
+import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.widget.Button;
@@ -36,14 +40,27 @@
         builder = super.build(builder);
 
         builder.setTitle(getDialogTitle());
+        builder.setTitleTextColor(getTitleTextColor());
+        builder.setIcon(getTitleIcon());
+        builder.setTitleGravity(getTitleGravity());
+        builder.setTitleTextBackgroundColor(getTitleTextBackgroundColor());
         builder.setView(createDialogContentView());
+        builder.setButtonsBackgroundColor(getButtonsBackgroundColor());
+        builder.setTitleViewBackgroundColor(getTitleViewBackgroundColor());
+        builder.setSeparatorColor(getSeparatorColor());
+
+        if(hasTitleTextTypeface())
+            builder.setTitleTypeface(getTitleTextTypeface());
+        if(hasNegativeButtonTextTypeface())
+            builder.setNegativeButtonTypeface(getNegativeButtonTextTypeface());
+
         if(hasNegativeButton()){
             builder.setNegativeButton(getNegativeButtonTitle(), new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                callInternalListener(getNegativeButtonListener());
-            }
-        });
+                @Override
+                public void onClick(View v) {
+                    callInternalListener(getNegativeButtonListener());
+                }
+            });
         }
         if(hasPositiveButton()){
             builder.setPositiveButton(getPositiveButtonTitle(), new View.OnClickListener() {
@@ -71,7 +88,20 @@
         KeyboardUtils.hideKeyboard(getActivity(), getView());
         super.dismiss();
     }
+    protected int getSeparatorColor(){return 0;}
+    protected int getTitleTextColor(){return 0;}
+    protected int getTitleViewBackgroundColor(){return 0;}
+    protected int getButtonsBackgroundColor(){return 0;}
+    protected int getTitleTextBackgroundColor(){return 0;}
 
+    protected int getTitleTextTypeface(){return Typeface.NORMAL; }
+
+    protected int getNegativeButtonTextTypeface(){return Typeface.NORMAL; }
+
+    protected boolean hasTitleTextTypeface(){return false;}
+
+    protected boolean hasNegativeButtonTextTypeface(){return false;}
+
     protected boolean hasSkipButton(){
         return false;
     }
@@ -87,6 +117,10 @@
     protected View createDialogContentView(){
         return layoutInflater.inflate(getDialogContentLayout(), null, false);
     }
+
+    protected  int getTitleIcon(){return 0;};
+
+    protected  int getTitleGravity(){return Gravity.CENTER;};
 
     protected abstract int getDialogContentLayout();
 
Index: AndroidStyledDialogs/src/eu/inmite/android/lib/dialogs/SimpleDialogFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- AndroidStyledDialogs/src/eu/inmite/android/lib/dialogs/SimpleDialogFragment.java	(revision 2972)
+++ AndroidStyledDialogs/src/eu/inmite/android/lib/dialogs/SimpleDialogFragment.java	(revision )
@@ -34,167 +34,194 @@
  */
 public class SimpleDialogFragment extends BaseDialogFragment {
 
-	protected static String ARG_MESSAGE = "message";
-	protected static String ARG_TITLE = "title";
-	protected static String ARG_POSITIVE_BUTTON = "positive_button";
-	protected static String ARG_NEGATIVE_BUTTON = "negative_button";
+    protected static String ARG_MESSAGE = "message";
+    protected static String ARG_TITLE = "title";
+    protected static String ARG_POSITIVE_BUTTON = "positive_button";
+    protected static String ARG_NEGATIVE_BUTTON = "negative_button";
+    protected static final String ARG_TITLE_ICON= "title_icon";
+    protected static final String ARG_TITLE_TEXT_GRAVITY = "title_gravity";
+    protected static final String ARG_TITLE_TEXT_TYPEFACE= "title_text_typeface";
+    protected static final String ARG_TITLE_NEGATIVE_BUTTON_TEXT_TYPEFACE = "negativebutton_text_typeface";
+    protected static final String ARG_TITLE_Text_BACKGROUND_COLOR = "title_background_color";
+    protected static final String ARG_BUTTONS_BACKGROUND_COLOR = "negativebutton_text_typeface";
+    protected static final String ARG_TITLE_View_BACKGROUND_COLOR = "title_view_background_color";
+    protected static final String ARG_TITLE_TEXT_COLOR = "title_text_color";
+    protected static final String ARG_SEPARATOR_COLOR = "separator_color";
 
-	protected int mRequestCode;
+    protected int mRequestCode;
 
-	public static SimpleDialogBuilder createBuilder(Context context, FragmentManager fragmentManager) {
-		return new SimpleDialogBuilder(context, fragmentManager, SimpleDialogFragment.class);
-	}
+    public static SimpleDialogBuilder createBuilder(Context context, FragmentManager fragmentManager) {
+        return new SimpleDialogBuilder(context, fragmentManager, SimpleDialogFragment.class);
+    }
 
-	@Override
-	public void onActivityCreated(Bundle savedInstanceState) {
-		super.onActivityCreated(savedInstanceState);
-		final Fragment targetFragment = getTargetFragment();
-		if (targetFragment != null) {
-			mRequestCode = getTargetRequestCode();
-		} else {
-			Bundle args = getArguments();
-			if (args != null) {
-				mRequestCode = args.getInt(BaseDialogBuilder.ARG_REQUEST_CODE, 0);
-			}
-		}
-	}
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        final Fragment targetFragment = getTargetFragment();
+        if (targetFragment != null) {
+            mRequestCode = getTargetRequestCode();
+        } else {
+            Bundle args = getArguments();
+            if (args != null) {
+                mRequestCode = args.getInt(BaseDialogBuilder.ARG_REQUEST_CODE, 0);
+            }
+        }
+    }
 
-	/**
-	 * Children can extend this to add more things to base builder.
-	 */
-	@Override
-	protected BaseDialogFragment.Builder build(BaseDialogFragment.Builder builder) {
-		final String title = getTitle();
-		if (!TextUtils.isEmpty(title)) {
-			builder.setTitle(title);
-		}
+    /**
+     * Children can extend this to add more things to base builder.
+     */
+    @Override
+    protected BaseDialogFragment.Builder build(BaseDialogFragment.Builder builder) {
+        final String title = getTitle();
+        if (!TextUtils.isEmpty(title)) {
+            builder.setTitle(title);
+        }
 
-		final CharSequence message = getMessage();
-		if (!TextUtils.isEmpty(message)) {
-			builder.setMessage(message);
-		}
+        final CharSequence message = getMessage();
+        if (!TextUtils.isEmpty(message)) {
+            builder.setMessage(message);
+        }
 
-		final String positiveButtonText = getPositiveButtonText();
-		if (!TextUtils.isEmpty(positiveButtonText)) {
-			builder.setPositiveButton(positiveButtonText, new View.OnClickListener() {
-				@Override
-				public void onClick(View view) {
-					ISimpleDialogListener listener = getDialogListener();
-					if (listener != null) {
-						listener.onPositiveButtonClicked(mRequestCode);
-					}
-					dismiss();
-				}
-			});
-		}
+        final String positiveButtonText = getPositiveButtonText();
+        if (!TextUtils.isEmpty(positiveButtonText)) {
+            builder.setPositiveButton(positiveButtonText, new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    ISimpleDialogListener listener = getDialogListener();
+                    if (listener != null) {
+                        listener.onPositiveButtonClicked(mRequestCode);
+                    }
+                    dismiss();
+                }
+            });
+        }
 
-		final String negativeButtonText = getNegativeButtonText();
-		if (!TextUtils.isEmpty(negativeButtonText)) {
-			builder.setNegativeButton(negativeButtonText, new View.OnClickListener() {
-				@Override
-				public void onClick(View view) {
-					ISimpleDialogListener listener = getDialogListener();
-					if (listener != null) {
-						listener.onNegativeButtonClicked(mRequestCode);
-					}
-					dismiss();
-				}
-			});
-		}
-		return builder;
-	}
+        final String negativeButtonText = getNegativeButtonText();
+        if (!TextUtils.isEmpty(negativeButtonText)) {
+            builder.setNegativeButton(negativeButtonText, new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    ISimpleDialogListener listener = getDialogListener();
+                    if (listener != null) {
+                        listener.onNegativeButtonClicked(mRequestCode);
+                    }
+                    dismiss();
+                }
+            });
+        }
+        return builder;
+    }
 
-	protected CharSequence getMessage() {
-		return getArguments().getCharSequence(ARG_MESSAGE);
-	}
+    protected CharSequence getMessage() {
+        return getArguments().getCharSequence(ARG_MESSAGE);
+    }
 
-	protected String getTitle() {
-		return getArguments().getString(ARG_TITLE);
-	}
+    protected String getTitle() {
+        return getArguments().getString(ARG_TITLE);
+    }
 
-	protected String getPositiveButtonText() {
-		return getArguments().getString(ARG_POSITIVE_BUTTON);
-	}
+    protected String getPositiveButtonText() {
+        return getArguments().getString(ARG_POSITIVE_BUTTON);
+    }
 
-	protected String getNegativeButtonText() {
-		return getArguments().getString(ARG_NEGATIVE_BUTTON);
-	}
+    protected String getNegativeButtonText() {
+        return getArguments().getString(ARG_NEGATIVE_BUTTON);
+    }
 
+    protected int getTitleIcon() {return getArguments().getInt(ARG_TITLE_ICON);}
+
+    protected int getTitleTextGravity() {return getArguments().getInt(ARG_TITLE_TEXT_GRAVITY);}
+
+    protected int getTitleTextTypeface() {return getArguments().getInt(ARG_TITLE_TEXT_TYPEFACE);}
+
+    protected int getNegativeButtonTextTypeface() {return getArguments().getInt(ARG_TITLE_NEGATIVE_BUTTON_TEXT_TYPEFACE);}
+
+    protected int getTitleTextColor() {return getArguments().getInt(ARG_TITLE_TEXT_COLOR);}
+
+    protected int getSeparatorColor() {return getArguments().getInt(ARG_SEPARATOR_COLOR);}
-	@Override
-	public void onCancel(DialogInterface dialog) {
-		super.onCancel(dialog);
-		ISimpleDialogCancelListener listener = getCancelListener();
-		if (listener != null) {
-			listener.onCancelled(mRequestCode);
-		}
-	}
+    @Override
+    public void onCancel(DialogInterface dialog) {
+        super.onCancel(dialog);
+        ISimpleDialogCancelListener listener = getCancelListener();
+        if (listener != null) {
+            listener.onCancelled(mRequestCode);
+        }
+    }
 
-	protected ISimpleDialogListener getDialogListener() {
-		final Fragment targetFragment = getTargetFragment();
-		if (targetFragment != null) {
-			if (targetFragment instanceof ISimpleDialogListener) {
-				return (ISimpleDialogListener) targetFragment;
-			}
-		} else {
-			if (getActivity() instanceof ISimpleDialogListener) {
-				return (ISimpleDialogListener) getActivity();
-			}
-		}
-		return null;
-	}
+    protected ISimpleDialogListener getDialogListener() {
+        final Fragment targetFragment = getTargetFragment();
+        if (targetFragment != null) {
+            if (targetFragment instanceof ISimpleDialogListener) {
+                return (ISimpleDialogListener) targetFragment;
+            }
+        } else {
+            if (getActivity() instanceof ISimpleDialogListener) {
+                return (ISimpleDialogListener) getActivity();
+            }
+        }
+        return null;
+    }
 
-	protected ISimpleDialogCancelListener getCancelListener() {
-		final Fragment targetFragment = getTargetFragment();
-		if (targetFragment != null) {
-			if (targetFragment instanceof ISimpleDialogCancelListener) {
-				return (ISimpleDialogCancelListener) targetFragment;
-			}
-		} else {
-			if (getActivity() instanceof ISimpleDialogCancelListener) {
-				return (ISimpleDialogCancelListener) getActivity();
-			}
-		}
-		return null;
-	}
+    protected ISimpleDialogCancelListener getCancelListener() {
+        final Fragment targetFragment = getTargetFragment();
+        if (targetFragment != null) {
+            if (targetFragment instanceof ISimpleDialogCancelListener) {
+                return (ISimpleDialogCancelListener) targetFragment;
+            }
+        } else {
+            if (getActivity() instanceof ISimpleDialogCancelListener) {
+                return (ISimpleDialogCancelListener) getActivity();
+            }
+        }
+        return null;
+    }
 
-	public static class SimpleDialogBuilder extends BaseDialogBuilder<SimpleDialogBuilder> {
+    public static class SimpleDialogBuilder extends BaseDialogBuilder<SimpleDialogBuilder> {
 
-		private String mTitle;
-		private CharSequence mMessage;
-		private String mPositiveButtonText;
-		private String mNegativeButtonText;
+        private String mTitle;
+        private CharSequence mMessage;
+        private String mPositiveButtonText;
+        private String mNegativeButtonText;
-
+        private int mIcon;
+        private int mTitleTextGravity;
-		private boolean mShowDefaultButton = true;
+        private boolean mShowDefaultButton = true;
-
+        private int mTitleTextTypeface;
+        private int mNegativeButtonTextTypeface;
+        private int mTitleTextBackgroundColor;
+        private int mTitleViewBackgroundColor;
+        private int mButtonsBackgroundColor;
+        private int mTitleTextColor;
+        private int mSeparatorColor;
-		protected SimpleDialogBuilder(Context context, FragmentManager fragmentManager, Class<? extends SimpleDialogFragment> clazz) {
-			super(context, fragmentManager, clazz);
-		}
+        protected SimpleDialogBuilder(Context context, FragmentManager fragmentManager, Class<? extends SimpleDialogFragment> clazz) {
+            super(context, fragmentManager, clazz);
+        }
 
-		@Override
-		protected SimpleDialogBuilder self() {
-			return this;
-		}
+        @Override
+        protected SimpleDialogBuilder self() {
+            return this;
+        }
 
-		public SimpleDialogBuilder setTitle(int titleResourceId) {
-			mTitle = mContext.getString(titleResourceId);
-			return this;
-		}
+        public SimpleDialogBuilder setTitle(int titleResourceId) {
+            mTitle = mContext.getString(titleResourceId);
+            return this;
+        }
 
 
-		public SimpleDialogBuilder setTitle(String title) {
-			mTitle = title;
-			return this;
-		}
+        public SimpleDialogBuilder setTitle(String title) {
+            mTitle = title;
+            return this;
+        }
 
-		public SimpleDialogBuilder setMessage(int messageResourceId) {
-			mMessage = mContext.getString(messageResourceId);
-			return this;
-		}
+        public SimpleDialogBuilder setMessage(int messageResourceId) {
+            mMessage = mContext.getString(messageResourceId);
+            return this;
+        }
 
-		public SimpleDialogBuilder setMessage(String message) {
-			mMessage = message;
-			return this;
-		}
+        public SimpleDialogBuilder setMessage(String message) {
+            mMessage = message;
+            return this;
+        }
 
         public SimpleDialogBuilder setHtmlMessage(int htmlMessageResourceId) {
             mMessage = Html.fromHtml(mContext.getText(htmlMessageResourceId).toString());
@@ -206,49 +233,108 @@
             return this;
         }
 
-		public SimpleDialogBuilder setPositiveButtonText(int textResourceId) {
-			mPositiveButtonText = mContext.getString(textResourceId);
-			return this;
-		}
+        public SimpleDialogBuilder setPositiveButtonText(int textResourceId) {
+            mPositiveButtonText = mContext.getString(textResourceId);
+            return this;
+        }
 
 
-		public SimpleDialogBuilder setPositiveButtonText(String text) {
-			mPositiveButtonText = text;
-			return this;
-		}
+        public SimpleDialogBuilder setPositiveButtonText(String text) {
+            mPositiveButtonText = text;
+            return this;
+        }
 
-		public SimpleDialogBuilder setNegativeButtonText(int textResourceId) {
-			mNegativeButtonText = mContext.getString(textResourceId);
-			return this;
-		}
+        public SimpleDialogBuilder setNegativeButtonText(int textResourceId) {
+            mNegativeButtonText = mContext.getString(textResourceId);
+            return this;
+        }
 
-		public SimpleDialogBuilder setNegativeButtonText(String text) {
-			mNegativeButtonText = text;
-			return this;
-		}
+        public SimpleDialogBuilder setNegativeButtonText(String text) {
+            mNegativeButtonText = text;
+            return this;
+        }
+        public SimpleDialogBuilder setIcon(int icon)
+        {
+            this.mIcon = icon;
+            return this;
+        }
 
+        public SimpleDialogBuilder setTitleTextGravity(int TitleTextGravity)
+        {
+            this.mTitleTextGravity = TitleTextGravity;
+            return this;
+        }
+
+        public SimpleDialogBuilder setTitleTextTypeface(int TitleTextTypeface)
+        {
+            this.mTitleTextTypeface = TitleTextTypeface;
+            return this;
+        }
+
+        public SimpleDialogBuilder setNegativeButtonTextTypeface(int NegativeButtonTextTypeface)
+        {
+            this.mNegativeButtonTextTypeface = NegativeButtonTextTypeface;
+            return this;
+        }
+
+        public SimpleDialogBuilder setTitleTextBackgroundColor(int TitleTextBackgroundColor)
+        {
+            this.mTitleTextBackgroundColor = TitleTextBackgroundColor;
+            return this;
+        }
+
+        public SimpleDialogBuilder setTitleViewBackgroundColor(int TitleViewBackgroundColor)
+        {
+            this.mTitleViewBackgroundColor = TitleViewBackgroundColor;
+            return this;
+        }
+
+        public SimpleDialogBuilder setButtonsBackgroundColor(int ButtonsBackgroundColor)
+        {
+            this.mButtonsBackgroundColor = ButtonsBackgroundColor;
+            return this;
+        }
+
+        public SimpleDialogBuilder setTitleTextColor(int TitleTextColor)
+        {
+            this.mTitleTextColor = TitleTextColor;
+            return this;
+        }
+        public SimpleDialogBuilder setSeparatorColor(int SeparatorColor)
+        {
+            this.mSeparatorColor = SeparatorColor;
+            return this;
+        }
-		/**
-		 * When there is neither positive nor negative button, default "close" button is created if it was enabled.<br/>
-		 * Default is true.
-		 */
-		public SimpleDialogBuilder hideDefaultButton(boolean hide) {
-			mShowDefaultButton = !hide;
-			return this;
-		}
+        /**
+         * When there is neither positive nor negative button, default "close" button is created if it was enabled.<br/>
+         * Default is true.
+         */
+        public SimpleDialogBuilder hideDefaultButton(boolean hide) {
+            mShowDefaultButton = !hide;
+            return this;
+        }
 
-		@Override
-		protected Bundle prepareArguments() {
-			if (mShowDefaultButton && mPositiveButtonText == null && mNegativeButtonText == null) {
-				mPositiveButtonText = mContext.getString(R.string.dialog_close);
-			}
+        @Override
+        protected Bundle prepareArguments() {
+            if (mShowDefaultButton && mPositiveButtonText == null && mNegativeButtonText == null) {
+                mPositiveButtonText = mContext.getString(R.string.dialog_close);
+            }
 
-			Bundle args = new Bundle();
-			args.putCharSequence( SimpleDialogFragment.ARG_MESSAGE, mMessage);
-			args.putString(SimpleDialogFragment.ARG_TITLE, mTitle);
-			args.putString(SimpleDialogFragment.ARG_POSITIVE_BUTTON, mPositiveButtonText);
-			args.putString(SimpleDialogFragment.ARG_NEGATIVE_BUTTON, mNegativeButtonText);
+            Bundle args = new Bundle();
+            args.putCharSequence( SimpleDialogFragment.ARG_MESSAGE, mMessage);
+            args.putString(SimpleDialogFragment.ARG_TITLE, mTitle);
+            args.putString(SimpleDialogFragment.ARG_POSITIVE_BUTTON, mPositiveButtonText);
+            args.putString(SimpleDialogFragment.ARG_NEGATIVE_BUTTON, mNegativeButtonText);
-
+            args.putInt(SimpleDialogFragment.ARG_TITLE_ICON, mIcon);
+            args.putInt(SimpleDialogFragment.ARG_TITLE_TEXT_GRAVITY, mTitleTextGravity);
+            args.putInt(SimpleDialogFragment.ARG_TITLE_TEXT_TYPEFACE, mTitleTextTypeface);
+            args.putInt(SimpleDialogFragment.ARG_TITLE_NEGATIVE_BUTTON_TEXT_TYPEFACE, mNegativeButtonTextTypeface);
+            args.putInt(SimpleDialogFragment.ARG_TITLE_Text_BACKGROUND_COLOR, mTitleTextBackgroundColor);
+            args.putInt(SimpleDialogFragment.ARG_TITLE_View_BACKGROUND_COLOR, mTitleViewBackgroundColor);
+            args.putInt(SimpleDialogFragment.ARG_BUTTONS_BACKGROUND_COLOR, mButtonsBackgroundColor);
+            args.putInt(SimpleDialogFragment.ARG_TITLE_TEXT_COLOR, mTitleTextColor);
+            args.putInt(SimpleDialogFragment.ARG_SEPARATOR_COLOR, mSeparatorColor);
-			return args;
-		}
-	}
+            return args;
+        }
+    }
 }
Index: TabletCR/src/main/java/com/kaching123/tcr/model/payment/blackstone/prepaid/sunpass/request/SunPassDocumentPaymentRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/model/payment/blackstone/prepaid/sunpass/request/SunPassDocumentPaymentRequest.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/model/payment/blackstone/prepaid/sunpass/request/SunPassDocumentPaymentRequest.java	(revision )
@@ -0,0 +1,35 @@
+package com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request;
+
+import com.kaching123.tcr.model.payment.blackstone.prepaid.PaymentRequest;
+import com.kaching123.tcr.websvc.api.prepaid.VectorDocument;
+
+import java.math.BigDecimal;
+
+/**
+ * @author Ivan v. Rikhmayer
+ *         This class is intended to
+ */
+public class SunPassDocumentPaymentRequest extends SunReplenishmentRequest {
+
+
+    public String licensePateleNumber;
+    public VectorDocument paidDocuments;
+
+    @Override
+    public String toString() {
+        return "SunPassDocumentPaymentRequest{" +
+                "mID='" + mID + '\'' +
+                ", tID='" + tID + '\'' +
+                ", password='" + password + '\'' +
+                ", cashier='" + cashier + '\'' +
+                ", transactionId='" + transactionId + '\'' +
+                ", accountNumber='" + accountNumber + '\'' +
+                ", licensePateleNumber='" + licensePateleNumber + '\'' +
+                ", amount=" + amount +
+                ", feeAmount=" + feeAmount +
+                ", purchaseId='" + purchaseId + '\'' +
+                ", paidDocuments='" + paidDocuments + '\'' +
+                ", transactionMode='" + transactionMode + '\'' +
+                '}';
+    }
+}
\ No newline at end of file
Index: TabletCR/src/main/res/layout/prepaid_pyd_order_view_listview_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/prepaid_pyd_order_view_listview_item.xml	(revision )
+++ TabletCR/src/main/res/layout/prepaid_pyd_order_view_listview_item.xml	(revision )
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    style="@style/Receipt.Layout"
+    android:orientation="horizontal"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:background="@color/prepaid_dialog_buttons_background_color"
+    android:layout_marginTop="50dp"
+    >
+
+    <TextView
+        android:layout_marginLeft="10dp"
+        android:id="@+id/tv_name"
+        android:gravity="left"
+        android:layout_width="200dp"
+        style="@style/Receipt.BodyContent"
+        android:layout_height="wrap_content" />
+
+    <TextView
+        android:gravity="left"
+        android:id="@+id/tv_content"
+        android:layout_width="100dp"
+        style="@style/Receipt.BodyContent"
+        android:layout_height="wrap_content" />
+
+</LinearLayout>
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/PrepaidSunPassPrintAndFinishFragmentDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/PrepaidSunPassPrintAndFinishFragmentDialog.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/PrepaidSunPassPrintAndFinishFragmentDialog.java	(revision )
@@ -0,0 +1,120 @@
+package com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless;
+
+import android.graphics.Color;
+import android.os.Bundle;
+import android.support.v4.app.FragmentActivity;
+import android.widget.ListView;
+
+import com.googlecode.androidannotations.annotations.AfterViews;
+import com.googlecode.androidannotations.annotations.EFragment;
+import com.googlecode.androidannotations.annotations.FragmentArg;
+import com.googlecode.androidannotations.annotations.UiThread;
+import com.googlecode.androidannotations.annotations.ViewById;
+import com.kaching123.tcr.R;
+import com.kaching123.tcr.adapter.PrepaidReceiptAdapter;
+import com.kaching123.tcr.commands.print.pos.PrintPrepaidOrderCommand;
+import com.kaching123.tcr.fragment.dialog.DialogUtil;
+import com.kaching123.tcr.fragment.dialog.WaitDialogFragment;
+import com.kaching123.tcr.fragment.tendering.PrepaidChooseCustomerDialog;
+import com.kaching123.tcr.fragment.tendering.payment.PayPrintAndFinishFragmentDialog;
+import com.kaching123.tcr.model.PaymentTransactionModel;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.IPrePaidInfo;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request.SunReplenishmentRequest;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.SunpassType;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.WirelessType;
+import com.kaching123.tcr.websvc.api.prepaid.BalanceResponse;
+
+import java.util.ArrayList;
+
+
+/**
+ * @author Ivan v. Rikhmayer
+ */
+@EFragment
+public class PrepaidSunPassPrintAndFinishFragmentDialog extends PayPrintAndFinishFragmentDialog {
+
+    private static final String DIALOG_NAME = PrepaidSunPassPrintAndFinishFragmentDialog.class.getSimpleName();
+    @ViewById
+    protected ListView listView;
+    @FragmentArg
+    protected SunReplenishmentRequest request;
+    @FragmentArg
+    protected IPrePaidInfo info;
+    @FragmentArg
+    protected SunpassType type;
+    @FragmentArg
+    protected BalanceResponse response;
+    private PrepaidReceiptAdapter adapter;
+    static private FragmentActivity mContext;
+    @Override
+    protected int getDialogTitle() {
+
+        switch (type) {
+            case SUNPASS_PAY_YOUR_DOCUMENT:
+                return R.string.prepaid_dialog_sunpass_pay_your_document_title;
+            case SUNPASS_TRANSPONDER:
+                return R.string.prepaid_dialog_sunpass_transponder_title;
+        }
+        return R.string.blackstone_pay_confirm_title;
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        getDialog().getWindow().setLayout(getResources().getDimensionPixelOffset(R.dimen.prepaid_supass_choice_dlg_width), getResources().getDimensionPixelOffset(R.dimen.default_dlg_heigth));
+        setCancelable(false);
+    }
+
+    @AfterViews
+    void afterViewInitList()
+    {
+        String[] names = PrepaidPaymentCompleteReceiptListViewModel.getListForNames();
+        String[] contents = PrepaidPaymentCompleteReceiptListViewModel.getListForContents(request, response, mContext, orderGuid);
+        PrepaidPaymentCompleteReceiptListViewModel.trace(names, contents);
+        adapter = new PrepaidReceiptAdapter(getActivity(),names, contents);
+        listView.setAdapter(adapter);
+        listView.setDivider(null);
+        listView.setDividerHeight(0);
+    }
+    @Override
+    protected int getDialogContentLayout() {
+        return R.layout.sunpass_payment_complete;
+    }
+    @Override
+    protected int getTitleTextColor(){ return Color.WHITE; }
+    @AfterViews
+    protected void initViews() {
+        printBox.setChecked(true);
+    }
+    @Override
+    protected int getTitleIcon(){return R.drawable.icon_sun_pass;}
+    @Override
+    protected void printOrder(boolean skipPaperWarning) {
+        WaitDialogFragment.show(getActivity(), getString(R.string.wait_printing));
+        PrintPrepaidOrderCommand.start(getActivity(), false, skipPaperWarning, orderGuid, info, printOrderCallback);
+    }
+
+    @Override
+    protected void sendDigitalOrder() {
+        PrepaidChooseCustomerDialog.show(getActivity(), orderGuid, info);
+    }
+
+    public static void show(FragmentActivity context,
+                            String orderGuid,
+                            IFinishConfirmListener listener,
+                            ArrayList<PaymentTransactionModel> transactions,
+                            IPrePaidInfo info,
+                            SunpassType type,
+                            SunReplenishmentRequest request,
+                            BalanceResponse response) {
+        mContext = context;
+        DialogUtil.show(context,
+                DIALOG_NAME,
+                PrepaidSunPassPrintAndFinishFragmentDialog_.builder().info(info).transactions(transactions).orderGuid(orderGuid).type(type).request(request).response(response).build()).setListener(listener);
+    }
+
+    public static void hide(FragmentActivity activity) {
+        DialogUtil.hide(activity, DIALOG_NAME);
+    }
+
+}
\ No newline at end of file
Index: TabletCR/src/main/res/layout/icon_spinner_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/icon_spinner_item.xml	(revision 2972)
+++ TabletCR/src/main/res/layout/icon_spinner_item.xml	(revision )
@@ -1,7 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
                 android:layout_width="match_parent"
-                android:layout_height="wrap_content">
+                android:layout_height="wrap_content"
+                android:background="@color/prepaid_dialog_buttons_background_color">
 
     <ImageView
         android:layout_centerVertical="true"
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/commands/payment/pax/PaxBalanceCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/commands/payment/pax/PaxBalanceCommand.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/commands/payment/pax/PaxBalanceCommand.java	(revision 2972)
@@ -1,117 +0,0 @@
-package com.kaching123.tcr.commands.payment.pax;
-
-import android.content.Context;
-import android.content.OperationApplicationException;
-import android.os.RemoteException;
-import android.text.TextUtils;
-
-import com.kaching123.tcr.Logger;
-import com.kaching123.tcr.R;
-import com.kaching123.tcr.model.PaxModel;
-import com.kaching123.tcr.model.payment.general.transaction.Transaction;
-import com.kaching123.tcr.service.ISqlCommand;
-import com.kaching123.tcr.websvc.api.pax.model.payment.request.SaleActionRequest;
-import com.kaching123.tcr.websvc.api.pax.model.payment.result.response.SaleActionResponse;
-import com.telly.groundy.Groundy;
-import com.telly.groundy.TaskHandler;
-import com.telly.groundy.TaskResult;
-import com.telly.groundy.annotations.OnFailure;
-import com.telly.groundy.annotations.OnSuccess;
-import com.telly.groundy.annotations.Param;
-
-import java.math.BigDecimal;
-
-import retrofit.RetrofitError;
-
-/**
- * Created by mayer
- */
-public class PaxBalanceCommand extends PaxBaseCommand {
-
-    public static final int TRANSACTION_ID_BALANCE = 9;
-
-    private static final String RESULT_AMOUNT = "RES_TRANSACTION";
-    private static final String RESULT_LAST4 = "RESULT_LAST4";
-    private static final String RESULT_ERROR_REASON = "ERROR";
-    private static final String ARG_PURPOSE = "ARG_AMOUNT_1";
-
-
-    public static final TaskHandler startBalanceRequest(Context context,
-                                              PaxModel paxTerminal,
-                                              PaxBalanceCommandBaseCallback callback) {
-        return  Groundy.create(PaxBalanceCommand.class)
-                .arg(ARG_DATA_PAX, paxTerminal)
-                .arg(ARG_PURPOSE, TRANSACTION_ID_BALANCE)
-                .callback(callback)
-                .queueUsing(context);
-    }
-
-    @Override
-    protected TaskResult doCommand(PaxWebApi api) {
-
-        int transactionId = getIntArg(ARG_PURPOSE);
-        BigDecimal amount = null;
-        String lastFour = "";
-        String errorReason = "";
-        try {
-            SaleActionResponse response = api.sale(new SaleActionRequest(transactionId, "001", null));
-            if (response != null && response.getDetails() != null && 200 == response.getResponse() && response.getDetails().getSale().getBalance() != null)  {
-                amount = new BigDecimal(response.getDetails().getSale().getBalance());
-                lastFour = response.getDetails().getDigits();
-            } else {
-                for (String msg : response.getDetails().getSale().getMessage()) {
-                    if (errorReason.length() > 0) {
-                        errorReason = errorReason.concat(". ");
-                    }
-                    errorReason = errorReason.concat(msg);
-                }
-                if (response.getDetails().getVerbiage() != null) {
-                    if (!TextUtils.isEmpty(errorReason)) {
-                        errorReason = errorReason.concat(": ");
-                    }
-                    errorReason = errorReason.concat(response.getDetails().getVerbiage());
-                }
-                if (TextUtils.isEmpty(errorReason)) {
-                    errorReason = "The balance check request failed. No particular reason was provided, the reason could be related to software issues.";
-                }
-            }
-        } catch (Pax404Exception e) {
-            errorReason = "Request cancelled or connection problem.";
-            Logger.e("Pax 404", e);
-        } catch (RetrofitError e) {
-            errorReason = getContext().getString(R.string.pax_timeout);
-            Logger.e("PaxError", e);
-        } catch (Exception e) {
-            // Though it should not happen, as Gena confirms we only care about local DB and data will sync after,
-            // I put this check due to possibilty on DB corruption, DB access failure and many other ugly rare stuff
-            Logger.e("Rare SQL exception caught, data was not updated", e);
-            errorReason = "Rare SQL exception caught, data was not updated";
-        }
-        return succeeded().add(RESULT_LAST4, lastFour).add(RESULT_AMOUNT, amount).add(RESULT_ERROR_REASON, errorReason);
-    }
-
-    @Override
-    protected ISqlCommand createSqlCommand() {
-        return null;
-    }
-
-    public static abstract class PaxBalanceCommandBaseCallback {
-
-        @OnSuccess(PaxBalanceCommand.class)
-        public final void onSuccess(@Param(PaxBalanceCommand.RESULT_AMOUNT) BigDecimal result,
-                                    @Param(PaxBalanceCommand.RESULT_LAST4) String last4,
-                                    @Param(PaxBalanceCommand.RESULT_ERROR_REASON) String errorReason) {
-            handleSuccess(result, last4, errorReason);
-        }
-
-        protected abstract void handleSuccess(BigDecimal result, String last4, String errorReason);
-
-        @OnFailure(PaxBalanceCommand.class)
-        public final void onFailure() {
-            handleError();
-        }
-
-        protected abstract void handleError();
-    }
-
-}
Index: TabletCR/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/values/styles.xml	(revision 2972)
+++ TabletCR/src/main/res/values/styles.xml	(revision )
@@ -413,6 +413,8 @@
 
     <style name="CustomEditBox.PaymentInputField">
         <item name="android:textColor">@color/blue_bright</item>
+        <item name="android:background">@drawable/edit_text_holo_dark</item>
+        <item name="android:textCursorDrawable">@drawable/text_cursor_holo_dark</item>
         <item name="android:textStyle">bold</item>
         <item name="android:textSize">16sp</item>
         <item name="android:minWidth">70dp</item>
@@ -683,6 +685,7 @@
 
     <style name="EditItem.Table.Label.Required">
         <item name="android:drawableRight">@drawable/star_for_required_field</item>
+        <item name="android:textColor">@color/prepaid_dialog_white</item>
     </style>
 
     <style name="EditItem.Table.LabelLayout">
@@ -901,13 +904,16 @@
     <style name="StyledDialog.Content"/>
 
     <style name="StyledDialog.Content.EditText">
+        <item name="android:hint">@string/prepaid_dialog_telephone_number_hint</item>
+        <item name="android:textStyle">bold</item>
         <item name="android:singleLine">true</item>
         <item name="android:gravity">left</item>
         <item name="android:background">@drawable/edit_text_holo_dark</item>
-        <item name="android:textColor">@color/light_gray</item>
+        <item name="android:textColor">@color/prepaid_dialog_white</item>
         <item name="android:textSize">@dimen/dlg_edit_text_font_size</item>
         <item name="android:minWidth">148dp</item>
         <item name="android:textCursorDrawable">@drawable/text_cursor_holo_dark</item>
+        <item name="android:textColorHint">@color/prepaid_dialog_white</item>
     </style>
 
     <style name="StyledDialog.Content.EditText.Custom">
@@ -923,6 +929,7 @@
 
     <style name="StyledDialog.Content.Spinner">
         <item name="android:background">@drawable/spinner_background_holo_dark</item>
+        <item name="android:textColor">@color/prepaid_dialog_white</item>
     </style>
 
     <style name="StyledDialog.Content.SpinnerItemView.SmallLabel">
@@ -1271,7 +1278,7 @@
     <style name="Prepaid.Spinner"/>
 
     <style name="Prepaid.Spinner.Item">
-        <item name="android:textColor">@color/dlg_title_color</item>
+        <item name="android:textColor">@color/prepaid_dialog_white</item>
         <item name="android:textSize">@dimen/prepaid_label_text_size</item>
     </style>
 
@@ -1279,6 +1286,32 @@
         <item name="android:textColor">#6a6963</item>
         <item name="android:textSize">@dimen/prepaid_label_text_size</item>
         <item name="android:padding">8dp</item>
+    </style>
+
+    <style name="Receipt"></style>
+    <style name="Receipt.BodyHeader">
+        <item name="android:textSize">25sp</item>
+        <item name="android:textColor">@color/prepaid_dialog_white</item>
+    </style>
+    <style name="Receipt.BodyContent">
+        <item name="android:textSize">@dimen/prepaid_label_text_size</item>
+        <item name="android:textColor">@android:color/white</item>
+    </style>
+    <style name="Receipt.Layout">
+        <item name="android:paddingTop">2dp</item>
+        <item name="android:paddingBottom">2dp</item>
+    </style>
+
+    <style name="Sunpass"></style>
+
+    <style name="Sunpass.CredentialErrorText">
+        <item name="android:layout_width">300dp</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:background">@color/prepaid_dialog_white</item>
+    </style>
+    <style name="Prepaid.BillOptionsSelected">
+        <item name="android:textSize">25sp</item>
+        <item name="android:textColor">@color/prepaid_dialog_buttons_background_color</item>
     </style>
 
 </resources>
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/PrepaidWirelessPrintAndFinishFragmentDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/PrepaidWirelessPrintAndFinishFragmentDialog.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/PrepaidWirelessPrintAndFinishFragmentDialog.java	(revision )
@@ -0,0 +1,204 @@
+package com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless;
+
+import android.database.Cursor;
+import android.graphics.Color;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.v4.app.FragmentActivity;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import com.getbase.android.db.provider.ProviderAction;
+import com.getbase.android.db.provider.Query;
+import com.googlecode.androidannotations.annotations.AfterViews;
+import com.googlecode.androidannotations.annotations.EFragment;
+import com.googlecode.androidannotations.annotations.FragmentArg;
+import com.googlecode.androidannotations.annotations.ViewById;
+import com.kaching123.tcr.Logger;
+import com.kaching123.tcr.R;
+import com.kaching123.tcr.adapter.PrepaidReceiptAdapter;
+import com.kaching123.tcr.commands.print.pos.PrintPrepaidOrderCommand;
+import com.kaching123.tcr.fragment.dialog.DialogUtil;
+import com.kaching123.tcr.fragment.dialog.WaitDialogFragment;
+import com.kaching123.tcr.fragment.tendering.PrepaidChooseCustomerDialog;
+import com.kaching123.tcr.fragment.tendering.payment.PayPrintAndFinishFragmentDialog;
+import com.kaching123.tcr.model.PaymentTransactionModel;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.IPrePaidInfo;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request.SunReplenishmentRequest;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.WirelessItem;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.WirelessType;
+import com.kaching123.tcr.store.ShopProvider;
+import com.kaching123.tcr.store.ShopSchema2;
+import com.kaching123.tcr.store.ShopStore;
+import com.kaching123.tcr.websvc.api.prepaid.BalanceResponse;
+import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;
+
+import java.util.ArrayList;
+
+
+/**
+ * @author Ivan v. Rikhmayer
+ */
+@EFragment
+public class PrepaidWirelessPrintAndFinishFragmentDialog extends PayPrintAndFinishFragmentDialog {
+    private static final Uri URI_ORDER = ShopProvider.getContentUri(ShopStore.SaleOrderView.URI_CONTENT);
+    private static final String DIALOG_NAME = PrepaidWirelessPrintAndFinishFragmentDialog.class.getSimpleName();
+    @ViewById
+    protected ImageView productImageview;
+    @ViewById
+    protected TextView productName, productOrdernum, productNameDisplay, total;
+    @FragmentArg
+    protected IPrePaidInfo info;
+    @FragmentArg
+    protected WirelessItem chosenCategory;
+    static private FragmentActivity mContext;
+    private PrepaidReceiptAdapter adapter;
+
+    @Override
+    protected int getDialogTitle() {
+
+        switch (chosenCategory.type) {
+            case NATIONAL_TOP_UP:
+                return R.string.prepaid_dialog_wireless_recharge_international_title;
+            case INTERNATIONAL_WIRELESS_PIN:
+                return R.string.prepaid_dialog_wireless_recharge_title;
+            case PINLESS:
+                return R.string.prepaid_dialog_pinless_recharge_title;
+            case INTERNATIONAL_TOP_UP:
+                return R.string.prepaid_dialog_wireless_recharge_international_title;
+            case LONG_DISTANCE_PIN:
+                return R.string.prepaid_dialog_long_distance_title;
+            case NATIONAL_WIRELESS_PIN:
+                return R.string.prepaid_dialog_wireless_recharge_title;
+        }
+        return R.string.blackstone_pay_confirm_title;
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        getDialog().getWindow().setLayout(getResources().getDimensionPixelOffset(R.dimen.prepaid_supass_choice_dlg_width), getResources().getDimensionPixelOffset(R.dimen.prepaid_wireless_payment_complete_heigth));
+        setCancelable(false);
+    }
+
+    @AfterViews
+    void afterViewInitList() {
+        productName.setText(chosenCategory.carrierName);
+        UrlImageViewHelper.setUrlDrawable(productImageview, chosenCategory.iconUrl, R.drawable.operator_default_icon, 60000);
+        productOrdernum.setText(getOrderNum());
+        productNameDisplay.setText(chosenCategory.carrierName);
+        total.setText(getTotal());
+    }
+
+    protected String getTotal() {
+
+        Query query = ProviderAction
+                .query(URI_ORDER)
+                .projection(
+                        ShopSchema2.SaleOrderView2.SaleOrderTable.TML_TOTAL_PRICE)
+                .where(ShopSchema2.SaleOrderView2.SaleOrderTable.GUID + " = ?", orderGuid);
+        query/*
+                .where(SaleOrderTable.STATUS + " = ?", getOrderType().ordinal())*/
+                .orderBy(ShopSchema2.SaleOrderView2.SaleOrderTable.CREATE_TIME);
+        Cursor c = query.perform(mContext);
+        String total = null;
+        if (c.moveToFirst()) {
+            total = c.getString(0);
+        }
+        c.close();
+
+
+        return total;
+    }
+
+    protected String getOrderNum() {
+        Cursor c = ProviderAction.query(URI_ORDER)
+                .projection(
+                        ShopSchema2.SaleOrderView2.RegisterTable.TITLE,
+                        ShopSchema2.SaleOrderView2.SaleOrderTable.PRINT_SEQ_NUM
+                )
+                .where(ShopSchema2.SaleOrderView2.SaleOrderTable.GUID + " = ?", orderGuid)
+                .perform(mContext);
+
+        String registerTitle = "";
+        int seqNum = 0;
+        if (c.moveToFirst()) {
+            registerTitle = c.getString(0);
+            seqNum = c.getInt(1);
+        }
+
+        c.close();
+
+        return registerTitle + "-" + seqNum;
+    }
+
+    @Override
+    protected int getDialogContentLayout() {
+        return R.layout.wireless_payment_complete;
+    }
+
+    @Override
+    protected int getTitleGravity() {
+        return Gravity.LEFT;
+    }
+
+    @Override
+    protected int getTitleTextColor() {
+        return Color.WHITE;
+    }
+
+    @AfterViews
+    protected void initViews() {
+        printBox.setChecked(true);
+    }
+
+    @Override
+    protected int getTitleIcon() {
+        switch (chosenCategory.type) {
+            case NATIONAL_TOP_UP:
+                return R.drawable.icon_wireless_recharge;
+            case INTERNATIONAL_WIRELESS_PIN:
+                return R.drawable.icon_wireless_recharge;
+            case PINLESS:
+                return R.drawable.icon_pinless;
+            case INTERNATIONAL_TOP_UP:
+                return R.drawable.icon_international_topup;
+            case LONG_DISTANCE_PIN:
+                return R.drawable.icon_long_distance;
+            case NATIONAL_WIRELESS_PIN:
+                return R.drawable.icon_wireless_recharge;
+        }
+        return 0;
+    }
+
+    @Override
+    protected void printOrder(boolean skipPaperWarning) {
+        WaitDialogFragment.show(getActivity(), getString(R.string.wait_printing));
+        PrintPrepaidOrderCommand.start(getActivity(), false, skipPaperWarning, orderGuid, info, printOrderCallback);
+    }
+
+    @Override
+    protected void sendDigitalOrder() {
+        PrepaidChooseCustomerDialog.show(getActivity(), orderGuid, info);
+    }
+
+    public static void show(FragmentActivity context,
+                            String orderGuid,
+                            IFinishConfirmListener listener,
+                            ArrayList<PaymentTransactionModel> transactions,
+                            IPrePaidInfo info,
+                            WirelessItem chosenCategory
+    ) {
+        mContext = context;
+        DialogUtil.show(context,
+                DIALOG_NAME,
+                PrepaidWirelessPrintAndFinishFragmentDialog_.builder().info(info).transactions(transactions).orderGuid(orderGuid).chosenCategory(chosenCategory).build()).setListener(listener);
+    }
+
+    public static void hide(FragmentActivity activity) {
+        DialogUtil.hide(activity, DIALOG_NAME);
+    }
+
+}
\ No newline at end of file
Index: TabletCR/src/main/res/layout/bill_payment_options_listview_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/bill_payment_options_listview_item.xml	(revision )
+++ TabletCR/src/main/res/layout/bill_payment_options_listview_item.xml	(revision )
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    style="@style/Receipt.Layout"
+    android:orientation="horizontal"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="@color/prepaid_dialog_white"
+    >
+
+    <TextView
+        android:layout_weight="1"
+        android:id="@+id/fee"
+        android:layout_width="1dp"
+        style="@style/Prepaid.BillOptionsSelected"
+        android:layout_height="wrap_content"
+        android:background="@android:color/transparent"/>
+
+    <TextView
+        android:id="@+id/type"
+        android:layout_width="1dp"
+        android:layout_weight="2"
+        style="@style/Prepaid.BillOptionsSelected"
+        android:layout_height="wrap_content"
+        android:background="@android:color/transparent"/>
+
+    <TextView
+        android:id="@+id/description"
+        android:layout_weight="3"
+        android:layout_width="1dp"
+        style="@style/Prepaid.BillOptionsSelected"
+        android:layout_height="wrap_content"
+        android:background="@android:color/transparent"/>
+
+</LinearLayout>
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/processor/PrepaidProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/processor/PrepaidProcessor.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/processor/PrepaidProcessor.java	(revision )
@@ -10,7 +10,11 @@
 import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.PrepaidTypeChoosingFragmentDialog;
 import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.PrepaidTypeChoosingFragmentDialog.PrepaidTypeChoosingFragmentDialogCallback;
 import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.billpayment.PaymentFragmentDialog;
+import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless.PrepaidBillPaymentPrintAndFinishFragmentDialog;
 import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless.PrepaidPrintAndFinishFragmentDialog;
+import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless.PrepaidPrintTypeModel;
+import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless.PrepaidSunPassPrintAndFinishFragmentDialog;
+import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless.PrepaidWirelessPrintAndFinishFragmentDialog;
 import com.kaching123.tcr.model.BillPaymentDescriptionModel.PrepaidType;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.IPrePaidInfo;
 import com.kaching123.tcr.model.OrderType;
@@ -18,8 +22,15 @@
 import com.kaching123.tcr.model.SaleOrderModel;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.Broker;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.PrepaidUser;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.pinserve.request.BillPaymentRequest;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request.SunReplenishmentRequest;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.SunpassType;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.WirelessItem;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.WirelessType;
 import com.kaching123.tcr.processor.MoneybackProcessor.IVoidCallback;
 import com.kaching123.tcr.processor.PaymentProcessor.IPaymentProcessor;
+import com.kaching123.tcr.websvc.api.prepaid.BalanceResponse;
+import com.kaching123.tcr.websvc.api.prepaid.Category;
 
 import java.math.BigDecimal;
 import java.util.ArrayList;
@@ -95,11 +106,11 @@
     }
 
     protected void proceedToLongDistance(final FragmentActivity context) {
-        WirelessProcessor.create(user, TcrApplication.get().getShopInfo().prepaidTransactionMode, cashierId, false).longDistanceMode().callback(callbackImpl).init(context);
+        WirelessProcessor.create(user, TcrApplication.get().getShopInfo().prepaidTransactionMode, cashierId, false, broker).longDistanceMode().callback(callbackImpl).init(context);
     }
 
     protected void proceedToPinless(final FragmentActivity context) {
-        WirelessProcessor.create(user, TcrApplication.get().getShopInfo().prepaidTransactionMode, cashierId, false).pinlessMode().callback(callbackImpl).init(context);
+        WirelessProcessor.create(user, TcrApplication.get().getShopInfo().prepaidTransactionMode, cashierId, false, broker).pinlessMode().callback(callbackImpl).init(context);
     }
 
     protected void proceedToBillPayment(final FragmentActivity context) {
@@ -111,7 +122,7 @@
     }
 
     protected void proceedToWireless(final FragmentActivity context, boolean international) {
-        WirelessProcessor.create(user,  TcrApplication.get().getShopInfo().prepaidTransactionMode, cashierId, international).callback(callbackImpl).init(context);
+        WirelessProcessor.create(user,  TcrApplication.get().getShopInfo().prepaidTransactionMode, cashierId, international, broker).callback(callbackImpl).init(context);
     }
 
     protected void proceedToPayment(final FragmentActivity context, BigDecimal amount, final String description, final PrepaidType type, final SubProcessorDelegate delegate) {
@@ -194,7 +205,7 @@
                                 .getBlackStoneUser(), true, true);
     }
 
-    protected final SubProcessorCallback callbackImpl = new SubProcessorCallback() {
+    protected final PrepaidProcessorCallback callbackImpl = new PrepaidProcessorCallback() {
         @Override
         public void onComplete(FragmentActivity context) {
             exit();
@@ -219,6 +230,23 @@
         public void onVoidRequested(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions) {
             onVoid(context, orderGuid, transactions);
         }
+
+        @Override
+        public void onSunPassPrintRequested(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions, IPrePaidInfo info, SunReplenishmentRequest request, SunpassType type, BalanceResponse response) {
+
+            onCompleteWithSunPassPrint(context, orderGuid, transactions, info, type, request, response);
+        }
+
+        @Override
+        public void onWirelessPrintRequested(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions, IPrePaidInfo info, WirelessItem chosenCategory) {
+            proceedToWirelessPrintFinish(context, orderGuid, transactions, info, chosenCategory);
+
+        }
+
+        @Override
+        public void onBillPaymentPrintRequested(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions, IPrePaidInfo info, Category chosenCategory, BillPaymentRequest request, BigDecimal amount) {
+            proceedToBillPaymentPrintFinish(context, orderGuid, transactions, info, chosenCategory, request, amount);
+        }
     };
 
     protected void onCompleteWithPrint(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions, IPrePaidInfo info) {
@@ -228,5 +256,36 @@
     protected void onVoid(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions) {
         proceedToVoid(context, orderGuid, transactions);
     }
+    protected void onCompleteWithSunPassPrint(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions, IPrePaidInfo info, SunpassType type, SunReplenishmentRequest request,BalanceResponse response) {
+        proceedToSunPassPrintFinish(context, orderGuid, transactions, info, type, request, response);
+    }
+    private void proceedToSunPassPrintFinish(final FragmentActivity context, String orderGuid, final ArrayList<PaymentTransactionModel> transactions, IPrePaidInfo info, SunpassType type, SunReplenishmentRequest request, BalanceResponse response) {
+        PrepaidSunPassPrintAndFinishFragmentDialog.show(context, orderGuid, new PrintAndFinishFragmentDialogBase.IFinishConfirmListener() {
 
+            @Override
+            public void onConfirmed() {
+                exit();
+            }
+        }, transactions, info, type, request, response);
+    }
+
+    private void proceedToWirelessPrintFinish(final FragmentActivity context, String orderGuid, final ArrayList<PaymentTransactionModel> transactions, IPrePaidInfo info, WirelessItem chosenCategory) {
+        PrepaidWirelessPrintAndFinishFragmentDialog.show(context, orderGuid, new PrintAndFinishFragmentDialogBase.IFinishConfirmListener() {
+
+            @Override
+            public void onConfirmed() {
+                exit();
+            }
+        }, transactions, info, chosenCategory);
+    }
+
+    private void proceedToBillPaymentPrintFinish(final FragmentActivity context, String orderGuid, final ArrayList<PaymentTransactionModel> transactions, IPrePaidInfo info, Category chosenCategory, BillPaymentRequest request, BigDecimal amount) {
+        PrepaidBillPaymentPrintAndFinishFragmentDialog.show(context, orderGuid, new PrintAndFinishFragmentDialogBase.IFinishConfirmListener() {
+
+            @Override
+            public void onConfirmed() {
+                exit();
+            }
+        }, transactions, info, chosenCategory, request, amount);
+    }
 }
Index: TabletCR/src/main/res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/values/colors.xml	(revision 2972)
+++ TabletCR/src/main/res/values/colors.xml	(revision )
@@ -70,4 +70,10 @@
 
     <color name ="login_label_pressed">#3a3933</color>
 
+    <color name = "prepaid_dialog_dark_white">#b6b6b4</color>
+    <color name = "prepaid_dialog_white">#ffffff</color>
+    <color name = "prepaid_dialog_title_background_color">#468FC0</color>
+    <color name = "prepaid_dialog_buttons_background_color">#b8b8b8</color>
+    <color name = "prepaid_dialog_title_text_color">#949494</color>
+
 </resources>
Index: TabletCR/src/main/java/com/kaching123/tcr/processor/PrepaidProcessorCallback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/processor/PrepaidProcessorCallback.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/processor/PrepaidProcessorCallback.java	(revision )
@@ -0,0 +1,37 @@
+package com.kaching123.tcr.processor;
+
+import android.support.v4.app.FragmentActivity;
+
+import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless.PrepaidPrintTypeModel;
+import com.kaching123.tcr.model.BillPaymentDescriptionModel.PrepaidType;
+import com.kaching123.tcr.model.PaymentTransactionModel;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.IPrePaidInfo;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.pinserve.request.BillPaymentRequest;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request.SunReplenishmentRequest;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.SunpassType;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.WirelessItem;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.WirelessType;
+import com.kaching123.tcr.websvc.api.prepaid.BalanceResponse;
+import com.kaching123.tcr.websvc.api.prepaid.Category;
+
+import java.math.BigDecimal;
+import java.util.ArrayList;
+
+/**
+ * Created by dot on 15.02.14.
+ */
+    interface PrepaidProcessorCallback {
+
+        void onComplete(final FragmentActivity context);
+        void onCancel(final FragmentActivity context);
+        void onPaymentRequested(final FragmentActivity context,
+                                BigDecimal amount,
+                                String description,
+                                PrepaidType type,
+                                SubProcessorDelegate delegate);
+        void onPrintRequested(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions, IPrePaidInfo info);
+        void onVoidRequested(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions);
+        void onSunPassPrintRequested(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions, IPrePaidInfo info, SunReplenishmentRequest request, SunpassType type, BalanceResponse response);
+        void onWirelessPrintRequested(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions, IPrePaidInfo info, WirelessItem chosenCategory);
+        void onBillPaymentPrintRequested(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions, IPrePaidInfo info, Category chosenCategory, BillPaymentRequest request, BigDecimal amount);
+    }
Index: TabletCR/src/main/java/com/kaching123/tcr/activity/BaseCashierActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/activity/BaseCashierActivity.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/activity/BaseCashierActivity.java	(revision )
@@ -49,7 +49,6 @@
 import com.kaching123.tcr.commands.payment.blackstone.payment.BlackRefundCommand;
 import com.kaching123.tcr.commands.payment.blackstone.payment.BlackSaleCommand;
 import com.kaching123.tcr.commands.payment.blackstone.payment.BlackVoidCommand;
-import com.kaching123.tcr.commands.payment.pax.PaxGateway;
 import com.kaching123.tcr.commands.store.saleorder.AddItem2SaleOrderCommand;
 import com.kaching123.tcr.commands.store.saleorder.AddItem2SaleOrderCommand.BaseAddItem2SaleOrderCallback;
 import com.kaching123.tcr.commands.store.saleorder.AddSaleOrderCommand;
@@ -82,7 +81,6 @@
 import com.kaching123.tcr.fragment.saleorder.TotalCostFragment.IOrderActionListener;
 import com.kaching123.tcr.fragment.search.SearchItemsListFragment;
 import com.kaching123.tcr.fragment.tendering.history.HistoryDetailedOrderItemListFragment.RefundAmount;
-import com.kaching123.tcr.fragment.tendering.pax.BalancePAXPendingFragmentDialog;
 import com.kaching123.tcr.fragment.user.PermissionFragment;
 import com.kaching123.tcr.model.BarcodeListenerHolder;
 import com.kaching123.tcr.model.ItemExModel;
@@ -102,7 +100,6 @@
 import com.kaching123.tcr.model.payment.blackstone.payment.response.SaleResponse;
 import com.kaching123.tcr.processor.MoneybackProcessor;
 import com.kaching123.tcr.processor.MoneybackProcessor.RefundSaleItemInfo;
-import com.kaching123.tcr.processor.PaxBalanceProcessor;
 import com.kaching123.tcr.processor.PaymentProcessor;
 import com.kaching123.tcr.processor.PaymentProcessor.IPaymentProcessor;
 import com.kaching123.tcr.processor.PrepaidProcessor;
@@ -617,8 +614,6 @@
         menu.findItem(R.id.action_prepaid).setEnabled(getApp().isPrepaidUserValid());
         menu.findItem(R.id.action_order_items).setVisible(!isCreateReturnOrder);
         menu.findItem(R.id.action_prepaid).setVisible(!isCreateReturnOrder);
-        PaxGateway paxGateway = (PaxGateway)PaymentGateway.PAX_EBT_CASH.gateway();
-        menu.findItem(R.id.action_balance).setVisible(paxGateway.ready() && paxGateway.acceptPaxEbtEnabled());
         return true;
     }
 
@@ -732,12 +727,6 @@
 
     protected void actionBarItemClicked() {
 
-    }
-
-    @OptionsItem
-    protected void actionBalanceSelected() {
-        actionBarItemClicked();
-        PaxBalanceProcessor.get().checkBalance(this);
     }
 
     @OptionsItem
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/billpayment/CategorySelectionFragmentDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/billpayment/CategorySelectionFragmentDialog.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/billpayment/CategorySelectionFragmentDialog.java	(revision )
@@ -1,20 +1,29 @@
 package com.kaching123.tcr.fragment.tendering.pinserve.prepaid.billpayment;
 
+import android.graphics.Color;
+import android.graphics.Typeface;
 import android.os.Bundle;
 import android.support.v4.app.FragmentActivity;
 import android.text.Editable;
 import android.text.InputFilter;
+import android.view.Gravity;
 import android.view.View;
 import android.widget.AdapterView;
 import android.widget.AdapterView.OnItemSelectedListener;
 import android.widget.ArrayAdapter;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.ListView;
 import android.widget.Spinner;
 import android.widget.TextView;
 
+import com.kaching123.tcr.Logger;
 import com.kaching123.tcr.R;
+import com.kaching123.tcr.adapter.BillPaymentOptionsAdapter;
 import com.kaching123.tcr.commands.payment.blackstone.prepaid.bill.GetBillerCategoriesCommand;
 import com.kaching123.tcr.commands.payment.blackstone.prepaid.bill.GetMasterBillerPaymentOptionsCommand;
 import com.kaching123.tcr.commands.payment.blackstone.prepaid.bill.GetMasterBillersByCategoryCommand;
+import com.kaching123.tcr.component.AccountNumberCurrencyFormatInputFilter;
 import com.kaching123.tcr.component.CurrencyFormatInputFilter;
 import com.kaching123.tcr.component.CustomEditBox;
 import com.kaching123.tcr.component.KeyboardView;
@@ -22,6 +31,7 @@
 import com.kaching123.tcr.fragment.dialog.DialogUtil;
 import com.kaching123.tcr.fragment.dialog.StyledDialogFragment;
 import com.kaching123.tcr.fragment.dialog.WaitDialogFragment;
+import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.CredentialsDialogWithCustomEditViewBase;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.PrepaidUser;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.pinserve.request.GetBillerCategoriesRequest;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.pinserve.request.GetMasterBillerPaymentOptionsRequest;
@@ -41,6 +51,7 @@
 import com.kaching123.tcr.websvc.api.prepaid.MasterBillersByCategoryResponse;
 import com.kaching123.tcr.websvc.api.prepaid.PaymentOption;
 import com.kaching123.tcr.websvc.api.prepaid.VectorCategory;
+import com.kaching123.tcr.websvc.api.prepaid.VectorDocument;
 import com.kaching123.tcr.websvc.api.prepaid.VectorMasterBiller;
 import com.kaching123.tcr.websvc.api.prepaid.VectorPaymentOption;
 import com.telly.groundy.annotations.OnFailure;
@@ -55,84 +66,139 @@
  *         This class is intended to
  */
 @EFragment
-public class CategorySelectionFragmentDialog extends StyledDialogFragment  implements CustomEditBox.IKeyboardSupport {
+public class CategorySelectionFragmentDialog extends CredentialsDialogWithCustomEditViewBase implements CustomEditBox.IKeyboardSupport, BillPaymentOptionsAdapter.BillPaymentOptionsListener {
 
+    private static final int DEFAULT_ID = 0;
     private static final String DIALOG_NAME = "CategorySelectionFragmentDialog";
 
-    private static final int DEFAULT_ID = 0;
+    private final String DOLLAR_AMPERSAND = "$";
+
+
     private ArrayAdapter<Category> categoryArrayAdapter;
     private ArrayAdapter<MasterBiller> billerArrayAdapter;
-    private ArrayAdapter<PaymentOption> optionsArrayAdapter;
 
+    private BillPaymentOptionsAdapter optionsArrayAdapter;
+
     private Category chosenCategory;
+
     private MasterBiller chosenBiller;
+
     private PaymentOption chosenOption;
-    private BigDecimal chosenAmount;
+
     private BillerLoadRecord billerData;
 
+    private MetaInfo2 accNum;
+    private MetaInfo2 accNumValidation;
+
+    private BigDecimal chosenAmount;
     private BigDecimal minAmount = BigDecimal.ZERO;
     private BigDecimal maxAmount = BigDecimal.ZERO;
+    private BigDecimal minAccountNumber = BigDecimal.ZERO;
+    private BigDecimal maxAccountNumber = BigDecimal.ZERO;
 
+    public boolean isChargeValid() {
+        return isChargeValid;
+    }
+
+    public void setChargeValid(boolean isChargeValid) {
+        this.isChargeValid = isChargeValid;
+    }
+
+    private boolean isChargeValid;
     protected CategorySelectionFragmentDialogCallback callback;
-    @FragmentArg protected String transactionMode;
-    @FragmentArg protected String cashierId;
-    @FragmentArg protected PrepaidUser user;
+    @FragmentArg
+    protected String transactionMode;
+    @FragmentArg
+    protected String cashierId;
+    @FragmentArg
+    protected PrepaidUser user;
 
-    @ViewById protected KeyboardView keyboard;
-    @ViewById protected Spinner category;
-    @ViewById protected Spinner biller;
-    @ViewById protected Spinner options;
-    @ViewById protected CustomEditBox charge;
-    @ViewById protected TextView limitation;
+    @ViewById
+    protected KeyboardView keyboard;
+    @ViewById
+    protected ListView listview;
+    @ViewById
+    protected Spinner category;
+    @ViewById
+    protected Spinner biller;
+    @ViewById
+    protected CustomEditBox accountNumberValidate;
+    @ViewById
+    protected CustomEditBox accountNumber;
+    @ViewById
+    protected CustomEditBox charge;
+    @ViewById
+    protected TextView feeTextview;
+    @ViewById
+    protected TextView totalTextview;
+    @ViewById
+    protected TextView amountTextview;
+    @ViewById
+    protected LinearLayout linearlayout1;
+    @ViewById
+    protected LinearLayout linearlayout2;
 
-    @ColorRes(R.color.dlg_text_green) protected int colorOk;
-    @ColorRes(R.color.gray_dark) protected int colorDisabled;
+    @ColorRes(R.color.prepaid_dialog_white)
+    protected int colorOk;
+    @ColorRes(R.color.gray_dark)
+    protected int colorDisabled;
 
 
     public void setCallback(CategorySelectionFragmentDialogCallback callback) {
         this.callback = callback;
     }
 
-    @AfterViews  protected void init() {
+    @AfterViews
+    protected void init() {
         keyboard.attachEditView(charge);
+        keyboard.setEnterEnabled(false);
         setChargeView();
-        enableFinish(false);
+        setAccountValidateView();
+        setAccountView();
+        setChargeValid(false);
         setSpinners();
         WaitDialogFragment.show(getActivity(), getString(R.string.loading_message));
         getBillerCategories(getActivity());
     }
 
-    protected void setSpinners() {
-        biller.setEnabled(false);
-        category.setEnabled(false);
-        options.setEnabled(false);
+    private void initialMetaInfo2(int maxLength, int minLength) {
+        accNum = new MetaInfo2(accountNumber, true, false, maxLength, minLength);
+        accNumValidation = new MetaInfo2(accountNumberValidate, true, false, maxLength, minLength);
+    }
 
-        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-        ArrayList<PaymentOption> valuesPaymentOption = new ArrayList<PaymentOption>(1);
-        valuesPaymentOption.add(new DefaultPaymentOption());
+    @AfterTextChange
+    protected void accountNumberAfterTextChanged(Editable s) {
+        String numText = s.toString();
+        String numValidationText = accNumValidation.editable.getText().toString();
+        accNumValidation.validated = accNum.validated = numText.length() >= accNum.min && numValidationText.equals(numText);
+        enableFinish();
+    }
 
-        optionsArrayAdapter = new ArrayAdapter<PaymentOption>(getActivity(), R.layout.prepaid_spinner_item, valuesPaymentOption);
-        optionsArrayAdapter.setDropDownViewResource(R.layout.prepaid_spinner_dropdown_item);
+    @AfterTextChange
+    protected void accountNumberValidateAfterTextChanged(Editable s) {
 
-        options.setAdapter(optionsArrayAdapter);
-        options.setOnItemSelectedListener(new OnItemSelectedListener() {
-            @Override
-            public void onItemSelected(AdapterView<?> ignore1, View ignore2, int position, long ignore3) {
-                if (position == DEFAULT_ID) {
-                    resetInput(false);
-                    return;
+        accountNumberAfterTextChanged((Editable) accNum.editable.getText());
-                }
+    }
-                resetInput(true);
-                chosenOption = (PaymentOption) ignore1.getAdapter().getItem(position);
 
+    protected void setLinearLayout(int visible) {
+        setViewVisible(visible, linearlayout1);
+        setViewVisible(visible, linearlayout2);
-            }
+    }
 
-            @Override
-            public void onNothingSelected(AdapterView<?> ignore) {
+    protected void setViewVisible(int visible, View view) {
+        view.setVisibility(visible);
+    }
 
+    private void setListView(VectorPaymentOption options) {
+        optionsArrayAdapter = new BillPaymentOptionsAdapter(getActivity(), options, this);
+        listview.setAdapter(optionsArrayAdapter);
+        optionsArrayAdapter.notifyDataSetChanged();
-            }
+    }
-        });
-        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+
+    protected void setSpinners() {
+        biller.setEnabled(false);
+        category.setEnabled(false);
+
         ArrayList<MasterBiller> valuesBiller = new ArrayList<MasterBiller>(1);
         valuesBiller.add(new DefaultBiller());
 
@@ -144,12 +210,9 @@
             @Override
             public void onItemSelected(AdapterView<?> ignore1, View ignore2, int position, long ignore3) {
                 if (position == DEFAULT_ID) {
-                    options.setEnabled(false);
-                    optionsArrayAdapter = (ArrayAdapter) options.getAdapter();
-                    optionsArrayAdapter.clear();
-                    optionsArrayAdapter.add(new DefaultPaymentOption());
-                    options.setEnabled(false);
-                    limitation.setText("");
+
+                    setLinearLayout(View.GONE);
+
                     return;
                 }
                 chosenBiller = (MasterBiller) ignore1.getAdapter().getItem(position);
@@ -204,16 +267,79 @@
         });
     }
 
-    private void resetInput(boolean enabled) {
-        keyboard.setEnabled(enabled);
+    private void setAccountFilter(BigDecimal min, BigDecimal max) {
+        initialMetaInfo2(min.intValue(), max.intValue());
+        resetEditViews();
+        resetTextViews();
+        accountNumber.setFilters(new InputFilter[]{new AccountNumberCurrencyFormatInputFilter(min.toString(), max.toString())});
+        accountNumberValidate.setFilters(new InputFilter[]{new AccountNumberCurrencyFormatInputFilter(min.toString(), max.toString())});
+
+    }
+
+    private void resetEditViews() {
+        accountNumber.setText("");
+        accountNumberValidate.setText("");
         charge.setText("");
     }
 
-    @AfterTextChange protected void chargeAfterTextChanged(Editable s) {
+    private void resetTextViews() {
+        feeTextview.setText("");
+        amountTextview.setText("");
+        totalTextview.setText("");
+    }
+
+    private void setAccountView() {
+        accountNumber.setKeyboardSupportConteiner(this);
+        accountNumber.setEditListener(new CustomEditBox.IEditListener() {
+
+            @Override
+            public boolean onChanged(String text) {
+                return complete();
+            }
+        });
+    }
+
+    private void setAmountTextView(String s) {
+        if (s.length() > 0)
+            amountTextview.setText(DOLLAR_AMPERSAND + s);
+    }
+
+    private void setFeeTextView(PaymentOption paymentOption) {
+        feeTextview.setText(DOLLAR_AMPERSAND + paymentOption.feeAmount);
+    }
+
+    private void setTotalTextView() {
+        double fee = 0.0;
+        double amount = 0.0;
+        if (feeTextview.getText().toString() != null && feeTextview.getText().toString() != "") {
+            fee = new BigDecimal(feeTextview.getText().toString().substring(1)).doubleValue();
+        }
+        if (amountTextview.getText().toString() != null && amountTextview.getText().toString() != "") {
+            amount = new BigDecimal((amountTextview.getText().toString().substring(1))).doubleValue();
+        }
+        totalTextview.setText(DOLLAR_AMPERSAND + String.valueOf(fee + amount));
+    }
+
+    private void setAccountValidateView() {
+        accountNumberValidate.setKeyboardSupportConteiner(this);
+        accountNumberValidate.setEditListener(new CustomEditBox.IEditListener() {
+
+            @Override
+            public boolean onChanged(String text) {
+                return complete();
+            }
+        });
+    }
+
+
+    @AfterTextChange
+    protected void chargeAfterTextChanged(Editable s) {
         if (s == null) {
-            enableFinish(false);
+            setChargeValid(false);
             return;
         }
+        setAmountTextView(s.toString());
+        setTotalTextView();
         try {
             assert minAmount != null;
             assert maxAmount != null;
@@ -223,55 +349,108 @@
                     charge.setText(UiHelper.valueOf(maxAmount));
                     return;
                 }
-                enableFinish(true);
+                setChargeValid(true);
             } else {
-                enableFinish(false);
+                setChargeValid(false);
             }
         } catch (NumberFormatException e) {
-            enableFinish(false);
+            setChargeValid(false);
         }
+        enableFinish();
     }
 
-    @Override public void attachMe2Keyboard(CustomEditBox v) {
+
+
+    @Override
+    public void attachMe2Keyboard(CustomEditBox v) {
+        if (v == accountNumber)
+            keyboard.setDotEnabled(false);
+        else if (v == accountNumberValidate)
+            keyboard.setDotEnabled(false);
+        else if (v == charge)
+            keyboard.setDotEnabled(true);
         keyboard.attachEditView(v);
     }
 
-    @Override public void detachMe4Keyboard(CustomEditBox v) {
+    @Override
+    public void detachMe4Keyboard(CustomEditBox v) {
         keyboard.detachEditView();
     }
 
-    @Override public void onActivityCreated(Bundle savedInstanceState) {
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
+        getNegativeButton().setTextColor(Color.WHITE);
+        getNegativeButton().setTextSize(25);
+        getNegativeButton().setTypeface(Typeface.DEFAULT_BOLD);
+        getPositiveButton().setTypeface(Typeface.DEFAULT_BOLD);
+        getPositiveButton().setTextSize(25);
         getDialog().getWindow().setLayout(
                 getResources().getDimensionPixelOffset(R.dimen.prepaid_category_dlg_width),
                 getDialog().getWindow().getAttributes().height);
     }
+    @Override
+    protected int getSeparatorColor() {
+        return Color.WHITE;
+    }
 
-    @Override protected int getNegativeButtonTitle() {
+    @Override
+    protected int getTitleTextColor() {
+        return Color.WHITE;
+    }
+
+    @Override
+    protected int getTitleViewBackgroundColor() {
+        return getResources().getColor(R.color.prepaid_dialog_title_background_color);
+    }
+
+    @Override
+    protected int getButtonsBackgroundColor() {
+        return getResources().getColor(R.color.prepaid_dialog_buttons_background_color);
+    }
+
+    @Override
+    protected int getTitleIcon() {
+        return R.drawable.icon_bill_payment;
+    }
+
+    @Override
+    protected int getTitleGravity() {
+        return Gravity.LEFT;
+    }
+
+    @Override
+    protected int getNegativeButtonTitle() {
         return R.string.btn_back;
     }
 
-    @Override protected int getPositiveButtonTitle() {
+    @Override
+    protected int getPositiveButtonTitle() {
         return R.string.btn_next;
     }
 
-    @Override protected boolean hasNegativeButton() {
+    @Override
+    protected boolean hasNegativeButton() {
         return true;
     }
 
-    @Override protected boolean hasPositiveButton() {
+    @Override
+    protected boolean hasPositiveButton() {
         return true;
     }
 
-    @Override protected int getDialogContentLayout() {
+    @Override
+    protected int getDialogContentLayout() {
         return R.layout.prepaid_category_fragment;
     }
 
-    @Override protected int getDialogTitle() {
-        return R.string.prepaid_dialog_category_title;
+    @Override
+    protected int getDialogTitle() {
+        return R.string.prepaid_dialog_wireless_bill_payment_title;
     }
 
-    @Override protected OnDialogClickListener getPositiveButtonListener() {
+    @Override
+    protected OnDialogClickListener getPositiveButtonListener() {
         return new OnDialogClickListener() {
             @Override
             public boolean onClick() {
@@ -281,7 +460,8 @@
         };
     }
 
-    @Override protected OnDialogClickListener getNegativeButtonListener() {
+    @Override
+    protected OnDialogClickListener getNegativeButtonListener() {
         return new OnDialogClickListener() {
             @Override
             public boolean onClick() {
@@ -292,7 +472,7 @@
     }
 
     protected boolean complete() {
-        callback.onConditionSelected(chosenCategory, chosenBiller, chosenOption, chosenAmount, billerData);
+        callback.onConditionSelected(chosenCategory, chosenBiller, chosenOption, chosenAmount, billerData, accountNumber.getText().toString());
         return true;
     }
 
@@ -312,12 +492,26 @@
         DialogUtil.hide(activity, DIALOG_NAME);
     }
 
-    protected void enableFinish(Boolean enabled) {
-        getPositiveButton().setEnabled(enabled);
-        getPositiveButton().setTextColor(enabled ? colorOk : colorDisabled);
-        keyboard.setEnterEnabled(enabled);
+    protected void enableFinish() {
+        boolean isValid = isValid();
+        getPositiveButton().setEnabled(isValid);
+        getPositiveButton().setTextColor(isValid ? colorOk : colorDisabled);
+        keyboard.setEnterEnabled(isValid);
     }
 
+    private boolean isValid() {
+        return accNum.validated && accNumValidation.validated && isChargeValid() && feeTextview.getText().toString() != null && feeTextview.getText().toString() != "";
+    }
+
+    @Override
+    public void OnClicked(int position, PaymentOption paymentOption) {
+
+        chosenOption = paymentOption;
+        setFeeTextView(paymentOption);
+        setTotalTextView();
+        enableFinish();
+    }
+
     public interface CategorySelectionFragmentDialogCallback {
 
         public abstract void onCancel();
@@ -328,7 +522,8 @@
                                                  MasterBiller chosenBiller,
                                                  PaymentOption chosenOption,
                                                  BigDecimal amount,
-                                                 BillerLoadRecord bilelrData );
+                                                 BillerLoadRecord bilelrData,
+                                                 String accountNumber);
     }
 
     @OnSuccess(GetBillerCategoriesCommand.class)
@@ -359,7 +554,6 @@
         WaitDialogFragment.hide(getActivity());
         VectorMasterBiller billers = result.masterBillers;
         assert billers != null && !billers.isEmpty();
-
         billerArrayAdapter.clear();
         billerArrayAdapter.add(new DefaultBiller());
         this.biller.setSelection(0);
@@ -379,19 +573,22 @@
         VectorPaymentOption options = result.paymentOptions;
         assert options != null && !options.isEmpty();
 
-        optionsArrayAdapter.clear();
-        optionsArrayAdapter.add(new DefaultPaymentOption());
-        this.options.setSelection(0);
-        optionsArrayAdapter.addAll(options);
-        this.options.setEnabled(true);
+        setLinearLayout(View.VISIBLE);
+        setListView(options);
         this.billerData = result.billerData;
+
         minAmount = new BigDecimal(billerData.vendorTranAmtMin);
         maxAmount = new BigDecimal(billerData.vendorTranAmtMax);
+
+        minAccountNumber = new BigDecimal(billerData.vendorAccountLengthMin);
+        maxAccountNumber = new BigDecimal(billerData.vendorAccountLengthMax);
+
         if (minAmount.compareTo(BigDecimal.ZERO) != 0 || maxAmount.compareTo(BigDecimal.ZERO) != 0) {
-            limitation.setText(getString(R.string.prepaid_dialog_amount_limitations, UiHelper.valueOf(minAmount), UiHelper.valueOf(maxAmount)));
+            charge.setHint(getString(R.string.prepaid_dialog_amount_limitations, UiHelper.valueOf(minAmount), UiHelper.valueOf(maxAmount)));
         } else {
-            limitation.setText(R.string.prepaid_dialog_amount_no_limitation);
+            charge.setHint(R.string.prepaid_dialog_amount_no_limitation);
         }
+        setAccountFilter(minAccountNumber, maxAccountNumber);
     }
 
     @OnFailure(GetMasterBillerPaymentOptionsCommand.class)
@@ -451,6 +648,7 @@
             return stringValue;
         }
     }
+
     private class DefaultBiller extends MasterBiller {
 
         private final String stringValue;
@@ -464,17 +662,5 @@
             return stringValue;
         }
     }
-    private class DefaultPaymentOption extends PaymentOption {
 
-        private final String stringValue;
-
-        public DefaultPaymentOption() {
-            stringValue = getString(R.string.bill_payment_category_dialog_payment_option_placeholder);
-        }
-
-        @Override
-        public String toString() {
-            return stringValue;
-        }
-    }
 }
Index: TabletCR/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/values/strings.xml	(revision 2972)
+++ TabletCR/src/main/res/values/strings.xml	(revision )
@@ -37,7 +37,7 @@
     <string name="refund_confirm_title_failed">Refund failed</string>
 
 
-    <string name="prepaid_dialog_type_title">Please, choose service</string>
+    <!--<string name="prepaid_dialog_type_title">Please, choose service</string>-->
     <string name="prepaid_dialog_category_title">Select Product</string>
     <string name="prepaid_dialog_credentials_title">Specify credentials</string>
     <string name="prepaid_dialog_conditions_title">Choose conditions</string>
@@ -51,7 +51,7 @@
     <string name="prepaid_dialog_amount_no_limitation">No payment amount limitation</string>
     <string formatted = "false" name="prepaid_dialog_amount_limitations">Payment min : %s max : %s</string>
 
-    <string name="sunpass_prepaid_dialog_credentials_title">Reload Transponder</string>
+    <!--<string name="sunpass_prepaid_dialog_credentials_title">Reload Transponder</string>-->
     <string name="sunpass_prepaid_dialog_custom_amount_hint">Enter amount</string>
 
     <string name="prepaid_topup_description">Top Up Items</string>
@@ -1317,4 +1317,46 @@
     <string name="order_transactions_status_filter_closed">Closed</string>
     <string name="order_transactions_status_filter_all">All</string>
 
+<!--newly added for prepaid-->
+    <string name="prepaid_dialog_telephone_number_hint">Enter Telephone Number</string>
+    <string name="prepaid_dialog_long_distance_title">Long Distance</string>
+    <string name="prepaid_dialog_pinless_recharge_title">Pinless Recharge</string>
+    <string name="prepaid_dialog_wireless_recharge_title">Wireless Recharge</string>
+    <string name="prepaid_dialog_wireless_recharge_international_title">International Topup</string>
+    <string name="prepaid_dialog_wireless_bill_payment_title">Bill Payment</string>
+    <string name="prepaid_dialog_type_title">Select Product</string>
+
+    <string name="sunpass_prepaid_dialog_credentials_title">Sun Pass</string>
+    <string name="prepaid_dialog_sunpass_transponder_title">SunPass    Activate or Replenish® Sunpass Transponder</string>
+    <string name="prepaid_dialog_sunpass_pay_your_document_title">SunPass    Pay your Document</string>
+    <string name="prepaid_payment_complete_body_title">Your order has been successfully</string>
+    <string name="prepaid_wireless_payment_complete_order_data">Your order data</string>
+    <string name="prepaid_wireless_payment_complete_order_num">Order Number:</string>
+    <string name="prepaid_wireless_payment_complete_product">Product:</string>
+    <string name="prepaid_wireless_payment_complete_order_total_price">Total:</string>
+    <string name="prepaid_sunpass_credencial_account_hint">Enter your transponder Number</string>
+    <string name="prepaid_sunpass_credencial_account_validate_hint">Confirm your transponder Number</string>
+    <string name="btn_check">Check</string>
+    <string name="btn_sumbit">Submit</string>
+    <string name="sunpass_credential_your_balance">Your Current balance is:</string>
+    <string name="sunpass_credential_error">Error !!!</string>
+    <string name="sunpass_credential_error_content">Your Current balance is less than 0.</string>
+    <string name="sunpass_credential_transponder_numer">Transponder Number</string>
+    <string name="sunpass_credential_last_known_balance">Last Known Balance</string>
+    <string name="sunpass_credential_minimum_recharge_amount">Minimum recharge amount</string>
+    <string name="sunpass_credential_review_order_detail">Review Order Details:</string>
+    <string name="sunpass_credential_amount">Amount:</string>
+    <string name="sunpass_credential_fees">Fee</string>
+    <string name="sunpass_credential_tatal">Total:</string>
+    <string name="sunpass_pyd_credential_document_num_note">Violation document sent by Florida Department of transportation(FDOT), include letters</string>
+    <string name="sunpass_pyd_credential_document_num_hint">Enter Document ID Number</string>
+    <string name="sunpass_pyd_credential_plate_num_note">As Shown on invoice violation or citacion (exclude hyphens or dashes)</string>
+    <string name="sunpass_pyd_credential_plate_num_hint">Enter your License Plate Number</string>
+    <string name="sunpass_pyd_order_view_item_name">Document ID: </string>
+    <string name="sunpass_pyd_order_view_item_content">Amount Due</string>
+    <string name="bill_pauments_fee">Fee:</string>
+    <string name="bill_pauments_amount">Amount:</string>
+    <string name="bill_pauments_type">Type</string>
+    <string name="bill_pauments_description">Description</string>
+    <string name="prepaid_bill_pauments_receipt_account_number">Account Number</string>
 </resources>
Index: TabletCR/src/main/java/com/kaching123/tcr/component/TelephoneEditNumberCurrencyFormatInputFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/component/TelephoneEditNumberCurrencyFormatInputFilter.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/component/TelephoneEditNumberCurrencyFormatInputFilter.java	(revision )
@@ -0,0 +1,13 @@
+package com.kaching123.tcr.component;
+
+/**
+ * Created by gdubina on 29.11.13.
+ */
+public class TelephoneEditNumberCurrencyFormatInputFilter extends RegexpFormatInputFilter {
+
+    private static final String REGEXP = "^(\\d{0,22})?(\\.[0-9]{0,2})?$";
+
+    public TelephoneEditNumberCurrencyFormatInputFilter() {
+        super(REGEXP);
+    }
+}
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/PrepaidBillPaymentPrintAndFinishFragmentDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/PrepaidBillPaymentPrintAndFinishFragmentDialog.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/PrepaidBillPaymentPrintAndFinishFragmentDialog.java	(revision )
@@ -0,0 +1,178 @@
+package com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless;
+
+import android.database.Cursor;
+import android.graphics.Color;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.v4.app.FragmentActivity;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.getbase.android.db.provider.ProviderAction;
+import com.getbase.android.db.provider.Query;
+import com.googlecode.androidannotations.annotations.AfterViews;
+import com.googlecode.androidannotations.annotations.EFragment;
+import com.googlecode.androidannotations.annotations.FragmentArg;
+import com.googlecode.androidannotations.annotations.ViewById;
+import com.kaching123.tcr.R;
+import com.kaching123.tcr.adapter.PrepaidReceiptAdapter;
+import com.kaching123.tcr.commands.print.pos.PrintPrepaidOrderCommand;
+import com.kaching123.tcr.fragment.dialog.DialogUtil;
+import com.kaching123.tcr.fragment.dialog.WaitDialogFragment;
+import com.kaching123.tcr.fragment.tendering.PrepaidChooseCustomerDialog;
+import com.kaching123.tcr.fragment.tendering.payment.PayPrintAndFinishFragmentDialog;
+import com.kaching123.tcr.model.PaymentTransactionModel;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.IPrePaidInfo;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.pinserve.request.BillPaymentRequest;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.WirelessItem;
+import com.kaching123.tcr.store.ShopProvider;
+import com.kaching123.tcr.store.ShopSchema2;
+import com.kaching123.tcr.store.ShopStore;
+import com.kaching123.tcr.websvc.api.prepaid.Category;
+import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;
+
+import java.math.BigDecimal;
+import java.util.ArrayList;
+
+
+/**
+ * @author Ivan v. Rikhmayer
+ */
+@EFragment
+public class PrepaidBillPaymentPrintAndFinishFragmentDialog extends PayPrintAndFinishFragmentDialog {
+    private static final Uri URI_ORDER = ShopProvider.getContentUri(ShopStore.SaleOrderView.URI_CONTENT);
+    private static final String DIALOG_NAME = PrepaidBillPaymentPrintAndFinishFragmentDialog.class.getSimpleName();
+
+    @ViewById
+    protected TextView productOrdernum, productNameDisplay, accountNumber_Display, amount, fee, total;
+    @FragmentArg
+    protected IPrePaidInfo info;
+    @FragmentArg
+    protected BigDecimal mAmount;
+    @FragmentArg
+    protected Category chosenCategory;
+    @FragmentArg
+    protected BillPaymentRequest request;
+    static private FragmentActivity mContext;
+
+    @Override
+    protected int getDialogTitle() {
+        return R.string.prepaid_dialog_wireless_bill_payment_title;
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        getDialog().getWindow().setLayout(getResources().getDimensionPixelOffset(R.dimen.prepaid_supass_choice_dlg_width), getResources().getDimensionPixelOffset(R.dimen.prepaid_wireless_payment_complete_heigth));
+        setCancelable(false);
+    }
+
+    @AfterViews
+    void afterViewInitList() {
+        productOrdernum.setText(getOrderNum());
+        productNameDisplay.setText(chosenCategory.id);
+        accountNumber_Display.setText(request.accountNumber);
+        amount.setText(mAmount.toString());
+        fee.setText(String.valueOf(request.feeAmount));
+        total.setText(getTotal());
+    }
+
+    protected String getTotal() {
+
+        Query query = ProviderAction
+                .query(URI_ORDER)
+                .projection(
+                        ShopSchema2.SaleOrderView2.SaleOrderTable.TML_TOTAL_PRICE)
+                .where(ShopSchema2.SaleOrderView2.SaleOrderTable.GUID + " = ?", orderGuid);
+        query/*
+                .where(SaleOrderTable.STATUS + " = ?", getOrderType().ordinal())*/
+                .orderBy(ShopSchema2.SaleOrderView2.SaleOrderTable.CREATE_TIME);
+        Cursor c = query.perform(mContext);
+        String total = null;
+        if (c.moveToFirst()) {
+            total = c.getString(0);
+        }
+        c.close();
+
+
+        return total;
+    }
+
+    protected String getOrderNum() {
+        Cursor c = ProviderAction.query(URI_ORDER)
+                .projection(
+                        ShopSchema2.SaleOrderView2.RegisterTable.TITLE,
+                        ShopSchema2.SaleOrderView2.SaleOrderTable.PRINT_SEQ_NUM
+                )
+                .where(ShopSchema2.SaleOrderView2.SaleOrderTable.GUID + " = ?", orderGuid)
+                .perform(mContext);
+
+        String registerTitle = "";
+        int seqNum = 0;
+        if (c.moveToFirst()) {
+            registerTitle = c.getString(0);
+            seqNum = c.getInt(1);
+        }
+
+        c.close();
+
+        return registerTitle + "-" + seqNum;
+    }
+
+    @Override
+    protected int getDialogContentLayout() {
+        return R.layout.bill_payment_complete;
+    }
+
+    @Override
+    protected int getTitleGravity() {
+        return Gravity.LEFT;
+    }
+
+    @Override
+    protected int getTitleTextColor() {
+        return Color.WHITE;
+    }
+
+    @AfterViews
+    protected void initViews() {
+        printBox.setChecked(true);
+    }
+
+    @Override
+    protected int getTitleIcon() {
+        return R.drawable.icon_bill_payment;
+    }
+
+    @Override
+    protected void printOrder(boolean skipPaperWarning) {
+        WaitDialogFragment.show(getActivity(), getString(R.string.wait_printing));
+        PrintPrepaidOrderCommand.start(getActivity(), false, skipPaperWarning, orderGuid, info, printOrderCallback);
+    }
+
+    @Override
+    protected void sendDigitalOrder() {
+        PrepaidChooseCustomerDialog.show(getActivity(), orderGuid, info);
+    }
+
+    public static void show(FragmentActivity context,
+                            String orderGuid,
+                            IFinishConfirmListener listener,
+                            ArrayList<PaymentTransactionModel> transactions,
+                            IPrePaidInfo info,
+                            Category chosenCategory,
+                            BillPaymentRequest request,
+                            BigDecimal mAmount
+    ) {
+        mContext = context;
+        DialogUtil.show(context,
+                DIALOG_NAME,
+                PrepaidBillPaymentPrintAndFinishFragmentDialog_.builder().info(info).transactions(transactions).request(request).mAmount(mAmount).orderGuid(orderGuid).chosenCategory(chosenCategory).build()).setListener(listener);
+    }
+
+    public static void hide(FragmentActivity activity) {
+        DialogUtil.hide(activity, DIALOG_NAME);
+    }
+
+}
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pax/RefundPAXPendingFragmentDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pax/RefundPAXPendingFragmentDialog.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pax/RefundPAXPendingFragmentDialog.java	(revision 2972)
@@ -1,104 +0,0 @@
-package com.kaching123.tcr.fragment.tendering.pax;
-
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-import android.widget.TextView;
-
-import com.googlecode.androidannotations.annotations.EFragment;
-import com.googlecode.androidannotations.annotations.ViewById;
-import com.kaching123.tcr.R;
-import com.kaching123.tcr.commands.payment.pax.PaxRefundCommand;
-import com.kaching123.tcr.fragment.dialog.DialogUtil;
-import com.kaching123.tcr.fragment.tendering.TransactionPendingFragmentDialogBase;
-import com.kaching123.tcr.model.PaymentTransactionModel;
-import com.kaching123.tcr.model.SaleOrderModel;
-import com.kaching123.tcr.model.payment.blackstone.payment.response.SaleResponse;
-import com.kaching123.tcr.model.payment.general.transaction.Transaction;
-
-import java.math.BigDecimal;
-
-/**
- * @author Ivan v. Rikhmayer
- */
-@EFragment
-public class RefundPAXPendingFragmentDialog extends TransactionPendingFragmentDialogBase<RefundPAXPendingFragmentDialog, SaleResponse> {
-
-    @ViewById
-    protected TextView message;
-
-    private BigDecimal amount;
-    private IRefundProgressListener listener;
-    private SaleOrderModel childOrderModel;
-
-    public RefundPAXPendingFragmentDialog setListener(IRefundProgressListener listener) {
-        this.listener = listener;
-        return this;
-    }
-
-    private static final String DIALOG_NAME = "RefundPAXPendingFragmentDialog";
-
-    @Override
-    public void onActivityCreated(Bundle savedInstanceState) {
-        super.onActivityCreated(savedInstanceState);
-        setCancelable(false);
-        message.setSingleLine(false);
-        message.setText(getString(R.string.pax_refund_instructions, transaction.getGuid()));
-    }
-
-    @Override
-    protected void doCommand() {
-        transaction.getGateway().gateway().refund(getActivity(), new PaxRefundCommand.PaxREFUNDCommandBaseCallback() {
-
-            @Override
-            protected void handleSuccess(SaleOrderModel childOrderModel,
-                                         PaymentTransactionModel childTransactionModel,
-                                         Transaction transaction,
-                                         String errorMessage) {
-                listener.onComplete(childTransactionModel, transaction, childOrderModel, errorMessage);
-            }
-
-            @Override
-            protected void handleError() {
-                listener.onCancel();
-            }
-        }, null, null, new PaymentTransactionModel(getApp().getShiftGuid(), transaction), amount, childOrderModel, false);
-    }
-
-    public RefundPAXPendingFragmentDialog setAmount(BigDecimal amount) {
-        this.amount = amount;
-        return this;
-    }
-
-    public RefundPAXPendingFragmentDialog setChildOrderModel(SaleOrderModel childOrderModel) {
-        this.childOrderModel = childOrderModel;
-        return this;
-    }
-
-    @Override
-    protected int getDialogTitle() {
-        return R.string.blackstone_pay_wait_title;
-    }
-
-    public static void show(FragmentActivity context,
-                            final Transaction transaction,
-                            BigDecimal amount,
-                            SaleOrderModel childOrderModel,
-                            IRefundProgressListener listener) {
-        DialogUtil.show(context, DIALOG_NAME, RefundPAXPendingFragmentDialog_.builder().build())
-                .setChildOrderModel(childOrderModel)
-                .setAmount(amount)
-                .setListener(listener)
-                .setTransaction(transaction);
-    }
-
-    public interface IRefundProgressListener {
-
-        void onComplete(PaymentTransactionModel child, Transaction parent, SaleOrderModel childOrderModel, String errorMessage);
-
-        void onCancel();
-    }
-
-    public static void hide(FragmentActivity activity) {
-        DialogUtil.hide(activity, DIALOG_NAME);
-    }
-}
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunCredentialsFragmentDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunCredentialsFragmentDialog.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunCredentialsFragmentDialog.java	(revision )
@@ -1,19 +1,27 @@
 package com.kaching123.tcr.fragment.tendering.pinserve.prepaid.sunpass;
 
+import android.graphics.Color;
+import android.graphics.Typeface;
 import android.os.Bundle;
 import android.support.v4.app.FragmentActivity;
 import android.text.Editable;
-import android.view.KeyEvent;
-import android.view.inputmethod.EditorInfo;
-import android.widget.EditText;
+import android.text.InputFilter;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.LinearLayout;
+import android.widget.Spinner;
 import android.widget.TextView;
-import android.widget.TextView.OnEditorActionListener;
 
 import com.kaching123.tcr.R;
 import com.kaching123.tcr.commands.payment.blackstone.prepaid.sunpass.GetSunPassBalancCommand;
+import com.kaching123.tcr.component.CustomEditBox;
+import com.kaching123.tcr.component.KeyboardView;
+import com.kaching123.tcr.component.SunpassCredencialEditNumberCurrencyFormatInputFilter;
 import com.kaching123.tcr.fragment.dialog.DialogUtil;
 import com.kaching123.tcr.fragment.dialog.WaitDialogFragment;
-import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.CredentialsDialogBase;
+import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.CredentialsDialogWithCustomEditViewBase;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.PrepaidUser;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request.SunEntryRequest;
 import com.kaching123.tcr.processor.PrepaidProcessor;
@@ -27,96 +35,278 @@
 import com.telly.groundy.annotations.OnSuccess;
 import com.telly.groundy.annotations.Param;
 
+import java.math.BigDecimal;
+import java.util.ArrayList;
+
 /**
  * @author Ivan v. Rikhmayer
  *         This class is intended to
  */
 @EFragment
-public class SunCredentialsFragmentDialog extends CredentialsDialogBase {
+public class SunCredentialsFragmentDialog extends CredentialsDialogWithCustomEditViewBase implements CustomEditBox.IKeyboardSupport {
 
     private static final String DIALOG_NAME = "SunCredentialsFragmentDialog";
     private static final String Y = "Y";
-
-    private MetaInfo accNum;
-    private MetaInfo accNumValidation;
-
-    @FragmentArg protected String cashierId;
-    @FragmentArg protected PrepaidUser user;
-    @FragmentArg protected String transactionMode;
-
+    private BigDecimal minAmount = BigDecimal.TEN;
+    private BigDecimal maxAmount = new BigDecimal(500);
+    private final static BigDecimal FEE_AMOUNT = new BigDecimal(1.5);
+    private CredentialsDialogWithCustomEditViewBase.MetaInfo2 accNum;
+    private CredentialsDialogWithCustomEditViewBase.MetaInfo2 accNumValidation;
+    private BalanceResponse response;
+    @ViewById
+    protected KeyboardView keyboard;
+    @FragmentArg
+    protected String cashierId;
+    @FragmentArg
+    protected PrepaidUser user;
+    @FragmentArg
+    protected String transactionMode;
+    @ViewById
+    protected CustomEditBox charge;
+    @ViewById
+    protected Spinner biller;
+    @ViewById
+    protected LinearLayout linearlayout1;
+    @ViewById
+    protected LinearLayout linearlayout2;
+    @ViewById
+    protected LinearLayout linearlayout3;
+    @ViewById
+    protected TextView balanceHeader;
+    @ViewById
+    protected TextView transponderNumber;
+    @ViewById
+    protected TextView lastKnownBalance;
+    @ViewById
+    protected TextView minimumRechargeAmount;
+    @ViewById
+    protected TextView error;
+    @ViewById
+    protected TextView errorContent;
     protected SunCredentialsFragmentDialogCallback callback;
+    private ArrayAdapter<String> billerAdapter;
+    private String chosenBiller;
+    private final String BILLER_DEFAULT = "Select Amount";
+    final int DEFAULT_ITEM_POSITION = 0;
+    private final String DollarAmpsand = "$";
+    private boolean isError;
+    @ViewById
+    protected CustomEditBox accountNumber;
+    @ViewById
+    protected CustomEditBox accountNumberValidate;
 
-    @ViewById protected EditText accountNumber;
-    @ViewById protected EditText accountNumberValidate;
-
-    @ViewById protected TextView accountNumberLabel;
-    @ViewById protected TextView accountNumberValidateLabel;
-
-
     public void setCallback(SunCredentialsFragmentDialogCallback callback) {
         this.callback = callback;
     }
 
-    @AfterViews  protected void init() {
+    @AfterViews
+    protected void init() {
         enableFinish(false);
-
         final int maxLength = 13;
         final int minLength = 1;
 
+        accNum = new MetaInfo2(accountNumber, true, false, maxLength, minLength);
+        accNumValidation = new MetaInfo2(accountNumberValidate, true, false, maxLength, minLength);
 
-        accNum = new MetaInfo(accountNumber, accountNumberLabel, true, false, maxLength, minLength);
-        accNumValidation = new MetaInfo(accountNumberValidate, accountNumberValidateLabel, true, false, maxLength, minLength);
+        keyboard.attachEditView(accountNumber);
+        keyboard.setEnabled(true);
+        keyboard.setEnterEnabled(false);
+        keyboard.setDotEnabled(false);
+        setAccountNumberEditView();
+        setAccountNumberValidateLabelEditView();
+        setAmountBlanceViewGone();
         refresh();
     }
+    private void setSpinner()
+    {
+        biller.setEnabled(true);
+        ArrayList<String> list = new ArrayList<String>();
+        list.add(BILLER_DEFAULT);
+        if(!isError) {
+            list.add("10");
+            list.add("30");
+            list.add("50");
+            list.add("100");
+            list.add("150");
+        }
+        billerAdapter = new ArrayAdapter<String>(getActivity(), R.layout.prepaid_spinner_item, list);
+        billerAdapter.setDropDownViewResource(R.layout.prepaid_spinner_dropdown_item);
+        biller.setAdapter(billerAdapter);
+        biller.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+            @Override
+            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+                if (position == DEFAULT_ITEM_POSITION) {
+                    charge.setText("");
+                    return;
+                }
+                chosenBiller = (String)parent.getAdapter().getItem(position);
+                if(Double.parseDouble(chosenBiller) > response.minimumReplenishmentAmount)
+                    enablePositiveButton();
 
-    @AfterTextChange protected void accountNumberAfterTextChanged(Editable s) {
+            }
+
+            @Override
+            public void onNothingSelected(AdapterView<?> ignore) {
+            }
+        });
+    }
+    private void setAmountBlanceViewGone()
+    {
+        setViewGone(balanceHeader);
+        setViewGone(linearlayout1);
+        setViewGone(linearlayout2);
+        setViewGone(linearlayout3);
+        setViewGone(biller);
+        chosenBiller = BILLER_DEFAULT;
+        if(billerAdapter != null)
+        billerAdapter.clear();
+        setViewGone(error);
+        setViewGone(errorContent);
+    }
+
+    private void setAmountBalanceViewVisible(BalanceResponse result)
+    {
+        if(result.currentBalance < 0)
+            isError = true;
+        else
+            isError = false;
+        setViewVisible(balanceHeader);
+        transponderNumber.setText(accNum.toString());
+        setViewVisible(linearlayout1);
+        lastKnownBalance.setText(DollarAmpsand + String.valueOf(result.currentBalance));
+        setViewVisible(linearlayout2);
+        minimumRechargeAmount.setText(DollarAmpsand + String.valueOf(result.minimumReplenishmentAmount));
+        setViewVisible(linearlayout3);
+        setSpinner();
+        setViewVisible(biller);
+
+        if(isError) {
+            setViewVisible(error);
+            setViewVisible(errorContent);
+        }
+        refresh();
+    }
+
+    private void setViewGone(View view)
+    {
+        view.setVisibility(View.GONE);
+    }
+    private void setViewVisible(View view)
+    {
+        view.setVisibility(View.VISIBLE);
+    }
+    private void setAccountNumberEditView() {
+        accountNumber.setKeyboardSupportConteiner(this);
+        accountNumber.setFilters(new InputFilter[]{new SunpassCredencialEditNumberCurrencyFormatInputFilter()});
+        accountNumber.setEditListener(new CustomEditBox.IEditListener() {
+
+            @Override
+            public boolean onChanged(String text) {
+                complete();
+                return true;
+            }
+        });
+    }
+
+    private void setAccountNumberValidateLabelEditView() {
+        accountNumberValidate.setKeyboardSupportConteiner(this);
+        accountNumberValidate.setFilters(new InputFilter[]{new SunpassCredencialEditNumberCurrencyFormatInputFilter()});
+        accountNumberValidate.setEditListener(new CustomEditBox.IEditListener() {
+
+            @Override
+            public boolean onChanged(String text) {
+                complete();
+                return true;
+            }
+        });
+    }
+
+    @AfterTextChange
+    protected void accountNumberAfterTextChanged(Editable s) {
         String numText = s.toString();
         String numValidationText = accNumValidation.editable.getText().toString();
         accNumValidation.validated = accNum.validated = numText.length() >= accNum.min && numValidationText.equals(numText);
+        setAmountBlanceViewGone();
         refresh();
     }
 
-    @AfterTextChange protected void accountNumberValidateAfterTextChanged(Editable s) {
-        accountNumberAfterTextChanged(accNum.editable.getText());
+    @AfterTextChange
+    protected void accountNumberValidateAfterTextChanged(Editable s) {
+
+        accountNumberAfterTextChanged((Editable) accNum.editable.getText());
     }
 
-    @Override public void onActivityCreated(Bundle savedInstanceState) {
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
+        getNegativeButton().setTextColor(Color.WHITE);
+        getNegativeButton().setTextSize(25);
+        getNegativeButton().setTypeface(Typeface.DEFAULT_BOLD);
+        getPositiveButton().setTypeface(Typeface.DEFAULT_BOLD);
+        getPositiveButton().setTextSize(25);
         getDialog().getWindow().setLayout(
-                getResources().getDimensionPixelOffset(R.dimen.holdon_dlg_width),
+                getResources().getDimensionPixelOffset(R.dimen.prepaid_sunpass_credencial_width),
                 getResources().getDimensionPixelOffset(R.dimen.prepaid_dlg_heigth));
     }
 
-    @AfterViews
-    protected void initViews() {
-        accountNumberValidate.setOnEditorActionListener(new OnEditorActionListener() {
-            @Override
+    @Override
-            public boolean onEditorAction(TextView textView, int actionId, KeyEvent keyEvent) {
-                if (EditorInfo.IME_ACTION_DONE == actionId) {
-                    if (isValid())
-                        complete();
+    protected int getTitleIcon() {
+        return R.drawable.icon_sun_pass;
-                }
+    }
-                return false;
+
+    @Override
+    protected int getTitleTextColor() {
+        return Color.WHITE;
-            }
+    }
-        });
+
+    @Override
+    protected int getSeparatorColor() {
+        return Color.WHITE;
     }
 
-    @Override protected int getDialogContentLayout() {
+    @Override
+    protected int getTitleViewBackgroundColor() {
+        return getResources().getColor(R.color.prepaid_dialog_title_background_color);
+    }
+
+    @Override
+    protected int getButtonsBackgroundColor() {
+        return getResources().getColor(R.color.prepaid_dialog_buttons_background_color);
+    }
+
+    @Override
+    protected int getTitleGravity() {
+        return Gravity.LEFT;
+    }
+
+    ;
+
+    @Override
+    protected int getDialogContentLayout() {
         return R.layout.sunpass_credentials_fragment;
     }
-    @Override protected int getDialogTitle() {
-        return R.string.sunpass_prepaid_dialog_credentials_title;
+
+    @Override
+    protected int getDialogTitle() {
+        return R.string.prepaid_dialog_sunpass_transponder_title;
     }
-    @Override protected OnDialogClickListener getPositiveButtonListener() {
+
+    @Override
+    protected OnDialogClickListener getPositiveButtonListener() {
         return new OnDialogClickListener() {
             @Override
             public boolean onClick() {
+                if(!isBillerVisible())
                 complete();
+                else
+                callback.onComplete(accNum.toString(), response, chosenBiller);
                 return false;
             }
         };
     }
-    @Override protected OnDialogClickListener getNegativeButtonListener() {
+
+    @Override
+    protected OnDialogClickListener getNegativeButtonListener() {
         return new OnDialogClickListener() {
             @Override
             public boolean onClick() {
@@ -128,14 +318,25 @@
 
     private void refresh() {
         boolean isValid = isValid();
+        keyboard.setEnterEnabled(isValid);
         getPositiveButton().setEnabled(isValid);
         getPositiveButton().setTextColor(isValid ? colorOk : colorDisabled);
     }
-
+    private void enablePositiveButton()
+    {
+        getPositiveButton().setEnabled(true);
+        getPositiveButton().setTextColor(true ? colorOk : colorDisabled);
+    }
     private boolean isValid() {
+        if(isBillerVisible())
+            return (!isError && chosenBiller != null && (chosenBiller != BILLER_DEFAULT));
         return accNum.validated && accNumValidation.validated;
     }
 
+    private boolean isBillerVisible()
+    {
+        return biller.getVisibility() == 0;
+    }
     protected boolean complete() {
         WaitDialogFragment.show(getActivity(), "Loading..");
         getBill();
@@ -145,25 +346,33 @@
     @OnSuccess(GetSunPassBalancCommand.class)
     public void onGetSunPassBalancCommandSuccess(@Param(GetSunPassBalancCommand.ARG_RESULT) BalanceResponse result) {
         WaitDialogFragment.hide(getActivity());
-        callback.onComplete(accNum.toString(), result);
+        checkBalanceView(result);
     }
 
     @OnFailure(GetSunPassBalancCommand.class)
     public void onGetSunPassBalancCommandCommandFail(@Param(GetSunPassBalancCommand.ARG_RESULT) BalanceResponse result) {
         WaitDialogFragment.hide(getActivity());
-        callback.onComplete(accNum.toString(), result);
-//        callback.onError(result.responseDescription);
+        checkBalanceView(result);
     }
 
+    private void checkBalanceView(BalanceResponse result)
+    {
+        this.response = result;
+        setAmountBalanceViewVisible(result);
+        keyboard.setEnabled(false);
+        accountNumber.setEnabled(false);
+        accountNumberValidate.setEnabled(false);
+    }
+
     public void getBill() {
-        SunEntryRequest request      = new SunEntryRequest();
+        SunEntryRequest request = new SunEntryRequest();
-        request.mID                     = String.valueOf(user.getMid());
+        request.mID = String.valueOf(user.getMid());
-        request.tID                     = String.valueOf(user.getTid());
+        request.tID = String.valueOf(user.getTid());
-        request.password                = user.getPassword();
+        request.password = user.getPassword();
-        request.cashier                 = cashierId;
+        request.cashier = cashierId;
-        request.accountNumber           = accNum.toString();
+        request.accountNumber = accNum.toString();
-        request.transactionId           = PrepaidProcessor.generateId();
+        request.transactionId = PrepaidProcessor.generateId();
-        request.transactionMode         = transactionMode;
+        request.transactionMode = transactionMode;
         GetSunPassBalancCommand.start(getActivity(), this, request);
     }
 
@@ -187,10 +396,22 @@
         DialogUtil.hide(activity, DIALOG_NAME);
     }
 
+    @Override
+    public void attachMe2Keyboard(CustomEditBox v) {
+        keyboard.attachEditView(v);
+    }
+
+    @Override
+    public void detachMe4Keyboard(CustomEditBox v) {
+        keyboard.detachEditView();
+    }
+
     public interface SunCredentialsFragmentDialogCallback {
 
         public abstract void onCancel();
+
         public abstract void onError(String message);
-        public abstract void onComplete(String accountNumber, BalanceResponse formedRequest);
+
+        public abstract void onComplete(String accountNumber,BalanceResponse formedRequest, String amount);
     }
 }
Index: TabletCR/src/main/res/layout/sunpass_payment_complete.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/sunpass_payment_complete.xml	(revision )
+++ TabletCR/src/main/res/layout/sunpass_payment_complete.xml	(revision )
@@ -0,0 +1,66 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:orientation="vertical"
+              android:gravity="center"
+              android:layout_height="match_parent">
+<LinearLayout
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="horizontal">
+
+
+    <TextView
+        android:layout_marginLeft="40dp"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/prepaid_payment_complete_body_title"
+        style="@style/Receipt.BodyHeader"/>
+
+    </LinearLayout>
+
+<ListView
+    android:layout_marginTop="40dp"
+    android:id="@+id/list_view"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    style="@style/Receipt.BodyContent">
+    
+ </ListView>
+
+    <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:paddingLeft="20dp"
+                    android:paddingRight="20dp">
+
+        <CheckBox
+            android:id="@+id/print_box"
+            android:text="@string/chkbx_print"
+            style="@style/CheckBox.Dark"
+            android:layout_height="wrap_content"
+            android:layout_alignParentLeft="true"
+            android:layout_width="wrap_content"/>
+
+        <CheckBox
+            android:layout_below="@id/print_box"
+            style="@style/CheckBox.Dark"
+            android:layout_alignParentLeft="true"
+            android:id="@+id/email_box"
+            android:layout_height="wrap_content"
+            android:text="@string/chkbx_email"
+            android:layout_width="wrap_content"/>
+
+        <CheckBox
+            android:layout_below="@id/email_box"
+            style="@style/CheckBox.Dark"
+            android:layout_alignParentLeft="true"
+            android:id="@+id/signature_box"
+            android:visibility="visible"
+            android:layout_height="wrap_content"
+            android:text="@string/chkbx_sign_print"
+            android:layout_width="wrap_content"/>
+
+    </RelativeLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunpassPayYourDocumentAmountFragmentDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunpassPayYourDocumentAmountFragmentDialog.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunpassPayYourDocumentAmountFragmentDialog.java	(revision )
@@ -0,0 +1,374 @@
+package com.kaching123.tcr.fragment.tendering.pinserve.prepaid.sunpass;
+
+import android.graphics.Color;
+import android.graphics.Typeface;
+import android.os.Bundle;
+import android.support.v4.app.FragmentActivity;
+import android.text.InputFilter;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.Spinner;
+import android.widget.TextView;
+
+import com.googlecode.androidannotations.annotations.AfterViews;
+import com.googlecode.androidannotations.annotations.EFragment;
+import com.googlecode.androidannotations.annotations.FragmentArg;
+import com.googlecode.androidannotations.annotations.ViewById;
+import com.googlecode.androidannotations.annotations.res.ColorRes;
+import com.kaching123.tcr.R;
+import com.kaching123.tcr.adapter.PrepaidSunpassPayYourDocumentOrderViewAdapter;
+import com.kaching123.tcr.component.CustomEditBox;
+import com.kaching123.tcr.component.KeyboardView;
+import com.kaching123.tcr.component.TelephoneEditNumberCurrencyFormatInputFilter;
+import com.kaching123.tcr.fragment.dialog.DialogUtil;
+import com.kaching123.tcr.fragment.dialog.StyledDialogFragment;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.PrepaidUser;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request.SunPassDocumentPaymentRequest;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request.SunReplenishmentRequest;
+import com.kaching123.tcr.websvc.api.prepaid.BalanceResponse;
+import com.kaching123.tcr.websvc.api.prepaid.Document;
+import com.kaching123.tcr.websvc.api.prepaid.DocumentInquiryResponse;
+import com.kaching123.tcr.websvc.api.prepaid.VectorDocument;
+
+import java.math.BigDecimal;
+import java.util.ArrayList;
+
+/**
+ * @author Ivan v. Rikhmayer
+ *         This class is intended to
+ */
+@EFragment
+public class SunpassPayYourDocumentAmountFragmentDialog extends StyledDialogFragment {
+
+    private final String DOLLAR_AMPERSAND = "$";
+    private static final String DIALOG_NAME = "SunpassAmountFragmentDialog";
+    private static FragmentActivity mContext;
+    private final static BigDecimal FEE_AMOUNT = new BigDecimal(1.5);
+    private final String DollarAmpsand = "$";
+    private final int DEFAULT_ITEM_POSITION = 0;
+    protected SunpassPayYourDocumentAmountFragmentDialogCallback callback;
+    @FragmentArg
+    protected String transactionMode;
+    @FragmentArg
+    protected String cashierId;
+    @FragmentArg
+    protected PrepaidUser user;
+    @FragmentArg
+    protected DocumentInquiryResponse response;
+    @FragmentArg
+    protected String accountNumber;
+
+    @FragmentArg
+    protected String licensePlateNumber;
+
+    @ViewById
+    protected TextView documentNumber;
+    @ViewById
+    protected TextView plateNumber;
+    @ViewById
+    protected TextView reviewOrderDetail;
+    @ViewById
+    protected TextView listviewItemName;
+    @ViewById
+    protected TextView listviewItemContent;
+    @ViewById
+    protected ListView listview;
+    @ViewById
+    protected Spinner biller;
+    @ViewById
+    protected LinearLayout linearlayout;
+    @ViewById
+    protected TextView amountTextview;
+    @ViewById
+    protected TextView feeTextview;
+    @ViewById
+    protected TextView totalTextview;
+
+    private ArrayList<String> list;
+    private ArrayAdapter billerAdapter;
+    private String chosenBiller;
+    @ColorRes(R.color.prepaid_dialog_white)
+    protected int colorOk;
+    @ColorRes(R.color.gray_dark)
+    protected int colorDisabled;
+    private final String SELECT_YOUR_PAYMENT_METHOD = "Selected your Payment Method";
+    private final String PAY_ONLY_DOCUMENT_ENTERED = "Pay only the document entered";
+    private final String PAY_ALL_OUTSTANDING_DOCUMENT = "Pay all outstanding Documents";
+    private VectorDocument documents;
+    private String amount;
+    private PrepaidSunpassPayYourDocumentOrderViewAdapter adapter;
+
+    public void setCallback(SunpassPayYourDocumentAmountFragmentDialogCallback callback) {
+        this.callback = callback;
+    }
+
+    @AfterViews
+    protected void init() {
+        enableFinish(false);
+        if (response != null) {
+            setSpinner();
+            setDocumentNumberView();
+            setPlateNumberView();
+        }
+
+    }
+
+    private void setLinearlayoutView(String chosenBiller) {
+        setListView(chosenBiller);
+        setAmountView();
+        setFeeView();
+        setTotalView();
+    }
+
+    private void setListView(String chosenBiller) {
+//        documents = response.unpaidDocumentList;
+        documents = new VectorDocument();
+        if (chosenBiller.equalsIgnoreCase(PAY_ONLY_DOCUMENT_ENTERED)) {
+            for (int i = 0; i < response.unpaidDocumentList.size(); i++) {
+                if (String.valueOf(documents.get(i).documentId).equalsIgnoreCase(accountNumber)) {
+                    documents.add(documents.get(i));
+                }
+                break;
+            }
+        } else
+            documents = response.unpaidDocumentList;
+        // fake data for test purpose
+        if (chosenBiller.equalsIgnoreCase(PAY_ONLY_DOCUMENT_ENTERED))
+        {
+            Document doc = new Document();
+            doc.documentId = "fake:51111222222";
+            doc.documentPaymentAmount = 10.0;
+
+            documents.add(doc);
+        }
+            else{
+                Document doc = new Document();
+                doc.documentId = "fake:51111222222";
+                doc.documentPaymentAmount = 10.0;
+
+                Document doc2 = new Document();
+                doc2.documentId = "fake:22488951548";
+                doc2.documentPaymentAmount = 15.0;
+
+                documents.add(doc);
+                documents.add(doc2);
+            }
+
+
+
+        adapter = new PrepaidSunpassPayYourDocumentOrderViewAdapter(mContext, documents);
+        listview.setAdapter(adapter);
+        listview.setDivider(null);
+        listview.setDividerHeight(0);
+    }
+
+    private void setAmountView() {
+        double dAmount = 0.0;
+        for (int i = 0; i < documents.size(); i++) {
+            dAmount +=documents.get(i).documentPaymentAmount;
+        }
+        amount = String.valueOf(dAmount);
+        amountTextview.setText(DOLLAR_AMPERSAND + amount.toString());
+    }
+
+    private void setFeeView() {
+        feeTextview.setText(DOLLAR_AMPERSAND + (CharSequence) FEE_AMOUNT.toString());
+    }
+
+    private void setTotalView() {
+        totalTextview.setText(DOLLAR_AMPERSAND + String.valueOf(Double.parseDouble(amount) + FEE_AMOUNT.doubleValue()));
+    }
+
+    private void setSpinner() {
+        list = new ArrayList<String>();
+        list.add(SELECT_YOUR_PAYMENT_METHOD);
+        list.add(PAY_ONLY_DOCUMENT_ENTERED);
+        list.add(PAY_ALL_OUTSTANDING_DOCUMENT);
+        billerAdapter = new ArrayAdapter<String>(getActivity(), R.layout.prepaid_spinner_item, list);
+        billerAdapter.setDropDownViewResource(R.layout.prepaid_spinner_dropdown_item);
+        biller.setAdapter(billerAdapter);
+        biller.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+            @Override
+            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+                if (position == DEFAULT_ITEM_POSITION) {
+                    return;
+                }
+                chosenBiller = (String) parent.getAdapter().getItem(position);
+                linearlayout.setVisibility(View.VISIBLE);
+                enableFinish(true);
+                setLinearlayoutView(chosenBiller);
+            }
+
+            @Override
+            public void onNothingSelected(AdapterView<?> ignore) {
+            }
+        });
+    }
+
+    private void setDocumentNumberView() {
+        documentNumber.setText(this.accountNumber);
+        documentNumber.setEnabled(false);
+    }
+
+    private void setPlateNumberView() {
+        plateNumber.setText(licensePlateNumber);
+        plateNumber.setEnabled(false);
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        getNegativeButton().setTextColor(Color.WHITE);
+        getNegativeButton().setTextSize(25);
+        getNegativeButton().setTypeface(Typeface.DEFAULT_BOLD);
+        getPositiveButton().setTypeface(Typeface.DEFAULT_BOLD);
+        getPositiveButton().setTextSize(25);
+        getDialog().getWindow().setLayout(
+                getResources().getDimensionPixelOffset(R.dimen.prepaid_sunpass_pyd_amount_width),
+                getResources().getDimensionPixelOffset(R.dimen.prepaid_dlg_heigth));
+    }
+
+    @Override
+    protected int getTitleGravity() {
+        return Gravity.LEFT;
+    }
+
+    ;
+
+    @Override
+    protected int getSeparatorColor() {
+        return Color.WHITE;
+    }
+
+    @Override
+    protected int getTitleTextColor() {
+        return Color.WHITE;
+    }
+
+    @Override
+    protected int getTitleViewBackgroundColor() {
+        return getResources().getColor(R.color.prepaid_dialog_title_background_color);
+    }
+
+    @Override
+    protected int getButtonsBackgroundColor() {
+        return getResources().getColor(R.color.prepaid_dialog_buttons_background_color);
+    }
+
+    @Override
+    protected int getTitleIcon() {
+        return R.drawable.icon_sun_pass;
+    }
+
+    @Override
+    protected int getNegativeButtonTitle() {
+        return R.string.btn_back;
+    }
+
+    @Override
+    protected int getPositiveButtonTitle() {
+        return R.string.btn_sumbit;
+    }
+
+    @Override
+    protected boolean hasNegativeButton() {
+        return true;
+    }
+
+    @Override
+    protected boolean hasPositiveButton() {
+        return true;
+    }
+
+    @Override
+    protected int getDialogContentLayout() {
+        return R.layout.sunpass_pay_your_document_amount_fragment;
+    }
+
+    @Override
+    protected int getDialogTitle() {
+        return R.string.prepaid_dialog_sunpass_transponder_title;
+    }
+
+    @Override
+    protected OnDialogClickListener getPositiveButtonListener() {
+        return new OnDialogClickListener() {
+            @Override
+            public boolean onClick() {
+                complete();
+                return false;
+            }
+        };
+    }
+
+    @Override
+    protected OnDialogClickListener getNegativeButtonListener() {
+        return new OnDialogClickListener() {
+            @Override
+            public boolean onClick() {
+                callback.onCancel();
+                return false;
+            }
+        };
+    }
+
+    protected boolean complete() {
+        SunPassDocumentPaymentRequest request = new SunPassDocumentPaymentRequest();
+        request.mID = String.valueOf(this.user.getMid());
+        request.tID = String.valueOf(this.user.getTid());
+        request.password = this.user.getPassword();
+        request.cashier = this.cashierId;
+        request.accountNumber = this.accountNumber;
+        request.purchaseId = request.accountNumber;
+        request.amount = new BigDecimal(amount);
+        request.feeAmount = FEE_AMOUNT.doubleValue();
+        request.purchaseId = response == null ? "0" : this.response.purchaseId;
+        request.paidDocuments = documents;
+//        request.purchaseId = this.accountNumber;
+        request.transactionMode = this.transactionMode;
+        request.licensePateleNumber = this.licensePlateNumber;
+        callback.onComplete(request);
+        return true;
+    }
+
+
+    public static void show(FragmentActivity context, String accountNumber, String transactionMode,
+                            String cashierId, PrepaidUser user, DocumentInquiryResponse response, String licensePlateNumber, SunpassPayYourDocumentAmountFragmentDialogCallback listener) {
+        mContext = context;
+        SunpassPayYourDocumentAmountFragmentDialog dialog = SunpassPayYourDocumentAmountFragmentDialog_.builder()
+                .transactionMode(transactionMode)
+                .cashierId(cashierId)
+                .user(user)
+                .response(response)
+                .accountNumber(accountNumber)
+                .licensePlateNumber(licensePlateNumber)
+                .build();
+        dialog.setCallback(listener);
+        DialogUtil.show(context,
+                DIALOG_NAME,
+                dialog);
+    }
+
+    public static void hide(FragmentActivity activity) {
+        DialogUtil.hide(activity, DIALOG_NAME);
+    }
+
+    protected void enableFinish(Boolean enabled) {
+        getPositiveButton().setEnabled(enabled);
+        getPositiveButton().setTextColor(enabled ? colorOk : colorDisabled);
+    }
+
+    public interface SunpassPayYourDocumentAmountFragmentDialogCallback {
+
+        public abstract void onCancel();
+
+        public abstract void onError(String message);
+
+        public abstract void onComplete(SunPassDocumentPaymentRequest response);
+    }
+
+}
Index: TabletCR/src/main/java/com/kaching123/tcr/websvc/api/prepaid/DocumentInquiryResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/websvc/api/prepaid/DocumentInquiryResponse.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/websvc/api/prepaid/DocumentInquiryResponse.java	(revision )
@@ -21,20 +21,16 @@
 import java.io.Serializable;
 import java.util.Hashtable;
 
-public class DocumentInquiryResponse implements KvmSerializable, Serializable {
+public class DocumentInquiryResponse extends BalanceResponse implements KvmSerializable, Serializable {
     
-    public String purchaseId;
+
     public Document requestedDocument;
     public VectorDocument unpaidDocumentList;
     public double unpaidDocumentListAmount;
     public String responseMessage;
-    public String timestamp;
-    public int responseCode;
-    public String responseDescription;
-    public long referenceNumber;
-    
     public DocumentInquiryResponse(){}
+
-    
+
     public DocumentInquiryResponse(SoapObject soapObject)
     {
         if (soapObject == null)
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunpassBillingFragmentDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunpassBillingFragmentDialog.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunpassBillingFragmentDialog.java	(revision )
@@ -4,13 +4,18 @@
 import android.support.v4.app.FragmentActivity;
 
 import com.kaching123.tcr.R;
+import com.kaching123.tcr.commands.payment.blackstone.prepaid.sunpass.DoSunPassDocumentPaymentCommand;
 import com.kaching123.tcr.commands.payment.blackstone.prepaid.sunpass.DoSunPassReplenishmentCommand;
 import com.kaching123.tcr.fragment.dialog.DialogUtil;
 import com.kaching123.tcr.fragment.dialog.StyledDialogFragment;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request.SunPassDocumentPaymentRequest;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request.SunReplenishmentRequest;
 import com.googlecode.androidannotations.annotations.AfterViews;
 import com.googlecode.androidannotations.annotations.EFragment;
 import com.googlecode.androidannotations.annotations.FragmentArg;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.SunpassType;
+import com.kaching123.tcr.websvc.api.prepaid.BalanceResponse;
+import com.kaching123.tcr.websvc.api.prepaid.DocumentPaymentResponse;
 import com.kaching123.tcr.websvc.api.prepaid.ReplenishmentResponse;
 import com.telly.groundy.annotations.OnFailure;
 import com.telly.groundy.annotations.OnSuccess;
@@ -27,6 +32,8 @@
 
     protected SunpassBillingFragmentDialogCallback callback;
     @FragmentArg protected SunReplenishmentRequest request;
+    @FragmentArg protected BalanceResponse response;
+    @FragmentArg protected SunpassType type;
 
     public void setCallback(SunpassBillingFragmentDialogCallback callback) {
         this.callback = callback;
@@ -63,18 +70,28 @@
 
     @AfterViews
     protected void init() {
+
+        switch (type)
+        {
+            case SUNPASS_PAY_YOUR_DOCUMENT:
+                DoSunPassDocumentPaymentCommand.start(getActivity(), this, (SunPassDocumentPaymentRequest)request);
+                break;
+            case SUNPASS_TRANSPONDER:
-        DoSunPassReplenishmentCommand.start(getActivity(), this, request);
+                DoSunPassReplenishmentCommand.start(getActivity(), this, request);
+                break;
-    }
+        }
+    }
 
     public interface SunpassBillingFragmentDialogCallback {
 
         public abstract void onError(String message);
-        public abstract void onComplete(ReplenishmentResponse result);
+        public abstract void onComplete(ReplenishmentResponse result,BalanceResponse balanceResponse);
+        public abstract void onComplete(DocumentPaymentResponse result,BalanceResponse balanceResponse);
     }
 
     @OnSuccess(DoSunPassReplenishmentCommand.class)
     public void onDoSunPassReplenishmentCommandSuccess(@Param(DoSunPassReplenishmentCommand.ARG_RESULT) ReplenishmentResponse result) {
-        callback.onComplete(result);
+        callback.onComplete(result, response);
     }
 
     @OnFailure(DoSunPassReplenishmentCommand.class)
@@ -82,11 +99,25 @@
         callback.onError(result == null ? "Billing failed" : result.responseDescription);
     }
 
+
+    @OnSuccess(DoSunPassDocumentPaymentCommand.class)
+    public void onDoSunPassDocumentPaymentCommandSuccess(@Param(DoSunPassDocumentPaymentCommand.ARG_RESULT) DocumentPaymentResponse result) {
+        callback.onComplete(result, response);
+    }
+
+    @OnFailure(DoSunPassDocumentPaymentCommand.class)
+    public void onDoSunPassDocumentPaymentCommandFail(@Param(DoSunPassDocumentPaymentCommand.ARG_RESULT) DocumentPaymentResponse result) {
+        callback.onError(result == null ? "Billing failed" : result.responseDescription);
+    }
     public static void show(FragmentActivity context,
                             SunReplenishmentRequest request,
-                            SunpassBillingFragmentDialogCallback callback) {
+                            SunpassType type,
+                            SunpassBillingFragmentDialogCallback callback,
+                            BalanceResponse response) {
         SunpassBillingFragmentDialog dialog = SunpassBillingFragmentDialog_.builder()
                 .request(request)
+                .type(type)
+                .response(response)
                 .build();
         dialog.setCallback(callback);
         DialogUtil.show(context,
Index: AndroidStyledDialogs/res/layout/dialog_part_title.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- AndroidStyledDialogs/res/layout/dialog_part_title.xml	(revision 2972)
+++ AndroidStyledDialogs/res/layout/dialog_part_title.xml	(revision )
@@ -1,15 +1,21 @@
 <?xml version="1.0" encoding="utf-8"?>
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-	style="@style/SDL.Group">
+    style="@style/SDL.Group">
+    <LinearLayout
+        android:id = "@+id/sdl_titleLinearLayout"
+        style="@style/SDL.TitleLinerLayout">
+        <ImageView
+            android:id="@+id/sdl__titleicon"
+            style="@style/SDL.TitleImageview"/>
-	<TextView
-		android:id="@+id/sdl__title"
-		style="?attr/sdlTitleTextStyle"/>
+        <TextView
+            android:id="@+id/sdl__title"
+            style="?attr/sdlTitleTextStyle"/>
-
+    </LinearLayout>
-	<View
-		android:id="@+id/sdl__titleDivider"
-		style="@style/SDL.TitleSeparator"/>
+    <View
+        android:id="@+id/sdl__titleDivider"
+        style="@style/SDL.TitleSeparator"/>
 
-	<LinearLayout
-		android:id="@+id/sdl__content"
-		style="@style/SDL.Group"/>
+    <LinearLayout
+        android:id="@+id/sdl__content"
+        style="@style/SDL.Group"/>
 </LinearLayout>
Index: TabletCR/src/main/java/com/kaching123/tcr/processor/BillPaymentProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/processor/BillPaymentProcessor.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/processor/BillPaymentProcessor.java	(revision )
@@ -34,7 +34,7 @@
  */
 public class BillPaymentProcessor {
 
-    private SubProcessorCallback callback;
+    private PrepaidProcessorCallback callback;
     private String transactionMode;
     private String cashierId;
     private PrepaidUser user;
@@ -45,7 +45,7 @@
         return new BillPaymentProcessor(user, transactionMode, cashierId);
     }
 
-    public BillPaymentProcessor callback(SubProcessorCallback callback) {
+    public BillPaymentProcessor callback(PrepaidProcessorCallback callback) {
         this.callback = callback;
         return this;
     }
@@ -77,9 +77,9 @@
             }
 
             @Override
-            public void onConditionSelected(Category chosenCategory, MasterBiller chosenBiller, PaymentOption chosenOption, BigDecimal amount, BillerLoadRecord bilelrData) {
+            public void onConditionSelected(Category chosenCategory, MasterBiller chosenBiller, PaymentOption chosenOption, BigDecimal amount, BillerLoadRecord bilelrData, String accountNumber) {
                 hide();
-                proceedToDataInput(context, chosenCategory, chosenBiller, chosenOption, amount, bilelrData);
+                proceedToDataInput(context, chosenCategory, chosenBiller, chosenOption, amount, bilelrData, accountNumber);
             }
 
 
@@ -94,7 +94,8 @@
                                       final MasterBiller chosenBiller,
                                       final PaymentOption chosenOption,
                                       final BigDecimal amount,
-                                      final BillerLoadRecord billerData) {
+                                      final BillerLoadRecord billerData,
+                                      final String accountNumber) {
         CredentialsInputFragmentDialog.show(context,
                 chosenCategory,
                 chosenBiller,
@@ -104,6 +105,7 @@
                 transactionMode,
                 amount,
                 billerData,
+                accountNumber,
                 new CredentialsInputFragmentDialogCallback() {
                     @Override
                     public void onCancel() {
@@ -118,15 +120,15 @@
                     }
 
                     @Override
-                    public void onComplete(final BillPaymentRequest formedRequest) {
+                    public void onComplete(final BillPaymentRequest formedRequest, BigDecimal total) {
                         hide();
-                        callback.onPaymentRequested(context, amount, billerData.vendorName, PrepaidType.BILL_PAYMENT, new SubProcessorDelegate() {
+                        callback.onPaymentRequested(context, total, billerData.vendorName, PrepaidType.BILL_PAYMENT, new SubProcessorDelegate() {
                             @Override
                             public void onComplete(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions, long prepaidOrderId) {
                                 BillPaymentProcessor.this.orderGuid = orderGuid;
                                 BillPaymentProcessor.this.transactions = transactions;
                                 formedRequest.setOrderId(prepaidOrderId);
-                                proceedToBilling(context, formedRequest, prepaidOrderId);
+                                proceedToBilling(context, formedRequest, prepaidOrderId, chosenCategory, amount);
                             }
                         });
                     }
@@ -138,8 +140,8 @@
     }
 
     protected void proceedToBilling(final FragmentActivity context,
-                                    final BillPaymentRequest formedRequest, final long prepaidOrderId) {
+                                    final BillPaymentRequest formedRequest, final long prepaidOrderId, final Category chosenCategory, final BigDecimal amount) {
-        BillingFragmentDialog.show(context, formedRequest, new BillingFragmentDialog.BillingFragmentDialogCallback() {
+        BillingFragmentDialog.show(context, formedRequest,new BillingFragmentDialog.BillingFragmentDialogCallback() {
 
             @Override
             public void onError(String message) {
@@ -163,7 +165,7 @@
             @Override
             public void onComplete(BillPaymentResponse response) {
                 hide();
-                callback.onPrintRequested(context, orderGuid, transactions, null);
+                callback.onBillPaymentPrintRequested(context, orderGuid, transactions, null,chosenCategory,formedRequest, amount);
             }
 
             private void hide() {
Index: TabletCR/src/main/res/values/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/values/dimens.xml	(revision 2972)
+++ TabletCR/src/main/res/values/dimens.xml	(revision )
@@ -185,8 +185,15 @@
     <dimen name="credit_receipt_print_dialog_height">480dp</dimen>
     <dimen name="qs_category_text_padding_bottom">2dp</dimen>
 
-    <dimen name="prepaid_label_text_size">24sp</dimen>
+    <dimen name="prepaid_label_text_size">20sp</dimen>
 
     <dimen name="employee_tips_dialog_width">680dp</dimen>
+
+    <!--newly added for prepaid changes-->
+    <dimen name="prepaid_supass_choice_dlg_width">700dp</dimen>
+    <dimen name="prepaid_wireless_payment_complete_heigth">580dp</dimen>
+    <dimen name="prepaid_sunpass_credencial_width">860dp</dimen>
+    <dimen name="prepaid_sunpass_pyd_amount_width">1060dp</dimen>
+
 
 </resources>
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/component/DocumentNumberCurrencyFormatInputFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/component/DocumentNumberCurrencyFormatInputFilter.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/component/DocumentNumberCurrencyFormatInputFilter.java	(revision )
@@ -0,0 +1,13 @@
+package com.kaching123.tcr.component;
+
+/**
+ * Created by gdubina on 29.11.13.
+ */
+public class DocumentNumberCurrencyFormatInputFilter extends RegexpFormatInputFilter {
+
+    private static final String REGEXP = "^(\\d{0,11})?(\\.[0-9]{0,2})?$";
+
+    public DocumentNumberCurrencyFormatInputFilter() {
+        super(REGEXP);
+    }
+}
Index: TabletCR/src/main/java/com/kaching123/tcr/model/payment/blackstone/prepaid/wireless/WirelessItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/model/payment/blackstone/prepaid/wireless/WirelessItem.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/model/payment/blackstone/prepaid/wireless/WirelessItem.java	(revision )
@@ -32,13 +32,14 @@
     public WirelessType type;
     public BigDecimal[] denominations;
     public String iconUrl;
+    public String dialCountryCode;
 
     public WirelessItem() {
     }
 
     public WirelessItem(String code, String name, boolean useFixedDenominations,
                         BigDecimal minDenomination, BigDecimal maxDenomination, String carrierName,
-                        String countryCode, String countryName, String type, BigDecimal[] denominations, String urlIcon) {
+                        String countryCode, String countryName, String type, BigDecimal[] denominations, String urlIcon, String dialCountryCode ) {
         this.code = code;
         this.name = name;
         this.useFixedDenominations = useFixedDenominations;
@@ -50,6 +51,7 @@
         this.type = WirelessType.fromString(type);
         this.denominations = denominations;
         this.iconUrl = urlIcon;
+        this.dialCountryCode = dialCountryCode;
     }
 
     public WirelessItem(Product product) {
@@ -63,7 +65,8 @@
                 product.countryName,
                 product.type,
                 null,
-                product.imageUrl);
+                product.imageUrl,
+                product.DialCountryCode);
         if (product.denominations != null) {
             denominations = new BigDecimal[product.denominations.size()];
             int i = 0;
@@ -86,7 +89,8 @@
                 c.getString(c.getColumnIndex(WirelessTable.COUNTRYNAME)),
                 c.getString(c.getColumnIndex(WirelessTable.TYPE)),
                 null,
-                c.getString(c.getColumnIndex(WirelessTable.URL))
+                c.getString(c.getColumnIndex(WirelessTable.URL)),
+                c.getString(c.getColumnIndex(WirelessTable.DIALCOUNTRYCODE))
                 );
         String[] buffer = c.getString(c.getColumnIndex(WirelessTable.DENOMINATIONS)).split(";");
         if (buffer != null) {
@@ -122,6 +126,7 @@
         v.put(WirelessTable.CARRIERNAME, carrierName);
         v.put(WirelessTable.COUNTRYCODE, countryCode);
         v.put(WirelessTable.COUNTRYNAME, countryName);
+        v.put(WirelessTable.DIALCOUNTRYCODE, dialCountryCode);
         v.put(WirelessTable.TYPE, type.getName());
         StringBuilder builder = new StringBuilder();
         if (denominations == null) {
Index: TabletCR/src/main/java/com/kaching123/tcr/component/LicensePlateNumberCurrencyFormatInputFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/component/LicensePlateNumberCurrencyFormatInputFilter.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/component/LicensePlateNumberCurrencyFormatInputFilter.java	(revision )
@@ -0,0 +1,13 @@
+package com.kaching123.tcr.component;
+
+/**
+ * Created by gdubina on 29.11.13.
+ */
+public class LicensePlateNumberCurrencyFormatInputFilter extends RegexpFormatInputFilter {
+
+    private static final String REGEXP = "^(\\w{0,6})?$";
+
+    public LicensePlateNumberCurrencyFormatInputFilter() {
+        super(REGEXP);
+    }
+}
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/PrepaidPaymentCompleteReceiptListViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/PrepaidPaymentCompleteReceiptListViewModel.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/PrepaidPaymentCompleteReceiptListViewModel.java	(revision )
@@ -0,0 +1,86 @@
+package com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless;
+
+import android.content.Context;
+import android.database.Cursor;
+import android.net.Uri;
+import android.support.v4.app.FragmentActivity;
+
+import com.getbase.android.db.provider.ProviderAction;
+import com.getbase.android.db.provider.Query;
+import com.kaching123.tcr.Logger;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.sunpass.request.SunReplenishmentRequest;
+import com.kaching123.tcr.store.ShopProvider;
+import com.kaching123.tcr.store.ShopSchema2;
+import com.kaching123.tcr.store.ShopStore;
+import com.kaching123.tcr.websvc.api.prepaid.BalanceResponse;
+
+import java.math.BigDecimal;
+
+
+/**
+ * Created by teli.yin on 6/5/2014.
+ */
+public class PrepaidPaymentCompleteReceiptListViewModel {
+    private static final Uri URI_ORDER = ShopProvider.getContentUri(ShopStore.SaleOrderView.URI_CONTENT);
+
+    static final String[] LIST_SUNPASS_TRANSPONDER= {"Transponder Number", "Last Known Balance", "Minimum recharge amount", "Amount", "Fee", "Total"};
+    static String[] getListForNames()
+    {
+         return LIST_SUNPASS_TRANSPONDER;
+    }
+    static private BigDecimal minAmount = BigDecimal.TEN;
+    static String[] getListForContents( SunReplenishmentRequest request,BalanceResponse response, FragmentActivity mContext, String orderGuid)
+    {
+        String[] contents = new String[6];
+        contents[0] = request.accountNumber;
+        contents[1] = String.valueOf(response.currentBalance);
+        BigDecimal min = new BigDecimal(response.minimumReplenishmentAmount);
+        if (min != null && BigDecimal.ZERO.compareTo(min) < 0) {
+            minAmount = min;
+        }
+        contents[2] = String.valueOf(minAmount);
+        contents[3] = String.valueOf(request.amount);
+        contents[4] = String.valueOf(request.feeAmount);
+        contents[5] = (Double.parseDouble(getTotal(mContext, orderGuid)) + request.feeAmount) + ""; // service fee is not accounted currently.
+        return contents;
+    }
+
+    static void trace(String[] names, String[] contents)
+    {
+        StringBuilder st = new StringBuilder();
+        st.append("Prepaid Receipt: "+"\n");
+        for(int i = 0; i < names.length; i++)
+            st.append("name: "+names[i]+", content: "+contents[i]+"\n");
+        Logger.d(st.toString());
+    }
+
+    static protected String getTotal(FragmentActivity mContext, String orderGuid) {
+//        Cursor c = ProviderAction.query(URI_TOTAL)
+//                .projection(
+//                        ShopSchema2.SaleOrderView2.SaleOrderTable.TML_TOTAL_PRICE)
+//                .where(ShopSchema2.SaleOrderView2.SaleOrderTable.GUID + " = ?", orderGuid)
+//                .perform(mContext);
+//
+//        String total = c.getString(0);
+//        c.close();
+
+        Query query = ProviderAction
+                .query(URI_ORDER)
+                .projection(
+                        ShopSchema2.SaleOrderView2.SaleOrderTable.TML_TOTAL_PRICE)
+                .where(ShopSchema2.SaleOrderView2.SaleOrderTable.GUID + " = ?", orderGuid);
+        query/*
+                .where(SaleOrderTable.STATUS + " = ?", getOrderType().ordinal())*/
+                .orderBy(ShopSchema2.SaleOrderView2.SaleOrderTable.CREATE_TIME);
+        Cursor c = query.perform(mContext);
+        String total = null;
+        if (c.moveToFirst()) {
+            total = c.getString(0);
+        }
+        c.close();
+
+
+        return total;
+    }
+
+}
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/WirelessItemView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/WirelessItemView.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/WirelessItemView.java	(revision )
@@ -1,8 +1,14 @@
 package com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless;
 
 import android.content.Context;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsoluteLayout;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
 import android.widget.TextView;
 
 import com.kaching123.tcr.R;
@@ -30,7 +36,20 @@
     public void bind(String text,
                      String url) {
         this.title.setText(text);
+        RelativeLayout.LayoutParams layout_title =  new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
+        layout_title.setMargins(210,45,0,40);
+        this.title.setLayoutParams(layout_title);
+        this.icon.setVisibility(VISIBLE);
         UrlImageViewHelper.setUrlDrawable(icon, url, R.drawable.operator_default_icon, 60000);
     }
+
+    public void bindTextOnly(String text) {
+        this.title.setText(text);
+        RelativeLayout.LayoutParams layout_title =  new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
+        layout_title.setMargins(10,45,0,0);
+        this.title.setLayoutParams(layout_title);
+        this.icon.setVisibility(INVISIBLE);
+    }
+
 
 }
\ No newline at end of file
Index: TabletCR/src/main/res/layout/prepaid_type_fragment.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/prepaid_type_fragment.xml	(revision 2972)
+++ TabletCR/src/main/res/layout/prepaid_type_fragment.xml	(revision )
@@ -1,8 +1,9 @@
 <?xml version="1.0" encoding="utf-8"?>
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-        android:layout_height="match_parent"
-        android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:layout_width="match_parent"
+    android:background="@color/prepaid_dialog_buttons_background_color"
-        android:padding="16dp">
+    android:padding="16dp">
 
     <LinearLayout android:id="@+id/top_container"
         android:layout_width="wrap_content"
@@ -12,32 +13,33 @@
         android:layout_marginBottom="8dp">
 
         <ImageButton
-            android:id="@+id/btn_wireless"
+            android:id="@+id/btn_pinless"
             android:scaleType="fitXY"
-            android:background="@drawable/btn_wireless"
+            android:background="@drawable/btn_pinless"
             android:layout_height="wrap_content"
             android:layout_width="wrap_content"
             android:layout_marginRight="6dp"
             />
 
         <ImageButton
-            android:id="@+id/btn_wireless_inter"
+            android:id="@+id/btn_wireless"
             android:scaleType="fitXY"
-            android:background="@drawable/btn_wireless_int"
+            android:background="@drawable/btn_wireless"
             android:layout_height="wrap_content"
             android:layout_width="wrap_content"
             android:layout_marginRight="6dp"
             />
 
         <ImageButton
-            android:id="@+id/btn_pinless"
+            android:id="@+id/btn_wireless_inter"
             android:scaleType="fitXY"
-            android:background="@drawable/btn_pinless"
+            android:background="@drawable/btn_wireless_int"
             android:layout_height="wrap_content"
             android:layout_width="wrap_content"
+
             />
 
-        </LinearLayout>
+    </LinearLayout>
 
     <LinearLayout android:id="@+id/bottom_container"
         android:layout_width="wrap_content"
@@ -47,29 +49,37 @@
         android:layout_centerHorizontal="true">
 
         <ImageButton
-            android:id="@+id/btn_bill"
+            android:id="@+id/btn_sunpass"
             android:scaleType="fitXY"
-            android:layout_gravity="center_horizontal"
-            android:background="@drawable/btn_bill"
+            android:background="@drawable/btn_sunpass"
             android:layout_height="wrap_content"
             android:layout_width="wrap_content"
             android:layout_marginRight="6dp"/>
 
         <ImageButton
-            android:id="@+id/btn_sunpass"
+            android:id="@+id/btn_long_distance"
             android:scaleType="fitXY"
-            android:background="@drawable/btn_sunpass"
+            android:background="@drawable/btn_long_distance"
             android:layout_height="wrap_content"
             android:layout_width="wrap_content"
             android:layout_marginRight="6dp"/>
 
         <ImageButton
-            android:id="@+id/btn_long_distance"
+            android:id="@+id/btn_bill"
             android:scaleType="fitXY"
-            android:background="@drawable/btn_long_distance"
+            android:background="@drawable/btn_bill"
             android:layout_height="wrap_content"
-            android:layout_width="wrap_content"/>
+            android:layout_width="wrap_content"
+            />
 
     </LinearLayout>
-
+    <ImageButton
+        android:id="@+id/activation_center"
+        android:scaleType="fitXY"
+        android:background="@drawable/activition_center_normal"
+        android:layout_marginTop="10dp"
+        android:layout_height="wrap_content"
+        android:layout_width="wrap_content"
+        android:layout_below="@+id/bottom_container"
+        android:layout_centerHorizontal="true" />
 </RelativeLayout>
\ No newline at end of file
Index: TabletCR/src/main/res/layout/wireless_category_fragment.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/wireless_category_fragment.xml	(revision 2972)
+++ TabletCR/src/main/res/layout/wireless_category_fragment.xml	(revision )
@@ -1,80 +1,112 @@
 <?xml version="1.0" encoding="utf-8"?>
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-                android:layout_height="fill_parent"
-                android:layout_width="fill_parent"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="@color/prepaid_dialog_buttons_background_color"
-                android:padding="16dp">
+    android:padding="16dp">
 
     <Spinner
         android:id="@+id/country"
+        android:paddingLeft="15dp"
         style="@style/StyledDialog.Content.Spinner"
-        android:layout_marginTop="10dp"
+        android:layout_width="fill_parent"
         android:layout_height="wrap_content"
+        android:layout_marginTop="8dp"
         android:layout_toLeftOf="@id/keyboard"
-        android:paddingBottom="10dp"
-        android:layout_width="fill_parent">
-    </Spinner>
+        android:paddingBottom="10dp"></Spinner>
 
     <Spinner
         android:id="@+id/supercategory"
         style="@style/StyledDialog.Content.Spinner"
-        android:layout_below="@id/country"
+        android:layout_width="fill_parent"
         android:layout_height="wrap_content"
+        android:layout_below="@id/country"
+        android:layout_marginTop="5dp"
         android:layout_toLeftOf="@id/keyboard"
-        android:paddingBottom="10dp"
-        android:layout_width="fill_parent">
-    </Spinner>
+        android:paddingBottom="10dp"></Spinner>
 
     <Spinner
         android:id="@+id/category"
         style="@style/StyledDialog.Content.Spinner"
-        android:layout_marginTop="5dp"
-        android:layout_below="@id/supercategory"
+        android:layout_width="fill_parent"
         android:layout_height="wrap_content"
+        android:layout_below="@id/supercategory"
+        android:layout_marginTop="5dp"
         android:layout_toLeftOf="@id/keyboard"
-        android:paddingBottom="10dp"
-        android:layout_width="fill_parent">
-    </Spinner>
+        android:paddingBottom="10dp"></Spinner>
 
     <Spinner
         android:id="@+id/biller"
+        android:paddingLeft="15dp"
         style="@style/StyledDialog.Content.Spinner"
-        android:layout_below="@id/category"
+        android:layout_width="fill_parent"
         android:layout_height="wrap_content"
+        android:layout_below="@id/category"
         android:layout_toLeftOf="@id/keyboard"
-        android:paddingBottom="10dp"
-        android:layout_width="fill_parent">
-    </Spinner>
+        android:paddingBottom="10dp"></Spinner>
 
+
     <TextView
-        style="@style/PaymentItem.Grayed"
         android:id="@+id/limitation"
-        android:gravity="left"
-        android:layout_height="wrap_content"
+        style="@style/PaymentItem.Grayed"
         android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
         android:layout_alignLeft="@id/keyboard"
         android:layout_alignRight="@id/keyboard"
+        android:gravity="left"
-        android:paddingLeft="12dp"/>
+        android:paddingLeft="12dp" />
 
     <com.kaching123.tcr.component.CustomEditBox
         android:id="@+id/charge"
-        android:layout_alignLeft="@id/keyboard"
-        android:layout_alignRight="@id/keyboard"
+        style="@style/CustomEditBox.PaymentInputField"
+        android:layout_width="660dp"
+        android:layout_height="wrap_content"
+        android:layout_below="@id/biller"
         android:layout_marginTop="-8dp"
-        android:layout_below="@id/limitation"
+        android:visibility="gone"
         android:gravity="left"
         android:hint="@string/prepaid_dialog_custom_amount_hint"
-        style="@style/CustomEditBox.PaymentInputField"
+        android:textColorHint="@color/prepaid_dialog_white"
+        android:textColor="@color/prepaid_dialog_white"
+        android:textSize="@dimen/prepaid_label_text_size" />
+
+    <TextView
+        android:id="@+id/dial_country_code_textview"
+        android:background="@drawable/edit_text_holo_dark"
+        android:textCursorDrawable="@drawable/text_cursor_holo_dark"
+        android:textStyle="bold"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@id/charge"
+        android:layout_marginTop="-8dp"
+        android:gravity="right"
+        android:visibility="gone"
         android:textSize="@dimen/prepaid_label_text_size"
+        android:textColor="@color/prepaid_dialog_white"
+         />
+
+    <com.kaching123.tcr.component.CustomEditBox
+        android:id="@+id/telephoneInput"
+        style="@style/CustomEditBox.PaymentInputField"
+        android:layout_width="660dp"
         android:layout_height="wrap_content"
-        android:layout_width="fill_parent"/>
+        android:layout_below="@id/charge"
+        android:layout_toRightOf="@id/dial_country_code_textview"
+        android:layout_marginTop="-8dp"
+        android:gravity="left"
+        android:hint="@string/prepaid_dialog_telephone_number_hint"
+        android:textColorHint="@color/prepaid_dialog_white"
+        android:textColor="@color/prepaid_dialog_white"
+        android:visibility="gone"
+        android:textSize="@dimen/prepaid_label_text_size" />
 
     <com.kaching123.tcr.component.KeyboardView_
-        android:layout_height="wrap_content"
+        android:id="@+id/keyboard"
         android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
         android:layout_alignParentRight="true"
-        android:layout_below="@id/charge"
-        android:id="@+id/keyboard"
+        android:layout_toLeftOf="@id/charge"
         android:layout_marginLeft="16dp"
-        android:layout_marginTop="8dp"/>
+        android:layout_marginTop="20dp" />
 
 </RelativeLayout>
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/WirelessItemCursorAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/WirelessItemCursorAdapter.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/WirelessItemCursorAdapter.java	(revision )
@@ -1,9 +1,11 @@
 package com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless;
 
 import android.content.Context;
+import android.graphics.Color;
 import android.view.View;
 import android.view.ViewGroup;
 
+import com.kaching123.tcr.adapter.ObjectsArrayAdapter;
 import com.kaching123.tcr.adapter.ObjectsCursorAdapter;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.WirelessItem;
 import com.googlecode.androidannotations.annotations.EBean;
@@ -12,8 +14,12 @@
  * @author Ivan v. Rikhmayer
  */
 @EBean
-public class WirelessItemCursorAdapter extends ObjectsCursorAdapter<WirelessItem> {
+public class WirelessItemCursorAdapter extends ObjectsArrayAdapter<WirelessItem> {
 
+    final String SELECT_CARRIER = "Select Carrier";
+    final String SELECT_PLAN = "Select Plan";
+    int resource;
+
     public WirelessItemCursorAdapter(Context context) {
         super(context);
     }
@@ -25,9 +31,20 @@
 
     @Override
     protected View bindView(View convertView, int position, WirelessItem item) {
+
-        WirelessItemView itemView = (WirelessItemView) convertView;
+            WirelessItemView itemView = (WirelessItemView) convertView;
 
+            if (item.name == null) {
+                itemView.bindTextOnly(SELECT_CARRIER);
+            } else if (item.name.equalsIgnoreCase(SELECT_PLAN)) {
+                itemView.bindTextOnly(SELECT_PLAN);
+            } else {
-        itemView.bind(item.name, item.iconUrl        );
+                itemView.bind(item.name, item.iconUrl);
+            }
+
-        return convertView;
+            return convertView;
+
+
     }
+
 }
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/adapter/PrepaidSunpassPayYourDocumentOrderViewAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/adapter/PrepaidSunpassPayYourDocumentOrderViewAdapter.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/adapter/PrepaidSunpassPayYourDocumentOrderViewAdapter.java	(revision )
@@ -0,0 +1,50 @@
+package com.kaching123.tcr.adapter;
+
+import android.support.v4.app.FragmentActivity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.TextView;
+
+import com.kaching123.tcr.R;
+import com.kaching123.tcr.websvc.api.prepaid.VectorDocument;
+
+/**
+ * Created by teli.yin on 6/6/2014.
+ */
+public class PrepaidSunpassPayYourDocumentOrderViewAdapter extends BaseAdapter {
+    private FragmentActivity mContext;
+    private VectorDocument mDocuments;
+    private final String DOLLAR_AMPERSAND = "$";
+
+    public PrepaidSunpassPayYourDocumentOrderViewAdapter(FragmentActivity context, VectorDocument documents) {
+        this.mContext = context;
+        this.mDocuments = documents;
+    }
+
+    @Override
+    public int getCount() {
+        return mDocuments.size();
+    }
+
+    @Override
+    public Object getItem(int i) {
+        return mDocuments.get(i);
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @Override
+    public View getView(int i, View view, ViewGroup viewGroup) {
+        view = LayoutInflater.from(mContext).inflate(R.layout.prepaid_pyd_order_view_listview_item, null);
+        TextView name = (TextView) view.findViewById(R.id.tv_name);
+        TextView content = (TextView) view.findViewById(R.id.tv_content);
+        name.setText(mDocuments.get(i).documentId);
+        content.setText(DOLLAR_AMPERSAND + String.valueOf(mDocuments.get(i).documentPaymentAmount));
+        return view;
+    }
+}
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/PrepaidTypeChoosingFragmentDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/PrepaidTypeChoosingFragmentDialog.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/PrepaidTypeChoosingFragmentDialog.java	(revision )
@@ -1,7 +1,10 @@
 package com.kaching123.tcr.fragment.tendering.pinserve.prepaid;
 
+import android.graphics.Color;
+import android.graphics.Typeface;
 import android.os.Bundle;
 import android.support.v4.app.FragmentActivity;
+import android.view.Gravity;
 import android.view.View;
 import android.view.View.OnClickListener;
 import android.widget.ImageButton;
@@ -39,6 +42,8 @@
     @Override
     public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
+        getNegativeButton().setTextColor(Color.WHITE);
+        getNegativeButton().setTextSize(25);
         getDialog().getWindow().setLayout(
                 getResources().getDimensionPixelOffset(R.dimen.prepaid_type_dlg_width),
                 getDialog().getWindow().getAttributes().height);
@@ -72,6 +77,26 @@
         btnPinless.setOnClickListener(this);
     }
 
+    @Override protected  int getSeparatorColor(){return Color.WHITE;}
+
+    @Override protected  int getTitleTextColor(){return Color.WHITE;}
+
+    @Override protected  int getTitleViewBackgroundColor(){return getResources().getColor(R.color.prepaid_dialog_title_background_color); }
+
+    @Override protected  int getButtonsBackgroundColor(){return getResources().getColor(R.color.prepaid_dialog_buttons_background_color); }
+
+    @Override protected  boolean hasTitleTextTypeface(){ return true; }
+
+    @Override protected  boolean hasNegativeButtonTextTypeface(){ return true; }
+
+//    @Override protected  int getTitleTextTypeface(){ return Typeface.BOLD; }
+
+    @Override protected  int getNegativeButtonTextTypeface(){ return Typeface.BOLD; }
+
+    protected  int getTitleIcon(){return R.drawable.icon_prepaid;};
+
+    protected  int getTitleGravity(){return Gravity.LEFT;};
+
     @Override
     protected int getDialogContentLayout() {
         return R.layout.prepaid_type_fragment;
@@ -121,6 +146,7 @@
     public static void show(FragmentActivity context, PrepaidTypeChoosingFragmentDialogCallback listener) {
         PrepaidTypeChoosingFragmentDialog dialog = PrepaidTypeChoosingFragmentDialog_.builder().build();
         dialog.setCallback(listener);
+
         DialogUtil.show(context, DIALOG_NAME, dialog);
     }
 
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/PrepaidPrintTypeModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/PrepaidPrintTypeModel.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/wireless/PrepaidPrintTypeModel.java	(revision )
@@ -0,0 +1,11 @@
+package com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless;
+
+/**
+ * Created by teli.yin on 6/4/2014.
+ */
+public class PrepaidPrintTypeModel {
+
+    public enum PrepaidFragment {
+        PINLESS, WIRELESS_RECHARGE, INTERNATIONAL_TOPUP, SUNPASS_TRANSPONDER, SUNPASS_PAY_YOUR_DOCUMENT, LONG_DISTANCE, BILL_PAYMENT, ACTIVATION_CENTER
+    }
+}
Index: TabletCR/src/main/java/com/kaching123/tcr/adapter/ObjectsArrayAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/adapter/ObjectsArrayAdapter.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/adapter/ObjectsArrayAdapter.java	(revision )
@@ -5,6 +5,8 @@
 import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
 
+import com.kaching123.tcr.Logger;
+
 import java.util.List;
 
 /**
@@ -30,6 +32,7 @@
         //Logger.d("Provider: getView - end: pos = %d; time = " + (System.currentTimeMillis() - time), position);
         return v;
     }
+
 
     @Override
     public View getDropDownView(int position, View convertView, ViewGroup parent) {
Index: TabletCR/src/main/res/layout/prepaid_credentials_fragment.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/prepaid_credentials_fragment.xml	(revision 2972)
+++ TabletCR/src/main/res/layout/prepaid_credentials_fragment.xml	(revision )
@@ -1,237 +1,223 @@
 <?xml version="1.0" encoding="utf-8"?>
 
-
-<TableLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-             android:layout_height="fill_parent"
-             android:padding="20dp"
+    android:layout_height="fill_parent"
+    android:padding="20dp"
-             android:layout_width="fill_parent">
-
-    <TableRow
-        android:layout_width="fill_parent"
+    android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:gravity="center_vertical">
+    android:background="@color/prepaid_dialog_buttons_background_color">
 
-        <FrameLayout
-            style="@style/EditItem.Table.LabelLayout.CommonInformation">
 
-            <TextView
-                android:id="@+id/account_number_label"
-                style="@style/EditItem.Table.Label.Required"
-                android:text="@string/prepaid_dialog_credentials_1"/>
-        </FrameLayout>
-
-
-        <EditText
-            style="@style/StyledDialog.Content.EditText"
-            android:id="@+id/account_number"
-            android:layout_width="0dp"
-            android:singleLine="true"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"/>
-
-    </TableRow>
-
-    <TableRow
-        android:layout_width="fill_parent"
+    <TableLayout
         android:layout_height="fill_parent"
-        android:gravity="center_vertical">
+        android:padding="20dp"
+        android:layout_width="fill_parent"
+        android:background="@color/prepaid_dialog_buttons_background_color"
+        android:layout_toLeftOf="@+id/linearlayout2"
+        >
 
-        <FrameLayout
-            style="@style/EditItem.Table.LabelLayout.CommonInformation">
 
-            <TextView
-                android:id="@+id/account_number_validate_label"
-                style="@style/EditItem.Table.Label.Required"
-                android:text="@string/prepaid_dialog_credentials_1_valiadte"/>
-        </FrameLayout>
-
-
-        <EditText
-            style="@style/StyledDialog.Content.EditText"
-            android:id="@+id/account_number_validate"
-            android:layout_width="0dp"
-            android:singleLine="true"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"/>
-
-    </TableRow>
-
-    <TableRow
-        android:id="@+id/account_number_alternative_container"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:gravity="center_vertical">
+        <TableRow
+            android:id="@+id/account_number_alternative_container"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
 
-        <FrameLayout
-            style="@style/EditItem.Table.LabelLayout.CommonInformation">
 
-            <TextView
-                android:id="@+id/account_number_alternative_label"
-                style="@style/EditItem.Table.Label"
-                android:text="@string/prepaid_dialog_credentials_2"/>
-        </FrameLayout>
-
-
-        <EditText
-            style="@style/StyledDialog.Content.EditText"
-            android:id="@+id/account_number_alternative"
+                <EditText
+                    style="@style/StyledDialog.Content.EditText"
+                    android:id="@+id/account_number_alternative"
-            android:layout_width="0dp"
+                    android:layout_width="fill_parent"
-            android:singleLine="true"
-            android:layout_height="wrap_content"
+                    android:singleLine="true"
+                    android:layout_height="wrap_content"
-            android:layout_weight="1"/>
+                    android:hint="@string/prepaid_dialog_credentials_2"/>
 
+
-    </TableRow>
+        </TableRow>
 
-    <TableRow
-        android:id="@+id/account_add_first_container"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:gravity="center_vertical">
+        <TableRow
+            android:id="@+id/account_add_first_container"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
 
-        <FrameLayout
-            style="@style/EditItem.Table.LabelLayout.CommonInformation">
 
-            <TextView
-                android:id="@+id/account_add_first_label"
-                style="@style/EditItem.Table.Label"
-                android:text="@string/prepaid_dialog_credentials_3"/>
-        </FrameLayout>
-
-
-        <EditText
-            style="@style/StyledDialog.Content.EditText"
-            android:id="@+id/account_add_first"
+            <EditText
+                style="@style/StyledDialog.Content.EditText"
+                android:id="@+id/account_add_first"
-            android:layout_width="0dp"
+                android:layout_width="fill_parent"
-            android:singleLine="true"
-            android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
-            android:layout_weight="1"/>
+                android:layout_weight="1"
+                android:hint="@string/prepaid_dialog_credentials_3"/>
 
-    </TableRow>
+        </TableRow>
 
-    <TableRow
-        android:id="@+id/account_add_second_container"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:gravity="center_vertical">
+        <TableRow
+            android:id="@+id/account_add_second_container"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
 
-        <FrameLayout
-            style="@style/EditItem.Table.LabelLayout.CommonInformation">
-
-            <TextView
-                android:id="@+id/account_add_second_label"
-                style="@style/EditItem.Table.Label"
-                android:text="@string/prepaid_dialog_credentials_4"/>
-        </FrameLayout>
-
-
-        <EditText
-            style="@style/StyledDialog.Content.EditText"
-            android:id="@+id/account_add_second"
+            <EditText
+                style="@style/StyledDialog.Content.EditText"
+                android:id="@+id/account_add_second"
-            android:layout_width="0dp"
+                android:layout_width="fill_parent"
-            android:singleLine="true"
-            android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
-            android:layout_weight="1"/>
+                android:layout_weight="1"
+                android:hint="@string/prepaid_dialog_credentials_4"
+                />
 
-    </TableRow>
+        </TableRow>
 
-    <TableRow
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:gravity="center_vertical">
+        <TableRow
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
 
-        <FrameLayout
-            style="@style/EditItem.Table.LabelLayout.CommonInformation">
-
-            <TextView
-                android:id="@+id/account_customer_first_name_label"
-                style="@style/EditItem.Table.Label"
-                android:text="@string/prepaid_dialog_credentials_5"/>
-        </FrameLayout>
-
-
-        <EditText
-            style="@style/StyledDialog.Content.EditText"
-            android:id="@+id/account_customer_first_name"
+            <EditText
+                style="@style/StyledDialog.Content.EditText"
+                android:id="@+id/account_customer_first_name"
-            android:layout_width="0dp"
+                android:layout_width="fill_parent"
-            android:singleLine="true"
-            android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
-            android:layout_weight="1"/>
+                android:layout_weight="1"
+                android:hint="@string/prepaid_dialog_credentials_5"
+                android:inputType="text"/>
 
-    </TableRow>
+        </TableRow>
 
-    <TableRow
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:gravity="center_vertical">
+        <TableRow
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
 
-        <FrameLayout
-            style="@style/EditItem.Table.LabelLayout.CommonInformation">
-
-            <TextView
-                android:id="@+id/account_customer_last_name_label"
-                style="@style/EditItem.Table.Label"
-                android:text="@string/prepaid_dialog_credentials_6"/>
-        </FrameLayout>
-
-
-        <EditText
-            style="@style/StyledDialog.Content.EditText"
-            android:id="@+id/account_customer_last_name"
+            <EditText
+                style="@style/StyledDialog.Content.EditText"
+                android:id="@+id/account_customer_last_name"
-            android:layout_width="0dp"
+                android:layout_width="fill_parent"
-            android:singleLine="true"
-            android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
-            android:layout_weight="1"/>
+                android:layout_weight="1"
+                android:hint="@string/prepaid_dialog_credentials_6"
+                android:inputType="text"/>
 
-    </TableRow>
+        </TableRow>
 
-    <TableRow
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:gravity="center_vertical">
+        <TableRow
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
 
-        <FrameLayout
-            style="@style/EditItem.Table.LabelLayout.CommonInformation">
-
-            <TextView
-                android:id="@+id/account_sender_first_name_label"
-                style="@style/EditItem.Table.Label"
-                android:text="@string/prepaid_dialog_credentials_7"/>
-        </FrameLayout>
-
-
-        <EditText
-            style="@style/StyledDialog.Content.EditText"
-            android:id="@+id/account_sender_first_name"
+            <EditText
+                style="@style/StyledDialog.Content.EditText"
+                android:id="@+id/account_sender_first_name"
-            android:layout_width="0dp"
+                android:layout_width="fill_parent"
-            android:singleLine="true"
-            android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
-            android:layout_weight="1"/>
+                android:layout_weight="1"
+                android:hint="@string/prepaid_dialog_credentials_7"
+                android:inputType="text"/>
 
-    </TableRow>
+        </TableRow>
 
-    <TableRow
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:gravity="center_vertical">
+        <TableRow
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
 
-        <FrameLayout
-            style="@style/EditItem.Table.LabelLayout.CommonInformation">
-
-            <TextView
-                android:id="@+id/account_sender_last_name_label"
-                style="@style/EditItem.Table.Label"
-                android:text="@string/prepaid_dialog_credentials_8"/>
-        </FrameLayout>
-
-
-        <EditText
-            style="@style/StyledDialog.Content.EditText"
-            android:id="@+id/account_sender_last_name"
+            <EditText
+                style="@style/StyledDialog.Content.EditText"
+                android:id="@+id/account_sender_last_name"
-            android:layout_width="0dp"
+                android:layout_width="fill_parent"
-            android:singleLine="true"
-            android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
-            android:layout_weight="1"/>
+                android:layout_weight="1"
+                android:hint="@string/prepaid_dialog_credentials_8"
+                android:inputType="text"/>
 
-    </TableRow>
-</TableLayout>
+        </TableRow>
+    </TableLayout>
 
+
+
+    <LinearLayout
+        android:id="@+id/linearlayout2"
+        android:layout_width="200dp"
+        android:layout_height="wrap_content"
+        android:layout_alignParentRight="true"
+        android:orientation="vertical">
+
+        <LinearLayout
+            android:id="@+id/linearlayout4"
+            android:layout_marginTop="20dp"
+            android:layout_width="200dp"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+            <TextView
+                android:textSize="20sp"
+                android:layout_width="100dp"
+                android:layout_height="wrap_content"
+                android:text="@string/sunpass_credential_amount"
+                android:textColor="@color/prepaid_dialog_white" />
+
+            <TextView
+                android:textSize="20sp"
+                android:id="@+id/amount_textview"
+                android:layout_width="100dp"
+                android:layout_height="wrap_content"
+                android:textColor="@color/prepaid_dialog_white" />
+
+        </LinearLayout>
+
+
+        <LinearLayout
+            android:id="@+id/linearlayout5"
+            android:layout_marginTop="5dp"
+            android:layout_width="200dp"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+            <TextView
+                android:textSize="20sp"
+                android:layout_width="100dp"
+                android:layout_height="wrap_content"
+                android:text="@string/sunpass_credential_fees"
+                android:textColor="@color/prepaid_dialog_white" />
+
+            <TextView
+                android:textSize="20sp"
+                android:id="@+id/fee_textview"
+                android:layout_width="100dp"
+                android:layout_height="wrap_content"
+                android:textColor="@color/prepaid_dialog_white" />
+
+        </LinearLayout>
+
+        <LinearLayout
+            android:id="@+id/linearlayout6"
+            android:layout_marginTop="5dp"
+            android:layout_width="200dp"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+            <TextView
+                android:textSize="20sp"
+                android:layout_width="100dp"
+                android:layout_height="wrap_content"
+                android:text="@string/sunpass_credential_tatal"
+                android:textColor="@color/prepaid_dialog_white" />
+
+            <TextView
+                android:textSize="20sp"
+                android:id="@+id/total_textview"
+                android:layout_width="100dp"
+                android:layout_height="wrap_content"
+                android:textColor="@color/prepaid_dialog_white" />
+
+        </LinearLayout>
+
+
+    </LinearLayout>
+</RelativeLayout>
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/processor/WirelessProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/processor/WirelessProcessor.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/processor/WirelessProcessor.java	(revision )
@@ -12,11 +12,13 @@
 import com.kaching123.tcr.fragment.tendering.payment.PayNotificationFragmentDialog;
 import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless.DoTopUpFragmentDialog;
 import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless.DoTopUpFragmentDialog.DoTopUpFragmentDialogCallback;
+import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless.PrepaidPrintTypeModel;
 import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless.WirelessCategoryFragmentDialog;
 import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless.WirelessCredentialsFragmentDialog;
 import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.wireless.WirelessCredentialsFragmentDialog.WirelessCredentialsFragmentDialogCallback;
 import com.kaching123.tcr.model.BillPaymentDescriptionModel.PrepaidType;
 import com.kaching123.tcr.model.PaymentTransactionModel;
+import com.kaching123.tcr.model.payment.blackstone.prepaid.Broker;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.IPrePaidInfo;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.PrepaidUser;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.wireless.WirelessItem;
@@ -35,7 +37,7 @@
 
     private static final int WIRELESS_PROFILE_ID = 15;
 
-    private SubProcessorCallback callback;
+    private PrepaidProcessorCallback callback;
     private String transactionMode;
     private String cashierId;
     private PrepaidUser user;
@@ -50,8 +52,10 @@
     private String orderGuid;
     private ArrayList<PaymentTransactionModel> transactions;
 
-    public static WirelessProcessor create(PrepaidUser user, String transactionMode, String cashierId, boolean international) {
-        return new WirelessProcessor(user, transactionMode, cashierId, international);
+    private Broker broker;
+
+    public static WirelessProcessor create(PrepaidUser user, String transactionMode, String cashierId, boolean international, Broker broker) {
+        return new WirelessProcessor(user, transactionMode, cashierId, international, broker);
     }
 
     public WirelessProcessor pinlessMode() {
@@ -64,16 +68,17 @@
         return this;
     }
 
-    public WirelessProcessor callback(SubProcessorCallback callback) {
+    public WirelessProcessor callback(PrepaidProcessorCallback callback) {
         this.callback = callback;
         return this;
     }
 
-    public WirelessProcessor(PrepaidUser user, String transactionMode, String cashierId, boolean international) {
+    public WirelessProcessor(PrepaidUser user, String transactionMode, String cashierId, boolean international, Broker broker) {
         this.transactionMode = transactionMode;
         this.user = user;
         this.cashierId = cashierId;
         this.international = international;
+        this.broker = broker;
     }
 
     public void init(final FragmentActivity context) {
@@ -82,80 +87,80 @@
 
     protected void proceedToWireless(final FragmentActivity context) {
         WirelessCategoryFragmentDialog.show(context,
-                transactionMode, cashierId, user, international, longDistance, pinless,
+                transactionMode, cashierId, user, international, longDistance, pinless,broker,
                 new WirelessCategoryFragmentDialog.WirelessCategoryFragmentDialogCallback() {
 
-            @Override public void onCancel() {
-                hide();
-                callback.onCancel(context);
-            }
+                    @Override public void onCancel() {
+                        hide();
+                        callback.onCancel(context);
+                    }
 
-            @Override public void onError(String message) {
-                hide();
-                callback.onCancel(context);
-            }
+                    @Override public void onError(String message) {
+                        hide();
+                        callback.onCancel(context);
+                    }
 
-            @Override public void onConditionSelected(final WirelessItem chosenCategory, final BigDecimal amount) {
+                    @Override public void onConditionSelected(final WirelessItem chosenCategory, final BigDecimal amount, final String phoneNumber, final int profileId) {
-                WirelessProcessor.this.chosenCategory = chosenCategory;
-                WirelessProcessor.this.amount = amount;
-                WirelessProcessor.this.code = chosenCategory.countryCode;
-                hide();
-                if (chosenCategory.isPinBased()) {
-                    callback.onPaymentRequested(context, amount, chosenCategory.name, PrepaidType.WIRELESS_PIN, new SubProcessorDelegate() {
+                        WirelessProcessor.this.chosenCategory = chosenCategory;
+                        WirelessProcessor.this.amount = amount;
+                        WirelessProcessor.this.code = chosenCategory.countryCode;
+                        hide();
+                        if (chosenCategory.isPinBased()) {
+                            callback.onPaymentRequested(context, amount, chosenCategory.name, PrepaidType.WIRELESS_PIN, new SubProcessorDelegate() {
 
-                        @Override
-                        public void onComplete(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions, long prepaidOrderId) {
-                            WirelessProcessor.this.orderGuid = orderGuid;
-                            WirelessProcessor.this.transactions = transactions;
-                            proceedToBilling(context, international, prepaidOrderId);
-                        }
-                    });
-                } else {
+                                @Override
+                                public void onComplete(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions, long prepaidOrderId) {
+                                    WirelessProcessor.this.orderGuid = orderGuid;
+                                    WirelessProcessor.this.transactions = transactions;
+                                    proceedToBilling(context, international, prepaidOrderId);
+                                }
+                            });
+                        } else {
-                    proceedToCredentialsInput(context, international);
+                            proceedToCredentialsInput(context, international, phoneNumber, profileId);
-                }
-            }
+                        }
+                    }
 
-            private void hide() {
-                WirelessCategoryFragmentDialog.hide(context);
-            }
-        });
+                    private void hide() {
+                        WirelessCategoryFragmentDialog.hide(context);
+                    }
+                });
 
     }
 
-    protected void proceedToCredentialsInput(final FragmentActivity context, final boolean international) {
-        WirelessCredentialsFragmentDialog.show(context, cashierId, user, transactionMode, chosenCategory, new WirelessCredentialsFragmentDialogCallback() {
-
-            @Override public void onCancel() {
-                hide();
-                callback.onCancel(context);
-            }
-
-            @Override public void onError(String message) {
-                hide();
-                callback.onCancel(context);
-            }
-
-            @Override public void onComplete(String phoneNumber, int profileId) {
-                hide();
+    protected void proceedToCredentialsInput(final FragmentActivity context, final boolean international, String phoneNumber, int profileId) {
+//        WirelessCredentialsFragmentDialog.show(context, cashierId, user, transactionMode, chosenCategory, new WirelessCredentialsFragmentDialogCallback() {
+//
+//            @Override public void onCancel() {
+//                hide();
+//                callback.onCancel(context);
+//            }
+//
+//            @Override public void onError(String message) {
+//                hide();
+//                callback.onCancel(context);
+//            }
+//
+//            @Override public void onComplete(String phoneNumber, int profileId) {
+//                hide();
-                WirelessProcessor.this.phoneNumber = phoneNumber;
+        WirelessProcessor.this.phoneNumber = phoneNumber;
-                WirelessProcessor.this.code = code;
+//                WirelessProcessor.this.code = code;
-                WirelessProcessor.this.profileId = profileId;
-                callback.onPaymentRequested(context, amount, chosenCategory.name, PrepaidType.WIRELESS_TOPUP, new SubProcessorDelegate() {
+        WirelessProcessor.this.profileId = profileId;
+        callback.onPaymentRequested(context, amount, chosenCategory.name, PrepaidType.WIRELESS_TOPUP, new SubProcessorDelegate() {
 
-                    @Override
-                    public void onComplete(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions, long prepaidOrderId) {
-                        WirelessProcessor.this.orderGuid = orderGuid;
-                        WirelessProcessor.this.transactions = transactions;
-                        proceedToBilling(context, international, prepaidOrderId);
-                    }
-                });
+            @Override
+            public void onComplete(FragmentActivity context, String orderGuid, ArrayList<PaymentTransactionModel> transactions, long prepaidOrderId) {
+                WirelessProcessor.this.orderGuid = orderGuid;
+                WirelessProcessor.this.transactions = transactions;
+                proceedToBilling(context, international, prepaidOrderId);
+            }
+        });
-            }
+//            }
 
-            private void hide() {
-                WirelessCredentialsFragmentDialog.hide(context);
+//            private void hide() {
+//                WirelessCredentialsFragmentDialog.hide(context);
+//            }
+//        });
-            }
+    }
-        });
-    }
 
     protected void proceedToBilling(final FragmentActivity context, boolean international, final long orderId) {
         final DoTopUpRequest request = new DoTopUpRequest();
@@ -197,7 +202,8 @@
                 hide();
 
                 IPrePaidInfo info = new WirelessPinInfo(response.controlNumber, response.customerServiceEnglish, response.transactionID, response.localAccessPhones, response.pinNumber, response.expirationDate);
-                callback.onPrintRequested(context, orderGuid, transactions, info);
+//                callback.onPrintRequested(context, orderGuid, transactions, info);
+                callback.onWirelessPrintRequested(context, orderGuid, transactions, info, chosenCategory);
             }
 
             //complete callback for DoTopUp wireless
@@ -205,7 +211,8 @@
                 hide();
 
                 IPrePaidInfo info = new WirelessTopupInfo(response.controlNumber, response.customerServiceEnglish, response.transactionID, response.localAccessPhones, request.phoneNumber, response.referenceNumber, response.authorizationCode);
-                callback.onPrintRequested(context, orderGuid, transactions, info);
+//                callback.onPrintRequested(context, orderGuid, transactions, info);
+                callback.onWirelessPrintRequested(context, orderGuid, transactions, info, chosenCategory);
             }
 
             private void hide() {
Index: TabletCR/src/main/java/com/kaching123/tcr/websvc/api/prepaid/ProductListResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/websvc/api/prepaid/ProductListResponse.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/websvc/api/prepaid/ProductListResponse.java	(revision )
@@ -13,6 +13,8 @@
 //This source code was auto-generated by Wsdl2Code  Version
 //
 
+import com.kaching123.tcr.Logger;
+
 import org.ksoap2.serialization.KvmSerializable;
 import org.ksoap2.serialization.PropertyInfo;
 import org.ksoap2.serialization.SoapObject;
@@ -27,6 +29,7 @@
     public String resultDescription;
     public String productListVersion;
     public VectorProduct products;
+    public String CountryCode;
     
     public ProductListResponse(){}
     
Index: AndroidStyledDialogs/res/values/sdl__theme.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- AndroidStyledDialogs/res/values/sdl__theme.xml	(revision 2972)
+++ AndroidStyledDialogs/res/values/sdl__theme.xml	(revision )
@@ -154,4 +154,20 @@
 		<item name="android:layout_marginBottom">@dimen/grid_4</item>
 	</style>
 
+<!--newly added for prepaid changes-->
+    <style name="SDL.TitleLinerLayout">
+
+        <item name="android:layout_width">match_parent</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:orientation">horizontal</item>
+    </style>
+
+    <style name="SDL.TitleImageview">
+        <item name = "android:layout_marginLeft">2dp</item>
+        <item name ="android:gravity">center</item>
+        <item name ="android:layout_width">wrap_content</item>
+        <item name ="android:layout_height">match_parent</item>
+        <item name ="android:background">@android:color/transparent</item>
+    </style>
+
 </resources>
Index: TabletCR/src/main/res/layout/sunpass_credentials_fragment.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/res/layout/sunpass_credentials_fragment.xml	(revision 2972)
+++ TabletCR/src/main/res/layout/sunpass_credentials_fragment.xml	(revision )
@@ -1,75 +1,207 @@
 <?xml version="1.0" encoding="utf-8"?>
 
-
-<TableLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-             android:layout_height="fill_parent"
+    android:layout_height="fill_parent"
-             android:padding="20dp"
+    android:background="@color/prepaid_dialog_buttons_background_color"
+
-             android:layout_width="fill_parent">
+    android:layout_width="fill_parent">
 
-    <TableRow
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:gravity="center_vertical">
+    <TableLayout
+        android:id="@+id/tableview"
+        android:layout_height="wrap_content"
+        android:padding="20dp"
+        android:layout_width="500dp">
 
-        <FrameLayout
-            style="@style/EditItem.Table.LabelLayout.CommonInformation">
 
-            <TextView
-                android:id="@+id/account_number_label"
-                style="@style/EditItem.Table.Label.Required"
-                android:text="@string/sunpass_prepaid_dialog_credentials"/>
-        </FrameLayout>
-
-
-    </TableRow>
-    <TableRow
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:gravity="center_vertical">
+        <TableRow
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:gravity="center_vertical">
 
-        <EditText
-            style="@style/StyledDialog.Content.EditText"
+            <com.kaching123.tcr.component.CustomEditBox
+                style="@style/CustomEditBox.PaymentInputField"
+                android:textColorHint="@color/prepaid_dialog_white"
+                android:hint="@string/prepaid_sunpass_credencial_account_hint"
-            android:id="@+id/account_number"
+                android:id="@+id/account_number"
+                android:textColor="@color/prepaid_dialog_white"
-            android:layout_width="0dp"
-            android:singleLine="true"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
+                android:layout_width="0dp"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
-            android:inputType="number"/>
+                android:gravity="left"
+                android:textSize="@dimen/prepaid_label_text_size"
+                 />
 
-    </TableRow>
+        </TableRow>
 
-    <TableRow
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:gravity="center_vertical">
 
-        <FrameLayout
-            style="@style/EditItem.Table.LabelLayout.CommonInformation"
-            android:layout_width="0dp"
-            android:layout_weight="1">
-
-            <TextView
-                android:id="@+id/account_number_validate_label"
-                style="@style/EditItem.Table.Label.Required"
-                android:text="@string/sunpass_prepaid_dialog_credentials_validate"/>
-        </FrameLayout>
-
-
-    </TableRow>
-
-    <TableRow
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
+        <TableRow
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:layout_marginTop="20dp"
-        android:gravity="center_vertical">
+            android:gravity="center_vertical">
 
-        <EditText
-            style="@style/StyledDialog.Content.EditText"
+            <com.kaching123.tcr.component.CustomEditBox
+                style="@style/CustomEditBox.PaymentInputField"
+                android:hint="@string/prepaid_sunpass_credencial_account_validate_hint"
+                android:textColorHint="@color/prepaid_dialog_white"
-            android:id="@+id/account_number_validate"
-            android:layout_width="0dp"
-            android:singleLine="true"
-            android:layout_height="wrap_content"
+                android:id="@+id/account_number_validate"
+                android:layout_width="0dp"
+                android:singleLine="true"
+                android:layout_height="wrap_content"
+                android:textColor="@color/prepaid_dialog_white"
-            android:layout_weight="1"
+                android:layout_weight="1"
-            android:inputType="number"/>
+                android:gravity="left"
+                android:textSize="@dimen/prepaid_label_text_size"
+                />
 
-    </TableRow>
+        </TableRow>
+
+
-</TableLayout>
\ No newline at end of file
+    </TableLayout>
+
+
+    <TextView
+        android:id="@+id/balance_header"
+        android:visibility="gone"
+        android:layout_below="@id/tableview"
+        android:layout_marginLeft="35dp"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textSize="@dimen/prepaid_label_text_size"
+        android:text="@string/sunpass_credential_your_balance"
+        android:textColor="@color/prepaid_dialog_white" />
+
+    <LinearLayout
+        android:id="@+id/linearlayout1"
+        android:visibility="gone"
+        android:layout_marginTop="20dp"
+        android:layout_below="@+id/balance_header"
+        android:layout_width="500dp"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+
+            android:layout_width="300dp"
+            android:layout_marginLeft="35dp"
+            android:layout_height="wrap_content"
+            android:text="@string/sunpass_credential_transponder_numer"
+            android:textColor="@color/prepaid_dialog_white" />
+
+        <TextView
+            android:id="@+id/transponder_number"
+            android:layout_width="200dp"
+            android:layout_height="wrap_content"
+            android:text="@string/sunpass_credential_transponder_numer"
+            android:textColor="@color/prepaid_dialog_white" />
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/linearlayout2"
+        android:visibility="gone"
+        android:layout_marginTop="20dp"
+        android:layout_below="@+id/linearlayout1"
+        android:layout_width="500dp"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:layout_width="300dp"
+            android:layout_marginLeft="35dp"
+            android:layout_height="wrap_content"
+            android:text="@string/sunpass_credential_last_known_balance"
+            android:textColor="@color/prepaid_dialog_white" />
+
+        <TextView
+            android:id="@+id/last_known_balance"
+            android:layout_width="200dp"
+            android:layout_height="wrap_content"
+            android:text="@string/sunpass_credential_last_known_balance"
+            android:textColor="@color/prepaid_dialog_white" />
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/linearlayout3"
+        android:visibility="gone"
+        android:layout_marginTop="20dp"
+        android:layout_below="@+id/linearlayout2"
+        android:layout_width="500dp"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+
+            android:layout_width="300dp"
+            android:layout_marginLeft="35dp"
+            android:layout_height="wrap_content"
+            android:text="@string/sunpass_credential_minimum_recharge_amount"
+            android:textColor="@color/prepaid_dialog_white" />
+
+        <TextView
+            android:id="@+id/minimum_recharge_amount"
+            android:layout_width="200dp"
+            android:layout_height="wrap_content"
+            android:text="@string/sunpass_credential_minimum_recharge_amount"
+            android:textColor="@color/prepaid_dialog_white" />
+
+    </LinearLayout>
+    <Spinner
+        android:id="@+id/biller"
+        android:visibility="gone"
+        android:paddingLeft="30dp"
+        android:layout_marginTop="10dp"
+        style="@style/StyledDialog.Content.Spinner"
+        android:layout_width="500dp"
+        android:layout_height="wrap_content"
+        android:layout_below="@id/linearlayout3"
+        android:layout_alignParentLeft="@id/linearlayout3"></Spinner>
+    <com.kaching123.tcr.component.CustomEditBox
+        style="@style/CustomEditBox.PaymentInputField"
+        android:visibility="gone"
+        android:id="@+id/charge"
+        android:layout_below="@id/biller"
+        android:layout_marginLeft="25dp"
+        android:gravity="left"
+        android:hint="@string/sunpass_prepaid_dialog_custom_amount_hint"
+        android:textColor="@color/prepaid_dialog_white"
+        android:layout_height="wrap_content"
+        android:textColorHint="@color/prepaid_dialog_white"
+        android:layout_width="480dp" />
+
+
+
+
+    <com.kaching123.tcr.component.KeyboardView_
+        android:id="@+id/keyboard"
+        android:layout_alignRight="@+id/tableview"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentRight="true"
+        android:layout_toLeftOf="@id/charge"
+        android:layout_marginLeft="16dp"
+        android:layout_marginTop="20dp"
+        android:layout_marginRight="20dp" />
+
+    <TextView
+        android:visibility="gone"
+        android:id="@+id/error"
+        android:layout_marginTop="20dp"
+        style="@style/Sunpass.CredentialErrorText"
+        android:layout_below="@+id/keyboard"
+        android:layout_alignLeft="@+id/keyboard"
+        android:textColor="@android:color/black"
+        android:textSize="@dimen/prepaid_label_text_size"
+        android:text="@string/sunpass_credential_error" />
+
+    <TextView
+        android:visibility="gone"
+        android:id="@+id/error_content"
+        style="@style/Sunpass.CredentialErrorText"
+        android:layout_below="@+id/error"
+        android:layout_alignLeft="@+id/keyboard"
+        android:textColor="@color/prepaid_dialog_buttons_background_color"
+        android:text="@string/sunpass_credential_error_content" />
+</RelativeLayout>
\ No newline at end of file
Index: TabletCR/src/main/java/com/kaching123/tcr/websvc/api/prepaid/BalanceResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/websvc/api/prepaid/BalanceResponse.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/websvc/api/prepaid/BalanceResponse.java	(revision )
@@ -30,9 +30,9 @@
     public int responseCode;
     public String responseDescription;
     public long referenceNumber;
-    
+
     public BalanceResponse(){}
-    
+
     public BalanceResponse(SoapObject soapObject)
     {
         if (soapObject == null)
Index: TabletCR/src/main/java/com/kaching123/tcr/processor/PaxBalanceProcessor.java
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/processor/PaxBalanceProcessor.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/processor/PaxBalanceProcessor.java	(revision 2972)
@@ -1,109 +0,0 @@
-package com.kaching123.tcr.processor;
-
-import android.content.Context;
-import android.graphics.Color;
-import android.support.v4.app.FragmentActivity;
-import android.text.Spannable;
-import android.text.SpannableString;
-import android.text.TextUtils;
-import android.text.style.ForegroundColorSpan;
-import android.widget.Toast;
-
-import com.kaching123.tcr.Logger;
-import com.kaching123.tcr.R;
-import com.kaching123.tcr.commands.payment.pax.PaxLastTransactionCommand;
-import com.kaching123.tcr.commands.payment.pax.PaxLastTransactionCommand.PaxSaleCommandBaseCallback;
-import com.kaching123.tcr.fragment.tendering.pax.BalancePAXPendingFragmentDialog;
-import com.kaching123.tcr.fragment.tendering.pax.BalancePAXPendingFragmentDialog.IBalanceSaleProgressListener;
-import com.kaching123.tcr.fragment.tendering.payment.INotificationConfirmListener;
-import com.kaching123.tcr.fragment.tendering.payment.PayNotificationFragmentDialog;
-import com.kaching123.tcr.model.PaxModel;
-import com.kaching123.tcr.model.payment.blackstone.pax.PaxTransaction;
-import com.kaching123.tcr.model.payment.blackstone.payment.TransactionStatusCode;
-import com.kaching123.tcr.model.payment.general.card.CreditCard;
-import com.kaching123.tcr.model.payment.general.transaction.BlackStoneTransactionFactory;
-import com.kaching123.tcr.model.payment.general.transaction.Transaction;
-import com.kaching123.tcr.model.payment.general.transaction.TransactionType;
-import com.kaching123.tcr.processor.PaxReloadProcessor.IPAXReloadCallback;
-import com.kaching123.tcr.util.CalculationUtil;
-
-import junit.framework.Assert;
-
-import java.math.BigDecimal;
-
-/**
- * @author Ivan v. Rikhmayer
- *         This class is intended to
- */
-public class PaxBalanceProcessor {
-
-    private PaxBalanceProcessor() {
-
-    }
-
-    public static PaxBalanceProcessor get() {
-        return new PaxBalanceProcessor();
-    }
-
-    public void checkBalance(final FragmentActivity context) {
-        BalancePAXPendingFragmentDialog.show(context, new IBalanceSaleProgressListener() {
-            @Override
-            public void onComplete(BigDecimal balance, String last4, String errorReason) {
-                hide();
-                final Spannable messageSpannable;
-                boolean success;
-                if (success = balance != null && TextUtils.isEmpty(errorReason)) {
-                    String message = context.getString(R.string.pax_balance_response, last4, balance == null ? "unknown" : balance.toString());
-                    messageSpannable = new SpannableString(message);
-                    messageSpannable.setSpan(new ForegroundColorSpan(Color.GREEN), 0, message.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
-                } else {
-                    messageSpannable = new SpannableString(errorReason);
-                    messageSpannable.setSpan(new ForegroundColorSpan(Color.RED), 0, errorReason.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
-                }
-                proceedToCardPaymentNotification(context, success, messageSpannable);
-            }
-
-            @Override
-            public void onCancel() {
-                hide();
-            }
-
-            private void hide() {
-                BalancePAXPendingFragmentDialog.hide(context);
-            }
-        });
-    }
-
-    /**
-     * Notify the user about the result and wait for further commands
-     */
-    private void proceedToCardPaymentNotification(final FragmentActivity context,
-                                                  final boolean success,
-                                                  Spannable message) {
-
-        PayNotificationFragmentDialog.show(context, false, success, false, message, false, new INotificationConfirmListener() {
-
-            @Override
-            public void onReload(final Object ignore) {
-            }
-
-            @Override
-            public void onRetry() {
-            }
-
-            @Override
-            public void onCancel() {
-                hide();
-            }
-
-            @Override
-            public void onConfirmed() {
-                hide();
-            }
-
-            private void hide() {
-                PayNotificationFragmentDialog.hide(context);
-            }
-        });
-    }
-}
Index: TabletCR/src/main/java/com/kaching123/tcr/adapter/BillPaymentOptionsAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/adapter/BillPaymentOptionsAdapter.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/adapter/BillPaymentOptionsAdapter.java	(revision )
@@ -0,0 +1,105 @@
+package com.kaching123.tcr.adapter;
+
+import android.graphics.Color;
+import android.support.v4.app.FragmentActivity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.TextView;
+
+import com.googlecode.androidannotations.annotations.res.ColorRes;
+import com.kaching123.tcr.R;
+import com.kaching123.tcr.websvc.api.prepaid.MasterBiller;
+import com.kaching123.tcr.websvc.api.prepaid.PaymentOption;
+import com.kaching123.tcr.websvc.api.prepaid.VectorPaymentOption;
+
+import java.util.ArrayList;
+
+/**
+ * Created by teli.yin on 6/6/2014.
+ */
+public class BillPaymentOptionsAdapter extends BaseAdapter {
+
+    private FragmentActivity mContext;
+
+    private VectorPaymentOption mPymentOption;
+
+    private BillPaymentOptionsListener mListener;
+
+    private final String Dollar_Ampersand = "$";
+    private final String SAME_DAY = "SAMEDAY";
+    private final String NEXT_DAU = "NEXTDAY";
+    private final String STANDARD = "STANDARD";
+
+    private int selectedPosition;
+
+    public BillPaymentOptionsAdapter(FragmentActivity context, VectorPaymentOption paymentOptions, BillPaymentOptionsListener listener) {
+        this.mContext = context;
+        this.mPymentOption = paymentOptions;
+        this.mListener = listener;
+        this.selectedPosition = -1;
+    }
+
+    @Override
+    public int getCount() {
+        return mPymentOption.size();
+    }
+
+    @Override
+    public Object getItem(int i) {
+        return mPymentOption.get(i);
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @Override
+    public View getView(int i, View view, ViewGroup viewGroup) {
+        view = LayoutInflater.from(mContext).inflate(R.layout.bill_payment_options_listview_item, null);
+
+        TextView fee = (TextView) view.findViewById(R.id.fee);
+        fee.setText(Dollar_Ampersand + mPymentOption.get(i).feeAmount);
+        TextView type = (TextView) view.findViewById(R.id.type);
+        type.setText(mPymentOption.get(i).paymentType);
+        TextView description = (TextView) view.findViewById(R.id.description);
+        String sDescription = null;
+        if (mPymentOption.get(i).paymentType.equalsIgnoreCase(SAME_DAY))
+            sDescription = SAME_DAY + "(24-48 hours)";
+        else if (mPymentOption.get(i).paymentType.equalsIgnoreCase(NEXT_DAU))
+            sDescription = NEXT_DAU + "(48-72 hours)";
+        else if (mPymentOption.get(i).paymentType.equalsIgnoreCase(STANDARD))
+            sDescription = STANDARD + "(72-96 hours)";
+        description.setText(sDescription);
+
+        if (i == selectedPosition) {
+            fee.setTextColor(mContext.getResources().getColor(R.color.prepaid_dialog_white));
+            type.setTextColor(mContext.getResources().getColor(R.color.prepaid_dialog_white));
+            description.setTextColor(mContext.getResources().getColor(R.color.prepaid_dialog_white));
+            view.setBackgroundColor(mContext.getResources().getColor(R.color.prepaid_dialog_buttons_background_color));
+        }
+        view.setOnClickListener(listener(i, mPymentOption.get(i)));
+
+        return view;
+    }
+
+    public interface BillPaymentOptionsListener {
+        void OnClicked(int position, PaymentOption paymentOption);
+    }
+
+    protected View.OnClickListener listener(final int position, final PaymentOption paymentOption) {
+
+        return new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                selectedPosition = position;
+                mListener.OnClicked(position, paymentOption);
+                notifyDataSetChanged();
+            }
+        };
+    }
+
+
+}
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunPassChoiceDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunPassChoiceDialog.java	(revision )
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/sunpass/SunPassChoiceDialog.java	(revision )
@@ -0,0 +1,167 @@
+package com.kaching123.tcr.fragment.tendering.pinserve.prepaid.sunpass;
+
+import android.graphics.Color;
+import android.graphics.Typeface;
+import android.os.Bundle;
+import android.support.v4.app.FragmentActivity;
+import android.view.Gravity;
+import android.widget.ImageView;
+
+import com.googlecode.androidannotations.annotations.Click;
+import com.googlecode.androidannotations.annotations.EFragment;
+import com.googlecode.androidannotations.annotations.ViewById;
+import com.googlecode.androidannotations.annotations.res.ColorRes;
+import com.kaching123.tcr.R;
+import com.kaching123.tcr.fragment.dialog.DialogUtil;
+import com.kaching123.tcr.fragment.dialog.StyledDialogFragment;
+
+
+@EFragment
+public class SunPassChoiceDialog extends StyledDialogFragment {
+    @ColorRes(R.color.prepaid_dialog_white)
+    protected int colorOk;
+    @ColorRes(R.color.gray_dark)
+    protected int colorDisabled;
+    @ViewById(R.id.iv_transponder)
+    protected ImageView ivTransponder;
+    @ViewById(R.id.iv_pay_your_document)
+    protected ImageView ivPayYourDocument;
+
+    @Click
+    public void ivTransponderClicked() {
+        callback.onTrensponder(mContext);
+
+    }
+
+    @Click
+    public void ivPayYourDocumentClicked() {
+        callback.onPayYourDocument(mContext);
+    }
+
+    private FragmentActivity mContext;
+    private static final String DIALOG_NAME = "SunPassChoiceDialog";
+
+    SunPassChoiceCallback callback;
+
+
+    public void setCallback(SunPassChoiceCallback callback) {
+        this.callback = callback;
+    }
+
+
+    public void setContext(FragmentActivity context) {
+        this.mContext = context;
+    }
+
+    public interface SunPassChoiceCallback {
+
+        void onTrensponder(FragmentActivity context);
+
+        void onPayYourDocument(FragmentActivity context);
+
+        void cancel();
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        getNegativeButton().setTextColor(Color.WHITE);
+        getNegativeButton().setTextSize(25);
+        getNegativeButton().setTypeface(Typeface.DEFAULT_BOLD);
+        getDialog().getWindow().setLayout(
+                getResources().getDimensionPixelOffset(R.dimen.prepaid_supass_choice_dlg_width),
+                getResources().getDimensionPixelOffset(R.dimen.prepaid_dlg_heigth));
+    }
+
+
+    @Override
+    protected int getTitleIcon() {
+        return R.drawable.icon_sun_pass;
+    }
+
+    @Override
+    protected int getTitleTextColor() {
+        return Color.WHITE;
+    }
+
+    @Override
+    protected int getSeparatorColor() {
+        return Color.WHITE;
+    }
+
+    @Override
+    protected int getTitleViewBackgroundColor() {
+        return getResources().getColor(R.color.prepaid_dialog_title_background_color);
+    }
+
+    @Override
+    protected int getButtonsBackgroundColor() {
+        return getResources().getColor(R.color.prepaid_dialog_buttons_background_color);
+    }
+
+    @Override
+    protected int getTitleGravity() {
+        return Gravity.LEFT;
+    }
+
+    ;
+
+    @Override
+    protected int getDialogContentLayout() {
+        return R.layout.sunpass_choices;
+    }
+
+    @Override
+    protected int getDialogTitle() {
+        return R.string.sunpass_prepaid_dialog_credentials_title;
+    }
+
+    @Override
+    protected boolean hasNegativeButton() {
+        return true;
+    }
+
+    @Override
+    protected boolean hasPositiveButton() {
+        return false;
+    }
+
+    @Override
+    protected int getNegativeButtonTitle() {
+        return R.string.btn_back;
+    }
+
+    @Override
+    protected int getPositiveButtonTitle() {
+        return 0;
+    }
+
+    @Override
+    protected OnDialogClickListener getNegativeButtonListener() {
+
+        callback.cancel();
+        return null;
+    }
+
+    @Override
+    protected OnDialogClickListener getPositiveButtonListener() {
+        return null;
+    }
+
+
+    public static void show(FragmentActivity context,
+                            SunPassChoiceCallback callback) {
+        SunPassChoiceDialog dialog = SunPassChoiceDialog_.builder()
+                .build();
+        dialog.setCallback(callback);
+        dialog.setContext(context);
+        DialogUtil.show(context,
+                DIALOG_NAME,
+                dialog);
+    }
+
+    public static void hide(FragmentActivity activity) {
+        DialogUtil.hide(activity, DIALOG_NAME);
+    }
+
+}
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/billpayment/CredentialsInputFragmentDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/billpayment/CredentialsInputFragmentDialog.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/billpayment/CredentialsInputFragmentDialog.java	(revision )
@@ -1,15 +1,21 @@
 package com.kaching123.tcr.fragment.tendering.pinserve.prepaid.billpayment;
 
+import android.graphics.Color;
+import android.graphics.Typeface;
 import android.os.Bundle;
 import android.support.v4.app.FragmentActivity;
 import android.text.Editable;
+import android.text.InputType;
+import android.view.Gravity;
 import android.view.View;
 import android.widget.EditText;
 import android.widget.TextView;
 
+import com.kaching123.tcr.Logger;
 import com.kaching123.tcr.R;
 import com.kaching123.tcr.fragment.dialog.DialogUtil;
 import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.CredentialsDialogBase;
+import com.kaching123.tcr.fragment.tendering.pinserve.prepaid.CredentialsDialogWithCustomEditViewBase;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.PrepaidUser;
 import com.kaching123.tcr.model.payment.blackstone.prepaid.pinserve.request.BillPaymentRequest;
 import com.googlecode.androidannotations.annotations.AfterTextChange;
@@ -30,84 +36,98 @@
  *         This class is intended to
  */
 @EFragment
-public class CredentialsInputFragmentDialog extends CredentialsDialogBase {
+public class CredentialsInputFragmentDialog extends CredentialsDialogWithCustomEditViewBase {
 
     private static final String DIALOG_NAME = "CredentialsInputFragmentDialog";
     private static final String Y = "Y";
 
-    private MetaInfo accNum;
-    private MetaInfo accNumValidation;
-    private MetaInfo accCustFirst;
-    private MetaInfo accCustLast;
-    private MetaInfo accSendFirst;
-    private MetaInfo accSendLast;
-    private MetaInfo accNumAlter;
-    private MetaInfo accAddFirst;
-    private MetaInfo accAddSecond;
+    private int TYPE_NUMBER = InputType.TYPE_CLASS_NUMBER;
+    private int TYPE_TEXT = InputType.TYPE_CLASS_TEXT;
+    private BigDecimal total;
+    private final String DOLLAR_AMPERSAND = "$";
 
-    @FragmentArg protected Category chosenCategory;
-    @FragmentArg protected MasterBiller chosenBiller;
-    @FragmentArg protected PaymentOption chosenOption;
-    @FragmentArg protected String cashierId;
-    @FragmentArg protected PrepaidUser user;
-    @FragmentArg protected String transactionMode;
-    @FragmentArg protected BillerLoadRecord billerData;
-    @FragmentArg protected BigDecimal chosenAmount;
+    private MetaInfo2 accCustFirst;
+    private MetaInfo2 accCustLast;
+    private MetaInfo2 accSendFirst;
+    private MetaInfo2 accSendLast;
+    private MetaInfo2 accNumAlter;
+    private MetaInfo2 accAddFirst;
+    private MetaInfo2 accAddSecond;
 
+    @FragmentArg
+    protected Category chosenCategory;
+    @FragmentArg
+    protected MasterBiller chosenBiller;
+    @FragmentArg
+    protected PaymentOption chosenOption;
+    @FragmentArg
+    protected String cashierId;
+    @FragmentArg
+    protected PrepaidUser user;
+    @FragmentArg
+    protected String transactionMode;
+    @FragmentArg
+    protected BillerLoadRecord billerData;
+    @FragmentArg
+    protected BigDecimal chosenAmount;
+    @FragmentArg
+    protected String accountNumber;
+
     protected CredentialsInputFragmentDialogCallback callback;
 
-    @ViewById protected View accountNumberAlternativeContainer;
-    @ViewById protected View accountAddFirstContainer;
-    @ViewById protected View accountAddSecondContainer;
+    @ViewById
+    protected View accountNumberAlternativeContainer;
+    @ViewById
+    protected View accountAddFirstContainer;
+    @ViewById
+    protected View accountAddSecondContainer;
 
-    @ViewById protected EditText accountNumber;
-    @ViewById protected EditText accountNumberValidate;
-    @ViewById protected EditText accountNumberAlternative;
-    @ViewById protected EditText accountAddFirst;
-    @ViewById protected EditText accountAddSecond;
-    @ViewById protected EditText accountCustomerFirstName;
-    @ViewById protected EditText accountCustomerLastName;
-    @ViewById protected EditText accountSenderFirstName;
-    @ViewById protected EditText accountSenderLastName;
+    @ViewById
+    protected EditText accountNumberAlternative;
+    @ViewById
+    protected EditText accountAddFirst;
+    @ViewById
+    protected EditText accountAddSecond;
+    @ViewById
+    protected EditText accountCustomerFirstName;
+    @ViewById
+    protected EditText accountCustomerLastName;
+    @ViewById
+    protected EditText accountSenderFirstName;
+    @ViewById
+    protected EditText accountSenderLastName;
+    @ViewById
+    protected TextView amountTextview;
+    @ViewById
+    protected TextView feeTextview;
+    @ViewById
+    protected TextView totalTextview;
 
-    @ViewById protected TextView accountNumberLabel;
-    @ViewById protected TextView accountNumberValidateLabel;
-    @ViewById protected TextView accountNumberAlternativeLabel;
-    @ViewById protected TextView accountAddFirstLabel;
-    @ViewById protected TextView accountAddSecondLabel;
-    @ViewById protected TextView accountCustomerFirstNameLabel;
-    @ViewById protected TextView accountCustomerLastNameLabel;
-    @ViewById protected TextView accountSenderFirstNameLabel;
-    @ViewById protected TextView accountSenderLastNameLabel;
-
-
     public void setCallback(CredentialsInputFragmentDialogCallback callback) {
         this.callback = callback;
     }
 
-    @AfterViews  protected void init() {
+    @AfterViews
+    protected void init() {
         enableFinish(false);
 
-        final int maxLength = Integer.parseInt(billerData.vendorAccountLengthMax);
-        final int minLength = Integer.parseInt(billerData.vendorAccountLengthMin);
+        total = new BigDecimal(String.valueOf(chosenAmount.doubleValue() + chosenOption.feeAmount));
+        setAmountView();
 
         final BillerLoadFormDetails load = billerData.formDetails;
-
         final boolean customerNameWanted = Y.equals(billerData.custNameRequired);
         final boolean senderNameWanted = Y.equals(billerData.senderNameRequired);
         final boolean additionalNameWanted = load != null && Y.equals(billerData.formFlag);
         final boolean additionalNameAlt1Wanted = additionalNameWanted && Y.equals(load.addInfoReqFlag1);
         final boolean additionalNameAlt2Wanted = additionalNameWanted && Y.equals(load.addInfoReqFlag2);
 
-        accNum = new MetaInfo(accountNumber, accountNumberLabel, true, false, maxLength, minLength);
-        accNumValidation = new MetaInfo(accountNumberValidate, accountNumberValidateLabel, true, false, maxLength, minLength);
-        accCustFirst = new MetaInfo(accountCustomerFirstName, accountCustomerFirstNameLabel, customerNameWanted, !customerNameWanted);
-        accCustLast = new MetaInfo(accountCustomerLastName, accountCustomerLastNameLabel, customerNameWanted, !customerNameWanted);
-        accSendFirst = new MetaInfo(accountSenderFirstName, accountSenderFirstNameLabel, senderNameWanted, !senderNameWanted);
-        accSendLast = new MetaInfo(accountSenderLastName, accountSenderLastNameLabel, senderNameWanted, !senderNameWanted);
-        accNumAlter = new MetaInfo(accountNumberAlternative, accountNumberAlternativeLabel, additionalNameWanted, !additionalNameWanted);
-        accAddFirst = new MetaInfo(accountAddFirst, accountAddFirstLabel, additionalNameAlt1Wanted, !additionalNameAlt1Wanted);
-        accAddSecond = new MetaInfo(accountAddSecond, accountAddSecondLabel, additionalNameAlt2Wanted, !additionalNameAlt2Wanted);
+        accCustFirst = new MetaInfo2(accountCustomerFirstName, customerNameWanted, !customerNameWanted);
+        accCustLast = new MetaInfo2(accountCustomerLastName, customerNameWanted, !customerNameWanted);
+        accSendFirst = new MetaInfo2(accountSenderFirstName, senderNameWanted, !senderNameWanted);
+        accSendLast = new MetaInfo2(accountSenderLastName, senderNameWanted, !senderNameWanted);
+        accNumAlter = new MetaInfo2(accountNumberAlternative, additionalNameWanted, !additionalNameWanted);
+        accAddFirst = new MetaInfo2(accountAddFirst, additionalNameAlt1Wanted, !additionalNameAlt1Wanted);
+        accAddSecond = new MetaInfo2(accountAddSecond, additionalNameAlt2Wanted, !additionalNameAlt2Wanted);
 
         if (additionalNameWanted) {
             String altLookupLabel = load.altLookupLabel;
@@ -118,9 +138,19 @@
             int addInfoMaxLen1 = Integer.parseInt(load.addInfoMaxLen1);
             int addInfoMaxLen2 = Integer.parseInt(load.addInfoMaxLen2);
 
-            accNumAlter.label.setText(altLookupLabel);
-            accAddFirst.label.setText(addInfoLabel1);
-            accAddSecond.label.setText(addInfoLabel2);
+            accNumAlter.setHint(altLookupLabel);
+            accAddFirst.setHint(addInfoLabel1);
+            accAddSecond.setHint(addInfoLabel2);
+            if (addInfoLabel1 != null && addInfoLabel1.equalsIgnoreCase("EmailID")) {
+                accAddFirst.setInputType(TYPE_TEXT);
+            } else {
+                accAddFirst.setInputType(TYPE_NUMBER);
+            }
+            accNumAlter.setInputType(TYPE_NUMBER);
+            accAddSecond.setInputType(TYPE_NUMBER);
+//            accNumAlter.label.setText(altLookupLabel);
+//            accAddFirst.label.setText(addInfoLabel1);
+//            accAddSecond.label.setText(addInfoLabel2);
 
             accNumAlter.setMax(altLookupMaxLength);
             accAddFirst.setMax(addInfoMaxLen1);
@@ -138,72 +168,128 @@
                 accAddSecond.validated = true;
                 accountAddSecondContainer.setVisibility(View.GONE);
             }
+        } else {
+            accNumAlter.setInputType(TYPE_NUMBER);
+            accAddFirst.setInputType(TYPE_NUMBER);
+            accAddSecond.setInputType(TYPE_NUMBER);
         }
         refresh();
     }
 
-    @AfterTextChange protected void accountNumberAfterTextChanged(Editable s) {
-        String numText = s.toString();
-        String numValidationText = accNumValidation.editable.getText().toString();
-        accNumValidation.validated = accNum.validated = numText.length() >= accNum.min && numValidationText.equals(numText);
-        refresh();
+    protected void setAmountView()
+    {
+        amountTextview.setText(DOLLAR_AMPERSAND + chosenAmount);
+        feeTextview.setText(DOLLAR_AMPERSAND + chosenOption.feeAmount);
+        totalTextview.setText(DOLLAR_AMPERSAND + total);
     }
 
-    @AfterTextChange protected void accountNumberValidateAfterTextChanged(Editable s) {
-        accountNumberAfterTextChanged(accNum.editable.getText());
-    }
-
-    @AfterTextChange protected void accountCustomerLastNameAfterTextChanged(Editable s) {
+    @AfterTextChange
+    protected void accountCustomerLastNameAfterTextChanged(Editable s) {
         accCustLast.revalidate();
         refresh();
     }
 
-    @AfterTextChange protected void accountCustomerFirstNameAfterTextChanged(Editable s) {
+    @AfterTextChange
+    protected void accountCustomerFirstNameAfterTextChanged(Editable s) {
         accCustFirst.revalidate();
         refresh();
     }
 
-    @AfterTextChange protected void accountSenderFirstNameAfterTextChanged(Editable s) {
+    @AfterTextChange
+    protected void accountSenderFirstNameAfterTextChanged(Editable s) {
         accSendFirst.revalidate();
         refresh();
     }
 
-    @AfterTextChange protected void accountSenderLastNameAfterTextChanged(Editable s) {
+    @AfterTextChange
+    protected void accountSenderLastNameAfterTextChanged(Editable s) {
         accSendLast.revalidate();
         refresh();
     }
 
-    @AfterTextChange protected void accountAddFirstAfterTextChanged(Editable s) {
+    @AfterTextChange
+    protected void accountAddFirstAfterTextChanged(Editable s) {
         accAddFirst.revalidate();
         refresh();
     }
 
-    @AfterTextChange protected void accountAddSecondAfterTextChanged(Editable s) {
+    @AfterTextChange
+    protected void accountAddSecondAfterTextChanged(Editable s) {
         accAddSecond.revalidate();
         refresh();
     }
 
-    @AfterTextChange protected void accountNumberAlternativeAfterTextChanged(Editable s) {
+    @AfterTextChange
+    protected void accountNumberAlternativeAfterTextChanged(Editable s) {
         accNumAlter.revalidate();
         refresh();
     }
 
-    @Override public void onActivityCreated(Bundle savedInstanceState) {
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
+        getNegativeButton().setTextColor(Color.WHITE);
+        getNegativeButton().setTextSize(25);
+        getNegativeButton().setTypeface(Typeface.DEFAULT_BOLD);
+        getPositiveButton().setTypeface(Typeface.DEFAULT_BOLD);
+        getPositiveButton().setTextSize(25);
         getDialog().getWindow().setLayout(
                 getResources().getDimensionPixelOffset(R.dimen.prepaid_dlg_width),
                 getResources().getDimensionPixelOffset(R.dimen.prepaid_dlg_heigth));
     }
 
-    @Override protected int getDialogContentLayout() {
+    @Override
+    protected int getSeparatorColor() {
+        return Color.WHITE;
+    }
+
+    @Override
+    protected int getTitleTextColor() {
+        return Color.WHITE;
+    }
+
+    @Override
+    protected int getTitleViewBackgroundColor() {
+        return getResources().getColor(R.color.prepaid_dialog_title_background_color);
+    }
+
+    @Override
+    protected int getButtonsBackgroundColor() {
+        return getResources().getColor(R.color.prepaid_dialog_buttons_background_color);
+    }
+
+    @Override
+    protected int getTitleIcon() {
+        return R.drawable.icon_bill_payment;
+    }
+
+    @Override
+    protected int getTitleGravity() {
+        return Gravity.LEFT;
+    }
+
+    @Override
+    protected int getNegativeButtonTitle() {
+        return R.string.btn_back;
+    }
+
+    @Override
+    protected int getPositiveButtonTitle() {
+        return R.string.btn_next;
+    }
+
+    @Override
+    protected int getDialogContentLayout() {
         return R.layout.prepaid_credentials_fragment;
     }
 
-    @Override protected int getDialogTitle() {
+    @Override
+    protected int getDialogTitle() {
         return R.string.prepaid_dialog_credentials_title;
     }
 
-    @Override protected OnDialogClickListener getPositiveButtonListener() {
+    @Override
+    protected OnDialogClickListener getPositiveButtonListener() {
         return new OnDialogClickListener() {
             @Override
             public boolean onClick() {
@@ -213,7 +299,8 @@
         };
     }
 
-    @Override protected OnDialogClickListener getNegativeButtonListener() {
+    @Override
+    protected OnDialogClickListener getNegativeButtonListener() {
         return new OnDialogClickListener() {
             @Override
             public boolean onClick() {
@@ -225,40 +312,38 @@
 
     private void refresh() {
         boolean valid =
-                   accNum.validated
-                && accNumValidation.validated
-                && accCustFirst.validated
+                accCustFirst.validated
-                && accCustLast.validated
-                && accSendFirst.validated
-                && accSendLast.validated
-                && accNumAlter.validated
-                && accAddFirst.validated
-                && accAddSecond.validated;
+                        && accCustLast.validated
+                        && accSendFirst.validated
+                        && accSendLast.validated
+                        && accNumAlter.validated
+                        && accAddFirst.validated
+                        && accAddSecond.validated;
         getPositiveButton().setEnabled(valid);
         getPositiveButton().setTextColor(valid ? colorOk : colorDisabled);
     }
 
     protected boolean complete() {
-        BillPaymentRequest request      = new BillPaymentRequest();
+        BillPaymentRequest request = new BillPaymentRequest();
-        request.mID                     = String.valueOf(user.getMid());
+        request.mID = String.valueOf(user.getMid());
-        request.tID                     = String.valueOf(user.getTid());
+        request.tID = String.valueOf(user.getTid());
-        request.password                = user.getPassword();
+        request.password = user.getPassword();
-        request.cashier                 = cashierId;
+        request.cashier = cashierId;
-        request.vendorId                = billerData.vendorID;
+        request.vendorId = billerData.vendorID;
-        request.accountNumber           = accNum.toString();
+        request.accountNumber = this.accountNumber;
-        request.altAccountNumber        = accNumAlter.toString();
+        request.altAccountNumber = accNumAlter.toString();
-        request.additAccountNumber1     = accAddFirst.toString();
+        request.additAccountNumber1 = accAddFirst.toString();
-        request.additAccountNumber2     = accAddSecond.toString();
+        request.additAccountNumber2 = accAddSecond.toString();
-        request.paymentAmount           = chosenAmount;
+        request.paymentAmount = total;
-        request.feeAmount               = chosenOption.feeAmount;
+        request.feeAmount = chosenOption.feeAmount;
-        request.customerFirstName       = accCustFirst.toString();
+        request.customerFirstName = accCustFirst.toString();
-        request.customerLastName        = accCustLast.toString();
+        request.customerLastName = accCustLast.toString();
-        request.paymentType             = chosenOption.paymentType;
+        request.paymentType = chosenOption.paymentType;
-        request.senderFirstName         = accSendFirst.toString();
+        request.senderFirstName = accSendFirst.toString();
-        request.senderLastName          = accSendLast.toString();
+        request.senderLastName = accSendLast.toString();
-        request.transactionMode         = transactionMode;
+        request.transactionMode = transactionMode;
 
-        callback.onComplete(request);
+        callback.onComplete(request, total);
         return true;
     }
 
@@ -271,6 +356,7 @@
                             String transactionMode,
                             BigDecimal chosenAmount,
                             BillerLoadRecord billerData,
+                            String accountNumber,
                             CredentialsInputFragmentDialogCallback callback) {
         CredentialsInputFragmentDialog dialog = CredentialsInputFragmentDialog_.builder()
                 .chosenCategory(chosenCategory)
@@ -281,6 +367,7 @@
                 .transactionMode(transactionMode)
                 .chosenAmount(chosenAmount)
                 .billerData(billerData)
+                .accountNumber(accountNumber)
                 .build();
         dialog.setCallback(callback);
         DialogUtil.show(context, DIALOG_NAME, dialog);
@@ -293,7 +380,9 @@
     public interface CredentialsInputFragmentDialogCallback {
 
         public abstract void onCancel();
+
         public abstract void onError(String message);
-        public abstract void onComplete(BillPaymentRequest formedRequest);
+
+        public abstract void onComplete(BillPaymentRequest formedRequest, BigDecimal total);
     }
 }
Index: TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/CredentialsDialogBase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/CredentialsDialogBase.java	(revision 2972)
+++ TabletCR/src/main/java/com/kaching123/tcr/fragment/tendering/pinserve/prepaid/CredentialsDialogBase.java	(revision )
@@ -18,7 +18,7 @@
 @EFragment
 public abstract class CredentialsDialogBase extends StyledDialogFragment {
 
-    @ColorRes(R.color.dlg_text_green)
+    @ColorRes(R.color.prepaid_dialog_white)
     protected int colorOk;
     @ColorRes(R.color.gray_dark)
     protected int colorDisabled;
Index: AndroidStyledDialogs/src/eu/inmite/android/lib/dialogs/BaseDialogFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- AndroidStyledDialogs/src/eu/inmite/android/lib/dialogs/BaseDialogFragment.java	(revision 2972)
+++ AndroidStyledDialogs/src/eu/inmite/android/lib/dialogs/BaseDialogFragment.java	(revision )
@@ -21,6 +21,7 @@
 import android.content.res.ColorStateList;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
+import android.graphics.Color;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.StateListDrawable;
@@ -34,6 +35,7 @@
 import android.widget.AdapterView;
 import android.widget.Button;
 import android.widget.FrameLayout;
+import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.ListAdapter;
 import android.widget.ListView;
@@ -46,384 +48,486 @@
  */
 public abstract class BaseDialogFragment extends DialogFragment {
 
-	@Override
-	public Dialog onCreateDialog(Bundle savedInstanceState) {
-		Dialog dialog = new Dialog(getActivity(), R.style.SDL_Dialog);
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        Dialog dialog = new Dialog(getActivity(), R.style.SDL_Dialog);
+
+
-		// custom dialog background
-		final TypedArray a = getActivity().getTheme().obtainStyledAttributes(null, R.styleable.DialogStyle, R.attr.sdlDialogStyle, 0);
-		Drawable dialogBackground = a.getDrawable(R.styleable.DialogStyle_windowBackground);
-		a.recycle();
+        // custom dialog background
+        final TypedArray a = getActivity().getTheme().obtainStyledAttributes(null, R.styleable.DialogStyle, R.attr.sdlDialogStyle, 0);
+        Drawable dialogBackground = a.getDrawable(R.styleable.DialogStyle_windowBackground);
+        a.recycle();
+
-		dialog.getWindow().setBackgroundDrawable(dialogBackground);
-		Bundle args = getArguments();
-		if (args != null) {
-			dialog.setCanceledOnTouchOutside(args.getBoolean(BaseDialogBuilder.ARG_CANCELABLE_ON_TOUCH_OUTSIDE));
-		}
-		return dialog;
-	}
+        dialog.getWindow().setBackgroundDrawable(dialogBackground);
+        Bundle args = getArguments();
+        if (args != null) {
+            dialog.setCanceledOnTouchOutside(args.getBoolean(BaseDialogBuilder.ARG_CANCELABLE_ON_TOUCH_OUTSIDE));
+        }
+        return dialog;
+    }
 
-	@Override
-	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-		Builder builder = new Builder(this, getActivity(), inflater, container);
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        Builder builder = new Builder(this, getActivity(), inflater, container);
+
-		return build(builder).create();
-	}
+        return build(builder).create();
+    }
 
-	protected abstract Builder build(Builder initialBuilder);
+    protected abstract Builder build(Builder initialBuilder);
 
-	@Override
-	public void onDestroyView() {
-		// bug in the compatibility library
-		if (getDialog() != null && getRetainInstance()) {
-			getDialog().setDismissMessage(null);
-		}
-		super.onDestroyView();
-	}
+    @Override
+    public void onDestroyView() {
+        // bug in the compatibility library
+        if (getDialog() != null && getRetainInstance()) {
+            getDialog().setDismissMessage(null);
+        }
+        super.onDestroyView();
+    }
 
-	/**
-	 * @return the positive button if specified and the view is created, null otherwise
-	 */
-	protected Button getPositiveButton() {
-		if (getView() != null) {
-			return (Button) getView().findViewById(R.id.sdl__positive_button);
-		} else {
-			return null;
-		}
-	}
+    /**
+     * @return the positive button if specified and the view is created, null otherwise
+     */
+    protected Button getPositiveButton() {
+        if (getView() != null) {
+            return (Button) getView().findViewById(R.id.sdl__positive_button);
+        } else {
+            return null;
+        }
+    }
 
-	/**
-	 * @return the negative button if specified and the view is created, null otherwise
-	 */
-	protected Button getNegativeButton() {
-		if (getView() != null) {
-			return (Button) getView().findViewById(R.id.sdl__negative_button);
-		} else {
-			return null;
-		}
-	}
+    /**
+     * @return the negative button if specified and the view is created, null otherwise
+     */
+    protected Button getNegativeButton() {
+        if (getView() != null) {
+            return (Button) getView().findViewById(R.id.sdl__negative_button);
+        } else {
+            return null;
+        }
+    }
 
-	/**
-	 * @return the neutral button if specified and the view is created, null otherwise
-	 */
-	protected Button getNeutralButton() {
-		if (getView() != null) {
-			return (Button) getView().findViewById(R.id.sdl__neutral_button);
-		} else {
-			return null;
-		}
-	}
+    /**
+     * @return the neutral button if specified and the view is created, null otherwise
+     */
+    protected Button getNeutralButton() {
+        if (getView() != null) {
+            return (Button) getView().findViewById(R.id.sdl__neutral_button);
+        } else {
+            return null;
+        }
+    }
 
-	/**
-	 * Custom dialog builder
-	 */
-	protected static class Builder {
+    /**
+     * Custom dialog builder
+     */
+    protected static class Builder {
 
+        private int micon;
+        private int mTitleGravity;
+        private int mTitleTypeface;
+        private int mNegativeButtonTypeface;
+        private int mTitleTextBackgroundColor;
+        private int mButtonsBackgroundColor;
+        private int mTitleViewBackgroundColor;
+        private int mDefaultTitleTextColor;
+        private int mDefaultSeparatorColor;
+        private int mSeparatorColor;
+
-		private final DialogFragment mDialogFragment;
-		private final Context mContext;
-		private final ViewGroup mContainer;
-		private final LayoutInflater mInflater;
+        private final DialogFragment mDialogFragment;
+        private final Context mContext;
+        private final ViewGroup mContainer;
+        private final LayoutInflater mInflater;
 
-		private CharSequence mTitle = null;
-		private CharSequence mPositiveButtonText;
-		private View.OnClickListener mPositiveButtonListener;
-		private CharSequence mNegativeButtonText;
-		private View.OnClickListener mNegativeButtonListener;
-		private CharSequence mNeutralButtonText;
-		private View.OnClickListener mNeutralButtonListener;
-		private CharSequence mMessage;
-		private View mView;
-		private boolean mViewSpacingSpecified;
-		private int mViewSpacingLeft;
-		private int mViewSpacingTop;
-		private int mViewSpacingRight;
-		private int mViewSpacingBottom;
-		private ListAdapter mListAdapter;
-		private int mListCheckedItemIdx;
-		private AdapterView.OnItemClickListener mOnItemClickListener;
-		/**
-		 * Styling: *
-		 */
-		private int mTitleTextColor;
-		private int mTitleSeparatorColor;
-		private int mMessageTextColor;
-		private ColorStateList mButtonTextColor;
+        private CharSequence mTitle = null;
+        private CharSequence mPositiveButtonText;
+        private View.OnClickListener mPositiveButtonListener;
+        private CharSequence mNegativeButtonText;
+        private View.OnClickListener mNegativeButtonListener;
+        private CharSequence mNeutralButtonText;
+        private View.OnClickListener mNeutralButtonListener;
+        private CharSequence mMessage;
+        private View mView;
+        private boolean mViewSpacingSpecified;
+        private int mViewSpacingLeft;
+        private int mViewSpacingTop;
+        private int mViewSpacingRight;
+        private int mViewSpacingBottom;
+        private ListAdapter mListAdapter;
+        private int mListCheckedItemIdx;
+        private AdapterView.OnItemClickListener mOnItemClickListener;
+        /**
+         * Styling: *
+         */
+        private int mTitleTextColor;
+        private int mTitleSeparatorColor;
+        private int mMessageTextColor;
+        private ColorStateList mButtonTextColor;
-		private int mButtonSeparatorColor;
+        //		private int mButtonSeparatorColor;
-		private int mButtonBackgroundColorNormal;
-		private int mButtonBackgroundColorPressed;
-		private int mButtonBackgroundColorFocused;
+        private int mButtonBackgroundColorNormal;
+        private int mButtonBackgroundColorPressed;
+        private int mButtonBackgroundColorFocused;
 
-		public Builder(DialogFragment dialogFragment, Context context, LayoutInflater inflater, ViewGroup container) {
-			this.mDialogFragment = dialogFragment;
-			this.mContext = context;
-			this.mContainer = container;
-			this.mInflater = inflater;
-		}
+        public Builder(DialogFragment dialogFragment, Context context, LayoutInflater inflater, ViewGroup container) {
+            this.mDialogFragment = dialogFragment;
+            this.mContext = context;
+            this.mContainer = container;
+            this.mInflater = inflater;
+        }
 
-		public LayoutInflater getLayoutInflater() {
-			return mInflater;
-		}
+        public LayoutInflater getLayoutInflater() {
+            return mInflater;
+        }
 
-		public Builder setTitle(int titleId) {
-			this.mTitle = mContext.getText(titleId);
-			return this;
-		}
+        public Builder setTitle(int titleId) {
+            this.mTitle = mContext.getText(titleId);
+            return this;
+        }
 
-		public Builder setTitle(CharSequence title) {
-			this.mTitle = title;
-			return this;
-		}
+        public Builder setTitle(CharSequence title) {
+            this.mTitle = title;
+            return this;
+        }
 
-		public Builder setPositiveButton(int textId, final View.OnClickListener listener) {
-			mPositiveButtonText = mContext.getText(textId);
-			mPositiveButtonListener = listener;
-			return this;
-		}
+        public Builder setPositiveButton(int textId, final View.OnClickListener listener) {
+            mPositiveButtonText = mContext.getText(textId);
+            mPositiveButtonListener = listener;
+            return this;
+        }
 
-		public Builder setPositiveButton(CharSequence text, final View.OnClickListener listener) {
-			mPositiveButtonText = text;
-			mPositiveButtonListener = listener;
-			return this;
-		}
+        public Builder setPositiveButton(CharSequence text, final View.OnClickListener listener) {
+            mPositiveButtonText = text;
+            mPositiveButtonListener = listener;
+            return this;
+        }
 
-		public Builder setNegativeButton(int textId, final View.OnClickListener listener) {
-			mNegativeButtonText = mContext.getText(textId);
-			mNegativeButtonListener = listener;
-			return this;
-		}
+        public Builder setNegativeButton(int textId, final View.OnClickListener listener) {
+            mNegativeButtonText = mContext.getText(textId);
+            mNegativeButtonListener = listener;
+            return this;
+        }
 
-		public Builder setNegativeButton(CharSequence text, final View.OnClickListener listener) {
-			mNegativeButtonText = text;
-			mNegativeButtonListener = listener;
-			return this;
-		}
+        public Builder setNegativeButton(CharSequence text, final View.OnClickListener listener) {
+            mNegativeButtonText = text;
+            mNegativeButtonListener = listener;
+            return this;
+        }
 
-		public Builder setNeutralButton(int textId, final View.OnClickListener listener) {
-			mNeutralButtonText = mContext.getText(textId);
-			mNeutralButtonListener = listener;
-			return this;
-		}
+        public Builder setNeutralButton(int textId, final View.OnClickListener listener) {
+            mNeutralButtonText = mContext.getText(textId);
+            mNeutralButtonListener = listener;
+            return this;
+        }
 
-		public Builder setNeutralButton(CharSequence text, final View.OnClickListener listener) {
-			mNeutralButtonText = text;
-			mNeutralButtonListener = listener;
-			return this;
-		}
+        public Builder setNeutralButton(CharSequence text, final View.OnClickListener listener) {
+            mNeutralButtonText = text;
+            mNeutralButtonListener = listener;
+            return this;
+        }
 
-		public Builder setMessage(int messageId) {
-			mMessage = mContext.getText(messageId);
-			return this;
-		}
+        public Builder setMessage(int messageId) {
+            mMessage = mContext.getText(messageId);
+            return this;
+        }
 
-		public Builder setMessage(CharSequence message) {
-			mMessage = message;
-			return this;
-		}
+        public Builder setMessage(CharSequence message) {
+            mMessage = message;
+            return this;
+        }
 
+        public Builder setIcon(int icon)
+        {
+            this.micon = icon;
+            return this;
+        }
+
+        public Builder setTitleGravity(int TitleGravity)
+        {
+            this.mTitleGravity = TitleGravity;
+            return this;
+        }
+
+        public Builder setTitleTypeface(int TitleTypeface)
+        {
+            this.mTitleTypeface = TitleTypeface;
+            return this;
+        }
+
+        public Builder setNegativeButtonTypeface(int NegativeButtonTypeface)
+        {
+            this.mNegativeButtonTypeface = NegativeButtonTypeface;
+            return this;
+        }
+
+        public Builder setTitleTextBackgroundColor (int TitleTextBackgroundColor)
+        {
+            this.mTitleTextBackgroundColor = TitleTextBackgroundColor;
+            return this;
+        }
+
+        public Builder setButtonsBackgroundColor (int ButtonsBackgroundColor)
+        {
+            this.mButtonsBackgroundColor = ButtonsBackgroundColor;
+            return this;
+        }
+
+        public Builder setTitleViewBackgroundColor (int TitleViewBackgroundColor)
+        {
+            this.mTitleViewBackgroundColor = TitleViewBackgroundColor;
+            return this;
+        }
+
+        public Builder setTitleTextColor (int TitleTextColor)
+        {
+            this.mTitleTextColor = TitleTextColor;
+            return this;
+        }
+
+        public Builder setSeparatorColor (int SeparatorColor)
+        {
+            this.mSeparatorColor = SeparatorColor;
+            return this;
+        }
-		/**
-		 * Set list
-		 *
-		 * @param listAdapter
-		 * @param checkedItemIdx Item check by default, -1 if no item should be checked
-		 * @param listener
-		 * @return
-		 */
-		public Builder setItems(ListAdapter listAdapter, int checkedItemIdx, final AdapterView.OnItemClickListener listener) {
-			mListAdapter = listAdapter;
-			mOnItemClickListener = listener;
-			mListCheckedItemIdx = checkedItemIdx;
-			return this;
-		}
+        /**
+         * Set list
+         *
+         * @param listAdapter
+         * @param checkedItemIdx Item check by default, -1 if no item should be checked
+         * @param listener
+         * @return
+         */
+        public Builder setItems(ListAdapter listAdapter, int checkedItemIdx, final AdapterView.OnItemClickListener listener) {
+            mListAdapter = listAdapter;
+            mOnItemClickListener = listener;
+            mListCheckedItemIdx = checkedItemIdx;
+            return this;
+        }
 
-		public Builder setView(View view) {
-			mView = view;
-			mViewSpacingSpecified = false;
-			return this;
-		}
+        public Builder setView(View view) {
+            mView = view;
+            mViewSpacingSpecified = false;
+            return this;
+        }
 
-		public Builder setView(View view, int viewSpacingLeft, int viewSpacingTop,
-		                       int viewSpacingRight, int viewSpacingBottom) {
-			mView = view;
-			mViewSpacingSpecified = true;
-			mViewSpacingLeft = viewSpacingLeft;
-			mViewSpacingTop = viewSpacingTop;
-			mViewSpacingRight = viewSpacingRight;
-			mViewSpacingBottom = viewSpacingBottom;
-			return this;
-		}
+        public Builder setView(View view, int viewSpacingLeft, int viewSpacingTop,
+                               int viewSpacingRight, int viewSpacingBottom) {
+            mView = view;
+            mViewSpacingSpecified = true;
+            mViewSpacingLeft = viewSpacingLeft;
+            mViewSpacingTop = viewSpacingTop;
+            mViewSpacingRight = viewSpacingRight;
+            mViewSpacingBottom = viewSpacingBottom;
+            return this;
+        }
 
-		public View create() {
-			final Resources res = mContext.getResources();
-			final int defaultTitleTextColor = res.getColor(R.color.sdl_title_text_dark);
-			final int defaultTitleSeparatorColor = res.getColor(R.color.sdl_title_separator_dark);
-			final int defaultMessageTextColor = res.getColor(R.color.sdl_message_text_dark);
-			final ColorStateList defaultButtonTextColor = res.getColorStateList(R.color.sdl_button_text_dark);
-			final int defaultButtonSeparatorColor = res.getColor(R.color.sdl_button_separator_dark);
-			final int defaultButtonBackgroundColorNormal = res.getColor(R.color.sdl_button_normal_dark);
-			final int defaultButtonBackgroundColorPressed = res.getColor(R.color.sdl_button_pressed_dark);
-			final int defaultButtonBackgroundColorFocused = res.getColor(R.color.sdl_button_focused_dark);
+        public View create() {
+            final Resources res = mContext.getResources();
+            final int defaultTitleTextColor = res.getColor(R.color.sdl_title_text_dark);
+            final int defaultTitleSeparatorColor = res.getColor(R.color.sdl_title_separator_dark);
+            final int defaultMessageTextColor = res.getColor(R.color.sdl_message_text_dark);
+            final ColorStateList defaultButtonTextColor = res.getColorStateList(R.color.sdl_button_text_dark);
+            final int defaultButtonSeparatorColor = res.getColor(R.color.sdl_button_separator_dark);
+            final int defaultButtonBackgroundColorNormal = res.getColor(R.color.sdl_button_normal_dark);
+            final int defaultButtonBackgroundColorPressed = res.getColor(R.color.sdl_button_pressed_dark);
+            final int defaultButtonBackgroundColorFocused = res.getColor(R.color.sdl_button_focused_dark);
+            final int defaultTitleGravity = Gravity.CENTER;
 
             final TypedArray a = mContext.getTheme().obtainStyledAttributes(null, R.styleable.DialogStyle, R.attr.sdlDialogStyle, 0);
-			mTitleTextColor = a.getColor(R.styleable.DialogStyle_titleTextColor, defaultTitleTextColor);
+            mDefaultTitleTextColor = a.getColor(R.styleable.DialogStyle_titleTextColor, defaultTitleTextColor);
+//			mTitleTextColor = a.getColor(R.styleable.DialogStyle_titleTextColor, defaultTitleTextColor);
-			mTitleSeparatorColor = a.getColor(R.styleable.DialogStyle_titleSeparatorColor, defaultTitleSeparatorColor);
-			mMessageTextColor = a.getColor(R.styleable.DialogStyle_messageTextColor, defaultMessageTextColor);
-			mButtonTextColor = a.getColorStateList(R.styleable.DialogStyle_buttonTextColor);
-			if (mButtonTextColor == null) {
-				mButtonTextColor = defaultButtonTextColor;
-			}
+            mTitleSeparatorColor = a.getColor(R.styleable.DialogStyle_titleSeparatorColor, defaultTitleSeparatorColor);
+            mMessageTextColor = a.getColor(R.styleable.DialogStyle_messageTextColor, defaultMessageTextColor);
+            mButtonTextColor = a.getColorStateList(R.styleable.DialogStyle_buttonTextColor);
+            if (mButtonTextColor == null) {
+                mButtonTextColor = defaultButtonTextColor;
+            }
-			mButtonSeparatorColor = a.getColor(R.styleable.DialogStyle_buttonSeparatorColor, defaultButtonSeparatorColor);
+//			mButtonSeparatorColor = a.getColor(R.styleable.DialogStyle_buttonSeparatorColor, defaultButtonSeparatorColor);
+            mDefaultSeparatorColor = a.getColor(R.styleable.DialogStyle_buttonSeparatorColor, defaultButtonSeparatorColor);
-			mButtonBackgroundColorNormal = a.getColor(R.styleable.DialogStyle_buttonBackgroundColorNormal, defaultButtonBackgroundColorNormal);
-			mButtonBackgroundColorPressed = a.getColor(R.styleable.DialogStyle_buttonBackgroundColorPressed, defaultButtonBackgroundColorPressed);
-			mButtonBackgroundColorFocused = a.getColor(R.styleable.DialogStyle_buttonBackgroundColorFocused, defaultButtonBackgroundColorFocused);
+            mButtonBackgroundColorNormal = a.getColor(R.styleable.DialogStyle_buttonBackgroundColorNormal, defaultButtonBackgroundColorNormal);
+            mButtonBackgroundColorPressed = a.getColor(R.styleable.DialogStyle_buttonBackgroundColorPressed, defaultButtonBackgroundColorPressed);
+            mButtonBackgroundColorFocused = a.getColor(R.styleable.DialogStyle_buttonBackgroundColorFocused, defaultButtonBackgroundColorFocused);
 
             int dialogBgId = a.getResourceId(R.styleable.DialogStyle_dialogBackground, 0);
-			a.recycle();
+            a.recycle();
 
-			View v = getDialogLayoutAndInitTitle();
+            View v = getDialogLayoutAndInitTitle();
             v.setBackgroundResource(dialogBgId);
 
-			LinearLayout content = (LinearLayout) v.findViewById(R.id.sdl__content);
+            LinearLayout content = (LinearLayout) v.findViewById(R.id.sdl__content);
 
-			if (mMessage != null) {
-				View viewMessage = mInflater.inflate(R.layout.dialog_part_message, content, false);
-				TextView tvMessage = (TextView) viewMessage.findViewById(R.id.sdl__message);
-				tvMessage.setTextColor(mMessageTextColor);
-				tvMessage.setText(mMessage);
-				content.addView(viewMessage);
-			}
+            if (mMessage != null) {
+                View viewMessage = mInflater.inflate(R.layout.dialog_part_message, content, false);
+                TextView tvMessage = (TextView) viewMessage.findViewById(R.id.sdl__message);
+                tvMessage.setTextColor(mMessageTextColor);
+                tvMessage.setText(mMessage);
+                content.addView(viewMessage);
+            }
 
-			if (mView != null) {
-				FrameLayout customPanel = (FrameLayout) mInflater.inflate(R.layout.dialog_part_custom, content, false);
-				FrameLayout custom = (FrameLayout) customPanel.findViewById(R.id.sdl__custom);
-				custom.addView(mView, new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
-				if (mViewSpacingSpecified) {
-					custom.setPadding(mViewSpacingLeft, mViewSpacingTop, mViewSpacingRight, mViewSpacingBottom);
-				}
-				content.addView(customPanel);
-			}
+            if (mView != null) {
+                FrameLayout customPanel = (FrameLayout) mInflater.inflate(R.layout.dialog_part_custom, content, false);
+                FrameLayout custom = (FrameLayout) customPanel.findViewById(R.id.sdl__custom);
+                custom.addView(mView, new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+                if (mViewSpacingSpecified) {
+                    custom.setPadding(mViewSpacingLeft, mViewSpacingTop, mViewSpacingRight, mViewSpacingBottom);
+                }
+                content.addView(customPanel);
+            }
 
-			if (mListAdapter != null) {
-				ListView list = (ListView) mInflater.inflate(R.layout.dialog_part_list, content, false);
-				list.setAdapter(mListAdapter);
-				list.setOnItemClickListener(mOnItemClickListener);
-				if (mListCheckedItemIdx != -1) {
-					list.setSelection(mListCheckedItemIdx);
-				}
-				content.addView(list);
-			}
+            if (mListAdapter != null) {
+                ListView list = (ListView) mInflater.inflate(R.layout.dialog_part_list, content, false);
+                list.setAdapter(mListAdapter);
+                list.setOnItemClickListener(mOnItemClickListener);
+                if (mListCheckedItemIdx != -1) {
+                    list.setSelection(mListCheckedItemIdx);
+                }
+                content.addView(list);
+            }
 
-			addButtons(content);
+            addButtons(content);
 
-			return v;
-		}
+            return v;
+        }
 
-		private View getDialogLayoutAndInitTitle() {
-			View v = mInflater.inflate(R.layout.dialog_part_title, mContainer, false);
+        private View getDialogLayoutAndInitTitle() {
+            View v = mInflater.inflate(R.layout.dialog_part_title, mContainer, false);
+
-			TextView tvTitle = (TextView) v.findViewById(R.id.sdl__title);
+            TextView tvTitle = (TextView) v.findViewById(R.id.sdl__title);
+            tvTitle.setBackgroundColor(mTitleTextBackgroundColor);
+            tvTitle.setTypeface(null, mTitleTypeface);
+            LinearLayout tvLinearLayout = (LinearLayout) v.findViewById(R.id.sdl_titleLinearLayout);
+            if(mTitleViewBackgroundColor != 0)
+                tvLinearLayout.setBackgroundColor(mTitleViewBackgroundColor);
-			View viewTitleDivider = v.findViewById(R.id.sdl__titleDivider);
+            View viewTitleDivider = v.findViewById(R.id.sdl__titleDivider);
+            ImageView imageView = (ImageView)v.findViewById(R.id.sdl__titleicon);
-			if (mTitle != null) {
-				tvTitle.setText(mTitle);
+            if (mTitle != null) {
+                tvTitle.setText(mTitle);
-                tvTitle.setGravity(Gravity.CENTER);
+                tvTitle.setGravity(mTitleGravity);
+
+
+                if(mTitleTextColor != 0)
-				tvTitle.setTextColor(mTitleTextColor);
+                    tvTitle.setTextColor(mTitleTextColor);
+                else
+                    tvTitle.setTextColor(mDefaultTitleTextColor);
+
+                if(micon != 0) {
+                    imageView.setImageDrawable(this.mContext.getResources().getDrawable(micon));
+                }
-				viewTitleDivider.setBackgroundDrawable(new ColorDrawable(mTitleSeparatorColor));
-			} else {
-				tvTitle.setVisibility(View.GONE);
+                viewTitleDivider.setBackgroundDrawable(new ColorDrawable(mTitleSeparatorColor));
+            } else {
+                tvTitle.setVisibility(View.GONE);
+                imageView.setVisibility(View.GONE);
-				viewTitleDivider.setVisibility(View.GONE);
-			}
-			return v;
-		}
+                viewTitleDivider.setVisibility(View.GONE);
+            }
+            return v;
+        }
 
-		private void addButtons(LinearLayout llListDialog) {
-			if (mNegativeButtonText != null || mNeutralButtonText != null || mPositiveButtonText != null) {
-				View viewButtonPanel = mInflater.inflate(R.layout.dialog_part_button_panel, llListDialog, false);
-				LinearLayout llButtonPanel = (LinearLayout) viewButtonPanel.findViewById(R.id.dialog_button_panel);
+        private void addButtons(LinearLayout llListDialog) {
+            if (mNegativeButtonText != null || mNeutralButtonText != null || mPositiveButtonText != null) {
+                View viewButtonPanel = mInflater.inflate(R.layout.dialog_part_button_panel, llListDialog, false);
+                LinearLayout llButtonPanel = (LinearLayout) viewButtonPanel.findViewById(R.id.dialog_button_panel);
-				viewButtonPanel.findViewById(R.id.dialog_horizontal_separator).setBackgroundDrawable(new ColorDrawable(mButtonSeparatorColor));
+                if(mSeparatorColor != 0)
+                    viewButtonPanel.findViewById(R.id.dialog_horizontal_separator).setBackgroundDrawable(new ColorDrawable(mSeparatorColor));
+                else
+                    viewButtonPanel.findViewById(R.id.dialog_horizontal_separator).setBackgroundDrawable(new ColorDrawable(mDefaultSeparatorColor));
 
+                if(mButtonsBackgroundColor != 0) {
+                    llButtonPanel.setBackgroundColor(mButtonsBackgroundColor);
+                }
+
-				boolean addDivider = false;
+                boolean addDivider = false;
 
-				if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
-					addDivider = addPositiveButton(llButtonPanel, addDivider);
-				} else {
-					addDivider = addNegativeButton(llButtonPanel, addDivider);
-				}
-				addDivider = addNeutralButton(llButtonPanel, addDivider);
+                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                    addDivider = addPositiveButton(llButtonPanel, addDivider);
+                } else {
+                    addDivider = addNegativeButton(llButtonPanel, addDivider);
+                }
+                addDivider = addNeutralButton(llButtonPanel, addDivider);
 
-				if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
-					addNegativeButton(llButtonPanel, addDivider);
-				} else {
-					addPositiveButton(llButtonPanel, addDivider);
-				}
+                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                    addNegativeButton(llButtonPanel, addDivider);
+                } else {
+                    addPositiveButton(llButtonPanel, addDivider);
+                }
 
-				llListDialog.addView(viewButtonPanel);
-			}
-		}
+                llListDialog.addView(viewButtonPanel);
+            }
+        }
 
-		private boolean addNegativeButton(ViewGroup parent, boolean addDivider) {
-			if (mNegativeButtonText != null) {
-				if (addDivider) {
-					addDivider(parent);
-				}
-				Button btn = (Button) mInflater.inflate(R.layout.dialog_part_button, parent, false);
-				btn.setId(R.id.sdl__negative_button);
-				btn.setText(mNegativeButtonText);
+        private boolean addNegativeButton(ViewGroup parent, boolean addDivider) {
+            if (mNegativeButtonText != null) {
+                if (addDivider) {
+                    addDivider(parent);
+                }
+                Button btn = (Button) mInflater.inflate(R.layout.dialog_part_button, parent, false);
+                btn.setId(R.id.sdl__negative_button);
+                btn.setText(mNegativeButtonText);
+
+                btn.setTypeface(null, mNegativeButtonTypeface);
-				btn.setTextColor(mButtonTextColor);
-				btn.setBackgroundDrawable(getButtonBackground());
-				btn.setOnClickListener(mNegativeButtonListener);
-				parent.addView(btn);
-				return true;
-			}
-			return addDivider;
-		}
+                btn.setTextColor(mButtonTextColor);
+                btn.setBackgroundDrawable(getButtonBackground());
+                btn.setOnClickListener(mNegativeButtonListener);
+                parent.addView(btn);
+                return true;
+            }
+            return addDivider;
+        }
 
-		private boolean addPositiveButton(ViewGroup parent, boolean addDivider) {
-			if (mPositiveButtonText != null) {
-				if (addDivider) {
-					addDivider(parent);
-				}
-				Button btn = (Button) mInflater.inflate(R.layout.dialog_part_button, parent, false);
-				btn.setId(R.id.sdl__positive_button);
-				btn.setText(mPositiveButtonText);
-				btn.setTextColor(mButtonTextColor);
-				btn.setBackgroundDrawable(getButtonBackground());
-				btn.setOnClickListener(mPositiveButtonListener);
-				parent.addView(btn);
-				return true;
-			}
-			return addDivider;
-		}
+        private boolean addPositiveButton(ViewGroup parent, boolean addDivider) {
+            if (mPositiveButtonText != null) {
+                if (addDivider) {
+                    addDivider(parent);
+                }
+                Button btn = (Button) mInflater.inflate(R.layout.dialog_part_button, parent, false);
+                btn.setId(R.id.sdl__positive_button);
+                btn.setText(mPositiveButtonText);
+                btn.setTextColor(mButtonTextColor);
+                btn.setBackgroundDrawable(getButtonBackground());
+                btn.setOnClickListener(mPositiveButtonListener);
+                parent.addView(btn);
+                return true;
+            }
+            return addDivider;
+        }
 
-		private boolean addNeutralButton(ViewGroup parent, boolean addDivider) {
-			if (mNeutralButtonText != null) {
-				if (addDivider) {
-					addDivider(parent);
-				}
-				Button btn = (Button) mInflater.inflate(R.layout.dialog_part_button, parent, false);
-				btn.setId(R.id.sdl__neutral_button);
-				btn.setText(mNeutralButtonText);
-				btn.setTextColor(mButtonTextColor);
-				btn.setBackgroundDrawable(getButtonBackground());
-				btn.setOnClickListener(mNeutralButtonListener);
-				parent.addView(btn);
-				return true;
-			}
-			return addDivider;
-		}
+        private boolean addNeutralButton(ViewGroup parent, boolean addDivider) {
+            if (mNeutralButtonText != null) {
+                if (addDivider) {
+                    addDivider(parent);
+                }
+                Button btn = (Button) mInflater.inflate(R.layout.dialog_part_button, parent, false);
+                btn.setId(R.id.sdl__neutral_button);
+                btn.setText(mNeutralButtonText);
+                btn.setTextColor(mButtonTextColor);
+                btn.setBackgroundDrawable(getButtonBackground());
+                btn.setOnClickListener(mNeutralButtonListener);
+                parent.addView(btn);
+                return true;
+            }
+            return addDivider;
+        }
 
-		private void addDivider(ViewGroup parent) {
-			View view = mInflater.inflate(R.layout.dialog_part_button_separator, parent, false);
+        private void addDivider(ViewGroup parent) {
+            View view = mInflater.inflate(R.layout.dialog_part_button_separator, parent, false);
-			view.findViewById(R.id.dialog_button_separator).setBackgroundDrawable(new ColorDrawable(mButtonSeparatorColor));
+            if(mSeparatorColor != 0)
+                view.findViewById(R.id.dialog_button_separator).setBackgroundColor(mSeparatorColor);
+            else
+                view.findViewById(R.id.dialog_button_separator).setBackgroundColor(mDefaultSeparatorColor);
+//                    .setBackgroundDrawable(new ColorDrawable(mButtonSeparatorColor));
-			parent.addView(view);
-		}
+            parent.addView(view);
+        }
 
-		private StateListDrawable getButtonBackground() {
-			int[] pressedState = {android.R.attr.state_pressed};
-			int[] focusedState = {android.R.attr.state_focused};
-			int[] defaultState = {android.R.attr.state_enabled};
-			ColorDrawable colorDefault = new ColorDrawable(mButtonBackgroundColorNormal);
-			ColorDrawable colorPressed = new ColorDrawable(mButtonBackgroundColorPressed);
-			ColorDrawable colorFocused = new ColorDrawable(mButtonBackgroundColorFocused);
-			StateListDrawable background = new StateListDrawable();
-			background.addState(pressedState, colorPressed);
-			background.addState(focusedState, colorFocused);
-			background.addState(defaultState, colorDefault);
-			return background;
-		}
-	}
+        private StateListDrawable getButtonBackground() {
+            int[] pressedState = {android.R.attr.state_pressed};
+            int[] focusedState = {android.R.attr.state_focused};
+            int[] defaultState = {android.R.attr.state_enabled};
+            ColorDrawable colorDefault = new ColorDrawable(mButtonBackgroundColorNormal);
+            ColorDrawable colorPressed = new ColorDrawable(mButtonBackgroundColorPressed);
+            ColorDrawable colorFocused = new ColorDrawable(mButtonBackgroundColorFocused);
+            StateListDrawable background = new StateListDrawable();
+            background.addState(pressedState, colorPressed);
+            background.addState(focusedState, colorFocused);
+            background.addState(defaultState, colorDefault);
+            return background;
+        }
+    }
+
 }
